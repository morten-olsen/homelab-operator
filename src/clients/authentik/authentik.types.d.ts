// This file is generated by scripts/create-clients.ts
/* eslint-disable */
export interface paths {
    "/admin/apps/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only view list all installed apps */
        get: operations["admin_apps_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Login Metrics per 1h */
        get: operations["admin_metrics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/models/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only view list all installed models */
        get: operations["admin_models_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Settings view */
        get: operations["admin_settings_retrieve"];
        /** @description Settings view */
        put: operations["admin_settings_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Settings view */
        patch: operations["admin_settings_partial_update"];
        trace?: never;
    };
    "/admin/system/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get system information. */
        get: operations["admin_system_retrieve"];
        put?: never;
        /** @description Get system information. */
        post: operations["admin_system_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/version/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get running and latest version. */
        get: operations["admin_version_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/version/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description VersionHistory Viewset */
        get: operations["admin_version_history_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/version/history/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description VersionHistory Viewset */
        get: operations["admin_version_history_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/workers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get currently connected worker count. */
        get: operations["admin_workers_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all devices for current user */
        get: operations["authenticators_admin_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/duo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Duo authenticator devices (for admins) */
        get: operations["authenticators_admin_duo_list"];
        put?: never;
        /** @description Viewset for Duo authenticator devices (for admins) */
        post: operations["authenticators_admin_duo_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/duo/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Duo authenticator devices (for admins) */
        get: operations["authenticators_admin_duo_retrieve"];
        /** @description Viewset for Duo authenticator devices (for admins) */
        put: operations["authenticators_admin_duo_update"];
        post?: never;
        /** @description Viewset for Duo authenticator devices (for admins) */
        delete: operations["authenticators_admin_duo_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for Duo authenticator devices (for admins) */
        patch: operations["authenticators_admin_duo_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for email authenticator devices (for admins) */
        get: operations["authenticators_admin_email_list"];
        put?: never;
        /** @description Viewset for email authenticator devices (for admins) */
        post: operations["authenticators_admin_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/email/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for email authenticator devices (for admins) */
        get: operations["authenticators_admin_email_retrieve"];
        /** @description Viewset for email authenticator devices (for admins) */
        put: operations["authenticators_admin_email_update"];
        post?: never;
        /** @description Viewset for email authenticator devices (for admins) */
        delete: operations["authenticators_admin_email_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for email authenticator devices (for admins) */
        patch: operations["authenticators_admin_email_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/endpoint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        get: operations["authenticators_admin_endpoint_list"];
        put?: never;
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        post: operations["authenticators_admin_endpoint_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/endpoint/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        get: operations["authenticators_admin_endpoint_retrieve"];
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        put: operations["authenticators_admin_endpoint_update"];
        post?: never;
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        delete: operations["authenticators_admin_endpoint_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for Endpoint authenticator devices (for admins) */
        patch: operations["authenticators_admin_endpoint_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/sms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for sms authenticator devices (for admins) */
        get: operations["authenticators_admin_sms_list"];
        put?: never;
        /** @description Viewset for sms authenticator devices (for admins) */
        post: operations["authenticators_admin_sms_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/sms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for sms authenticator devices (for admins) */
        get: operations["authenticators_admin_sms_retrieve"];
        /** @description Viewset for sms authenticator devices (for admins) */
        put: operations["authenticators_admin_sms_update"];
        post?: never;
        /** @description Viewset for sms authenticator devices (for admins) */
        delete: operations["authenticators_admin_sms_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for sms authenticator devices (for admins) */
        patch: operations["authenticators_admin_sms_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/static/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for static authenticator devices (for admins) */
        get: operations["authenticators_admin_static_list"];
        put?: never;
        /** @description Viewset for static authenticator devices (for admins) */
        post: operations["authenticators_admin_static_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/static/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for static authenticator devices (for admins) */
        get: operations["authenticators_admin_static_retrieve"];
        /** @description Viewset for static authenticator devices (for admins) */
        put: operations["authenticators_admin_static_update"];
        post?: never;
        /** @description Viewset for static authenticator devices (for admins) */
        delete: operations["authenticators_admin_static_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for static authenticator devices (for admins) */
        patch: operations["authenticators_admin_static_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for totp authenticator devices (for admins) */
        get: operations["authenticators_admin_totp_list"];
        put?: never;
        /** @description Viewset for totp authenticator devices (for admins) */
        post: operations["authenticators_admin_totp_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/totp/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for totp authenticator devices (for admins) */
        get: operations["authenticators_admin_totp_retrieve"];
        /** @description Viewset for totp authenticator devices (for admins) */
        put: operations["authenticators_admin_totp_update"];
        post?: never;
        /** @description Viewset for totp authenticator devices (for admins) */
        delete: operations["authenticators_admin_totp_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for totp authenticator devices (for admins) */
        patch: operations["authenticators_admin_totp_partial_update"];
        trace?: never;
    };
    "/authenticators/admin/webauthn/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        get: operations["authenticators_admin_webauthn_list"];
        put?: never;
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        post: operations["authenticators_admin_webauthn_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/admin/webauthn/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        get: operations["authenticators_admin_webauthn_retrieve"];
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        put: operations["authenticators_admin_webauthn_update"];
        post?: never;
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        delete: operations["authenticators_admin_webauthn_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for WebAuthn authenticator devices (for admins) */
        patch: operations["authenticators_admin_webauthn_partial_update"];
        trace?: never;
    };
    "/authenticators/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all devices for current user */
        get: operations["authenticators_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/duo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Duo authenticator devices */
        get: operations["authenticators_duo_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/duo/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Duo authenticator devices */
        get: operations["authenticators_duo_retrieve"];
        /** @description Viewset for Duo authenticator devices */
        put: operations["authenticators_duo_update"];
        post?: never;
        /** @description Viewset for Duo authenticator devices */
        delete: operations["authenticators_duo_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for Duo authenticator devices */
        patch: operations["authenticators_duo_partial_update"];
        trace?: never;
    };
    "/authenticators/duo/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_duo_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for email authenticator devices */
        get: operations["authenticators_email_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/email/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for email authenticator devices */
        get: operations["authenticators_email_retrieve"];
        /** @description Viewset for email authenticator devices */
        put: operations["authenticators_email_update"];
        post?: never;
        /** @description Viewset for email authenticator devices */
        delete: operations["authenticators_email_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for email authenticator devices */
        patch: operations["authenticators_email_partial_update"];
        trace?: never;
    };
    "/authenticators/email/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_email_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/endpoint/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Endpoint authenticator devices */
        get: operations["authenticators_endpoint_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/endpoint/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for Endpoint authenticator devices */
        get: operations["authenticators_endpoint_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/endpoint/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_endpoint_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/sms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for sms authenticator devices */
        get: operations["authenticators_sms_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/sms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for sms authenticator devices */
        get: operations["authenticators_sms_retrieve"];
        /** @description Viewset for sms authenticator devices */
        put: operations["authenticators_sms_update"];
        post?: never;
        /** @description Viewset for sms authenticator devices */
        delete: operations["authenticators_sms_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for sms authenticator devices */
        patch: operations["authenticators_sms_partial_update"];
        trace?: never;
    };
    "/authenticators/sms/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_sms_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/static/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for static authenticator devices */
        get: operations["authenticators_static_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/static/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for static authenticator devices */
        get: operations["authenticators_static_retrieve"];
        /** @description Viewset for static authenticator devices */
        put: operations["authenticators_static_update"];
        post?: never;
        /** @description Viewset for static authenticator devices */
        delete: operations["authenticators_static_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for static authenticator devices */
        patch: operations["authenticators_static_partial_update"];
        trace?: never;
    };
    "/authenticators/static/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_static_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for totp authenticator devices */
        get: operations["authenticators_totp_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/totp/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for totp authenticator devices */
        get: operations["authenticators_totp_retrieve"];
        /** @description Viewset for totp authenticator devices */
        put: operations["authenticators_totp_update"];
        post?: never;
        /** @description Viewset for totp authenticator devices */
        delete: operations["authenticators_totp_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for totp authenticator devices */
        patch: operations["authenticators_totp_partial_update"];
        trace?: never;
    };
    "/authenticators/totp/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_totp_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/webauthn/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for WebAuthn authenticator devices */
        get: operations["authenticators_webauthn_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authenticators/webauthn/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Viewset for WebAuthn authenticator devices */
        get: operations["authenticators_webauthn_retrieve"];
        /** @description Viewset for WebAuthn authenticator devices */
        put: operations["authenticators_webauthn_update"];
        post?: never;
        /** @description Viewset for WebAuthn authenticator devices */
        delete: operations["authenticators_webauthn_destroy"];
        options?: never;
        head?: never;
        /** @description Viewset for WebAuthn authenticator devices */
        patch: operations["authenticators_webauthn_partial_update"];
        trace?: never;
    };
    "/authenticators/webauthn/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["authenticators_webauthn_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/application_entitlements/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ApplicationEntitlement Viewset */
        get: operations["core_application_entitlements_list"];
        put?: never;
        /** @description ApplicationEntitlement Viewset */
        post: operations["core_application_entitlements_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/application_entitlements/{pbm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ApplicationEntitlement Viewset */
        get: operations["core_application_entitlements_retrieve"];
        /** @description ApplicationEntitlement Viewset */
        put: operations["core_application_entitlements_update"];
        post?: never;
        /** @description ApplicationEntitlement Viewset */
        delete: operations["core_application_entitlements_destroy"];
        options?: never;
        head?: never;
        /** @description ApplicationEntitlement Viewset */
        patch: operations["core_application_entitlements_partial_update"];
        trace?: never;
    };
    "/core/application_entitlements/{pbm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_application_entitlements_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Custom list method that checks Policy based access instead of guardian */
        get: operations["core_applications_list"];
        put?: never;
        /** @description Application Viewset */
        post: operations["core_applications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Application Viewset */
        get: operations["core_applications_retrieve"];
        /** @description Application Viewset */
        put: operations["core_applications_update"];
        post?: never;
        /** @description Application Viewset */
        delete: operations["core_applications_destroy"];
        options?: never;
        head?: never;
        /** @description Application Viewset */
        patch: operations["core_applications_partial_update"];
        trace?: never;
    };
    "/core/applications/{slug}/check_access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check access to a single application by slug */
        get: operations["core_applications_check_access_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/{slug}/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Metrics for application logins */
        get: operations["core_applications_metrics_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/{slug}/set_icon/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set application icon */
        post: operations["core_applications_set_icon_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/{slug}/set_icon_url/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set application icon (as URL) */
        post: operations["core_applications_set_icon_url_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/applications/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_applications_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/authenticated_sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatedSession Viewset */
        get: operations["core_authenticated_sessions_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/authenticated_sessions/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatedSession Viewset */
        get: operations["core_authenticated_sessions_retrieve"];
        put?: never;
        post?: never;
        /** @description AuthenticatedSession Viewset */
        delete: operations["core_authenticated_sessions_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/authenticated_sessions/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_authenticated_sessions_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/brands/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Brand Viewset */
        get: operations["core_brands_list"];
        put?: never;
        /** @description Brand Viewset */
        post: operations["core_brands_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/brands/{brand_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Brand Viewset */
        get: operations["core_brands_retrieve"];
        /** @description Brand Viewset */
        put: operations["core_brands_update"];
        post?: never;
        /** @description Brand Viewset */
        delete: operations["core_brands_destroy"];
        options?: never;
        head?: never;
        /** @description Brand Viewset */
        patch: operations["core_brands_partial_update"];
        trace?: never;
    };
    "/core/brands/{brand_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_brands_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/brands/current/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current brand */
        get: operations["core_brands_current_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Viewset */
        get: operations["core_groups_list"];
        put?: never;
        /** @description Group Viewset */
        post: operations["core_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/groups/{group_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Viewset */
        get: operations["core_groups_retrieve"];
        /** @description Group Viewset */
        put: operations["core_groups_update"];
        post?: never;
        /** @description Group Viewset */
        delete: operations["core_groups_destroy"];
        options?: never;
        head?: never;
        /** @description Group Viewset */
        patch: operations["core_groups_partial_update"];
        trace?: never;
    };
    "/core/groups/{group_uuid}/add_user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add user to group */
        post: operations["core_groups_add_user_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/groups/{group_uuid}/remove_user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add user to group */
        post: operations["core_groups_remove_user_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/groups/{group_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_groups_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Token Viewset */
        get: operations["core_tokens_list"];
        put?: never;
        /** @description Token Viewset */
        post: operations["core_tokens_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/tokens/{identifier}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Token Viewset */
        get: operations["core_tokens_retrieve"];
        /** @description Token Viewset */
        put: operations["core_tokens_update"];
        post?: never;
        /** @description Token Viewset */
        delete: operations["core_tokens_destroy"];
        options?: never;
        head?: never;
        /** @description Token Viewset */
        patch: operations["core_tokens_partial_update"];
        trace?: never;
    };
    "/core/tokens/{identifier}/set_key/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set token key. Action is logged as event. `authentik_core.set_token_key` permission
         *     is required. */
        post: operations["core_tokens_set_key_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/tokens/{identifier}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_tokens_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/tokens/{identifier}/view_key/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return token key and log access */
        get: operations["core_tokens_view_key_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/transactional/applications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Convert data into a blueprint, validate it and apply it */
        put: operations["core_transactional_applications_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/user_consent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserConsent Viewset */
        get: operations["core_user_consent_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/user_consent/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserConsent Viewset */
        get: operations["core_user_consent_retrieve"];
        put?: never;
        post?: never;
        /** @description UserConsent Viewset */
        delete: operations["core_user_consent_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/user_consent/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_user_consent_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User Viewset */
        get: operations["core_users_list"];
        put?: never;
        /** @description User Viewset */
        post: operations["core_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User Viewset */
        get: operations["core_users_retrieve"];
        /** @description User Viewset */
        put: operations["core_users_update"];
        post?: never;
        /** @description User Viewset */
        delete: operations["core_users_destroy"];
        options?: never;
        head?: never;
        /** @description User Viewset */
        patch: operations["core_users_partial_update"];
        trace?: never;
    };
    "/core/users/{id}/impersonate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Impersonate a user */
        post: operations["core_users_impersonate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User metrics per 1h */
        get: operations["core_users_metrics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/recovery/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a temporary link that a user can use to recover their accounts */
        post: operations["core_users_recovery_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/recovery_email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a temporary link that a user can use to recover their accounts */
        post: operations["core_users_recovery_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/set_password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set password for user */
        post: operations["core_users_set_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["core_users_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/impersonate_end/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description End Impersonation a user */
        get: operations["core_users_impersonate_end_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get information about current user */
        get: operations["core_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/paths/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all user paths */
        get: operations["core_users_paths_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/core/users/service_account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new user account that is marked as a service account */
        post: operations["core_users_service_account_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crypto/certificatekeypairs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CertificateKeyPair Viewset */
        get: operations["crypto_certificatekeypairs_list"];
        put?: never;
        /** @description CertificateKeyPair Viewset */
        post: operations["crypto_certificatekeypairs_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crypto/certificatekeypairs/{kp_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CertificateKeyPair Viewset */
        get: operations["crypto_certificatekeypairs_retrieve"];
        /** @description CertificateKeyPair Viewset */
        put: operations["crypto_certificatekeypairs_update"];
        post?: never;
        /** @description CertificateKeyPair Viewset */
        delete: operations["crypto_certificatekeypairs_destroy"];
        options?: never;
        head?: never;
        /** @description CertificateKeyPair Viewset */
        patch: operations["crypto_certificatekeypairs_partial_update"];
        trace?: never;
    };
    "/crypto/certificatekeypairs/{kp_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["crypto_certificatekeypairs_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crypto/certificatekeypairs/{kp_uuid}/view_certificate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return certificate-key pairs certificate and log access */
        get: operations["crypto_certificatekeypairs_view_certificate_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crypto/certificatekeypairs/{kp_uuid}/view_private_key/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return certificate-key pairs private key and log access */
        get: operations["crypto_certificatekeypairs_view_private_key_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crypto/certificatekeypairs/generate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a new, self-signed certificate-key pair */
        post: operations["crypto_certificatekeypairs_generate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/license/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description License Viewset */
        get: operations["enterprise_license_list"];
        put?: never;
        /** @description License Viewset */
        post: operations["enterprise_license_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/license/{license_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description License Viewset */
        get: operations["enterprise_license_retrieve"];
        /** @description License Viewset */
        put: operations["enterprise_license_update"];
        post?: never;
        /** @description License Viewset */
        delete: operations["enterprise_license_destroy"];
        options?: never;
        head?: never;
        /** @description License Viewset */
        patch: operations["enterprise_license_partial_update"];
        trace?: never;
    };
    "/enterprise/license/{license_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["enterprise_license_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/license/forecast/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Forecast how many users will be required in a year */
        get: operations["enterprise_license_forecast_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/license/install_id/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get install_id */
        get: operations["enterprise_license_install_id_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/license/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the total license status */
        get: operations["enterprise_license_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Event Read-Only Viewset */
        get: operations["events_events_list"];
        put?: never;
        /** @description Event Read-Only Viewset */
        post: operations["events_events_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/events/{event_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Event Read-Only Viewset */
        get: operations["events_events_retrieve"];
        /** @description Event Read-Only Viewset */
        put: operations["events_events_update"];
        post?: never;
        /** @description Event Read-Only Viewset */
        delete: operations["events_events_destroy"];
        options?: never;
        head?: never;
        /** @description Event Read-Only Viewset */
        patch: operations["events_events_partial_update"];
        trace?: never;
    };
    "/events/events/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all actions */
        get: operations["events_events_actions_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/events/per_month/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the count of events per month */
        get: operations["events_events_per_month_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/events/top_per_user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the top_n events grouped by user count */
        get: operations["events_events_top_per_user_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/events/volume/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get event volume for specified filters and timeframe */
        get: operations["events_events_volume_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Notification Viewset */
        get: operations["events_notifications_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/notifications/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Notification Viewset */
        get: operations["events_notifications_retrieve"];
        /** @description Notification Viewset */
        put: operations["events_notifications_update"];
        post?: never;
        /** @description Notification Viewset */
        delete: operations["events_notifications_destroy"];
        options?: never;
        head?: never;
        /** @description Notification Viewset */
        patch: operations["events_notifications_partial_update"];
        trace?: never;
    };
    "/events/notifications/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["events_notifications_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/notifications/mark_all_seen/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Mark all the user's notifications as seen */
        post: operations["events_notifications_mark_all_seen_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationRule Viewset */
        get: operations["events_rules_list"];
        put?: never;
        /** @description NotificationRule Viewset */
        post: operations["events_rules_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/rules/{pbm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationRule Viewset */
        get: operations["events_rules_retrieve"];
        /** @description NotificationRule Viewset */
        put: operations["events_rules_update"];
        post?: never;
        /** @description NotificationRule Viewset */
        delete: operations["events_rules_destroy"];
        options?: never;
        head?: never;
        /** @description NotificationRule Viewset */
        patch: operations["events_rules_partial_update"];
        trace?: never;
    };
    "/events/rules/{pbm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["events_rules_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/system_tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only view set that returns all background tasks */
        get: operations["events_system_tasks_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/system_tasks/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only view set that returns all background tasks */
        get: operations["events_system_tasks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/system_tasks/{uuid}/run/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Run task */
        post: operations["events_system_tasks_run_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/transports/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationTransport Viewset */
        get: operations["events_transports_list"];
        put?: never;
        /** @description NotificationTransport Viewset */
        post: operations["events_transports_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/transports/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationTransport Viewset */
        get: operations["events_transports_retrieve"];
        /** @description NotificationTransport Viewset */
        put: operations["events_transports_update"];
        post?: never;
        /** @description NotificationTransport Viewset */
        delete: operations["events_transports_destroy"];
        options?: never;
        head?: never;
        /** @description NotificationTransport Viewset */
        patch: operations["events_transports_partial_update"];
        trace?: never;
    };
    "/events/transports/{uuid}/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send example notification using selected transport. Requires
         *     Modify permissions. */
        post: operations["events_transports_test_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/transports/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["events_transports_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/bindings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description FlowStageBinding Viewset */
        get: operations["flows_bindings_list"];
        put?: never;
        /** @description FlowStageBinding Viewset */
        post: operations["flows_bindings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/bindings/{fsb_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description FlowStageBinding Viewset */
        get: operations["flows_bindings_retrieve"];
        /** @description FlowStageBinding Viewset */
        put: operations["flows_bindings_update"];
        post?: never;
        /** @description FlowStageBinding Viewset */
        delete: operations["flows_bindings_destroy"];
        options?: never;
        head?: never;
        /** @description FlowStageBinding Viewset */
        patch: operations["flows_bindings_partial_update"];
        trace?: never;
    };
    "/flows/bindings/{fsb_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["flows_bindings_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/executor/{flow_slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the next pending challenge from the currently active flow. */
        get: operations["flows_executor_get"];
        put?: never;
        /** @description Solve the previously retrieved challenge and advanced to the next stage. */
        post: operations["flows_executor_solve"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/inspector/{flow_slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current flow state and record it */
        get: operations["flows_inspector_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Flow Viewset */
        get: operations["flows_instances_list"];
        put?: never;
        /** @description Flow Viewset */
        post: operations["flows_instances_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Flow Viewset */
        get: operations["flows_instances_retrieve"];
        /** @description Flow Viewset */
        put: operations["flows_instances_update"];
        post?: never;
        /** @description Flow Viewset */
        delete: operations["flows_instances_destroy"];
        options?: never;
        head?: never;
        /** @description Flow Viewset */
        patch: operations["flows_instances_partial_update"];
        trace?: never;
    };
    "/flows/instances/{slug}/diagram/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return diagram for flow with slug `slug`, in the format used by flowchart.js */
        get: operations["flows_instances_diagram_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/execute/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Execute flow for current user */
        get: operations["flows_instances_execute_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Export flow to .yaml file */
        get: operations["flows_instances_export_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/set_background/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set Flow background */
        post: operations["flows_instances_set_background_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/set_background_url/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set Flow background (as URL) */
        post: operations["flows_instances_set_background_url_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["flows_instances_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/cache_clear/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Clear flow cache */
        post: operations["flows_instances_cache_clear_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/cache_info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Info about cached flows */
        get: operations["flows_instances_cache_info_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows/instances/import/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Import flow from .yaml file */
        post: operations["flows_instances_import_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/managed/blueprints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Blueprint instances */
        get: operations["managed_blueprints_list"];
        put?: never;
        /** @description Blueprint instances */
        post: operations["managed_blueprints_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/managed/blueprints/{instance_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Blueprint instances */
        get: operations["managed_blueprints_retrieve"];
        /** @description Blueprint instances */
        put: operations["managed_blueprints_update"];
        post?: never;
        /** @description Blueprint instances */
        delete: operations["managed_blueprints_destroy"];
        options?: never;
        head?: never;
        /** @description Blueprint instances */
        patch: operations["managed_blueprints_partial_update"];
        trace?: never;
    };
    "/managed/blueprints/{instance_uuid}/apply/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Apply a blueprint */
        post: operations["managed_blueprints_apply_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/managed/blueprints/{instance_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["managed_blueprints_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/managed/blueprints/available/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get blueprints */
        get: operations["managed_blueprints_available_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/access_tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AccessToken Viewset */
        get: operations["oauth2_access_tokens_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/access_tokens/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AccessToken Viewset */
        get: operations["oauth2_access_tokens_retrieve"];
        put?: never;
        post?: never;
        /** @description AccessToken Viewset */
        delete: operations["oauth2_access_tokens_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/access_tokens/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["oauth2_access_tokens_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/authorization_codes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthorizationCode Viewset */
        get: operations["oauth2_authorization_codes_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/authorization_codes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthorizationCode Viewset */
        get: operations["oauth2_authorization_codes_retrieve"];
        put?: never;
        post?: never;
        /** @description AuthorizationCode Viewset */
        delete: operations["oauth2_authorization_codes_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/authorization_codes/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["oauth2_authorization_codes_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/refresh_tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RefreshToken Viewset */
        get: operations["oauth2_refresh_tokens_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/refresh_tokens/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RefreshToken Viewset */
        get: operations["oauth2_refresh_tokens_retrieve"];
        put?: never;
        post?: never;
        /** @description RefreshToken Viewset */
        delete: operations["oauth2_refresh_tokens_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/refresh_tokens/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["oauth2_refresh_tokens_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/instances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Outpost Viewset */
        get: operations["outposts_instances_list"];
        put?: never;
        /** @description Outpost Viewset */
        post: operations["outposts_instances_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/instances/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Outpost Viewset */
        get: operations["outposts_instances_retrieve"];
        /** @description Outpost Viewset */
        put: operations["outposts_instances_update"];
        post?: never;
        /** @description Outpost Viewset */
        delete: operations["outposts_instances_destroy"];
        options?: never;
        head?: never;
        /** @description Outpost Viewset */
        patch: operations["outposts_instances_partial_update"];
        trace?: never;
    };
    "/outposts/instances/{uuid}/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get outposts current health */
        get: operations["outposts_instances_health_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/instances/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["outposts_instances_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/instances/default_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Global default outpost config */
        get: operations["outposts_instances_default_settings_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAPProvider Viewset */
        get: operations["outposts_ldap_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/ldap/{id}/check_access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check access to a single application by slug */
        get: operations["outposts_ldap_access_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/proxy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ProxyProvider Viewset */
        get: operations["outposts_proxy_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/radius/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RadiusProvider Viewset */
        get: operations["outposts_radius_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/radius/{id}/check_access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check access to a single application by slug */
        get: operations["outposts_radius_access_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ServiceConnection Viewset */
        get: operations["outposts_service_connections_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/all/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ServiceConnection Viewset */
        get: operations["outposts_service_connections_all_retrieve"];
        put?: never;
        post?: never;
        /** @description ServiceConnection Viewset */
        delete: operations["outposts_service_connections_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/all/{uuid}/state/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the service connection's state */
        get: operations["outposts_service_connections_all_state_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/all/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["outposts_service_connections_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["outposts_service_connections_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/docker/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DockerServiceConnection Viewset */
        get: operations["outposts_service_connections_docker_list"];
        put?: never;
        /** @description DockerServiceConnection Viewset */
        post: operations["outposts_service_connections_docker_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/docker/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DockerServiceConnection Viewset */
        get: operations["outposts_service_connections_docker_retrieve"];
        /** @description DockerServiceConnection Viewset */
        put: operations["outposts_service_connections_docker_update"];
        post?: never;
        /** @description DockerServiceConnection Viewset */
        delete: operations["outposts_service_connections_docker_destroy"];
        options?: never;
        head?: never;
        /** @description DockerServiceConnection Viewset */
        patch: operations["outposts_service_connections_docker_partial_update"];
        trace?: never;
    };
    "/outposts/service_connections/docker/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["outposts_service_connections_docker_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/kubernetes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description KubernetesServiceConnection Viewset */
        get: operations["outposts_service_connections_kubernetes_list"];
        put?: never;
        /** @description KubernetesServiceConnection Viewset */
        post: operations["outposts_service_connections_kubernetes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outposts/service_connections/kubernetes/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description KubernetesServiceConnection Viewset */
        get: operations["outposts_service_connections_kubernetes_retrieve"];
        /** @description KubernetesServiceConnection Viewset */
        put: operations["outposts_service_connections_kubernetes_update"];
        post?: never;
        /** @description KubernetesServiceConnection Viewset */
        delete: operations["outposts_service_connections_kubernetes_destroy"];
        options?: never;
        head?: never;
        /** @description KubernetesServiceConnection Viewset */
        patch: operations["outposts_service_connections_kubernetes_partial_update"];
        trace?: never;
    };
    "/outposts/service_connections/kubernetes/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["outposts_service_connections_kubernetes_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Policy Viewset */
        get: operations["policies_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Policy Viewset */
        get: operations["policies_all_retrieve"];
        put?: never;
        post?: never;
        /** @description Policy Viewset */
        delete: operations["policies_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/{policy_uuid}/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test policy */
        post: operations["policies_all_test_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/cache_clear/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Clear policy cache */
        post: operations["policies_all_cache_clear_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/cache_info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Info about cached policies */
        get: operations["policies_all_cache_info_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["policies_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/bindings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PolicyBinding Viewset */
        get: operations["policies_bindings_list"];
        put?: never;
        /** @description PolicyBinding Viewset */
        post: operations["policies_bindings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/bindings/{policy_binding_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PolicyBinding Viewset */
        get: operations["policies_bindings_retrieve"];
        /** @description PolicyBinding Viewset */
        put: operations["policies_bindings_update"];
        post?: never;
        /** @description PolicyBinding Viewset */
        delete: operations["policies_bindings_destroy"];
        options?: never;
        head?: never;
        /** @description PolicyBinding Viewset */
        patch: operations["policies_bindings_partial_update"];
        trace?: never;
    };
    "/policies/bindings/{policy_binding_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_bindings_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/dummy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Dummy Viewset */
        get: operations["policies_dummy_list"];
        put?: never;
        /** @description Dummy Viewset */
        post: operations["policies_dummy_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/dummy/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Dummy Viewset */
        get: operations["policies_dummy_retrieve"];
        /** @description Dummy Viewset */
        put: operations["policies_dummy_update"];
        post?: never;
        /** @description Dummy Viewset */
        delete: operations["policies_dummy_destroy"];
        options?: never;
        head?: never;
        /** @description Dummy Viewset */
        patch: operations["policies_dummy_partial_update"];
        trace?: never;
    };
    "/policies/dummy/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_dummy_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/event_matcher/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Event Matcher Policy Viewset */
        get: operations["policies_event_matcher_list"];
        put?: never;
        /** @description Event Matcher Policy Viewset */
        post: operations["policies_event_matcher_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/event_matcher/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Event Matcher Policy Viewset */
        get: operations["policies_event_matcher_retrieve"];
        /** @description Event Matcher Policy Viewset */
        put: operations["policies_event_matcher_update"];
        post?: never;
        /** @description Event Matcher Policy Viewset */
        delete: operations["policies_event_matcher_destroy"];
        options?: never;
        head?: never;
        /** @description Event Matcher Policy Viewset */
        patch: operations["policies_event_matcher_partial_update"];
        trace?: never;
    };
    "/policies/event_matcher/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_event_matcher_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/expression/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["policies_expression_list"];
        put?: never;
        /** @description Source Viewset */
        post: operations["policies_expression_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/expression/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["policies_expression_retrieve"];
        /** @description Source Viewset */
        put: operations["policies_expression_update"];
        post?: never;
        /** @description Source Viewset */
        delete: operations["policies_expression_destroy"];
        options?: never;
        head?: never;
        /** @description Source Viewset */
        patch: operations["policies_expression_partial_update"];
        trace?: never;
    };
    "/policies/expression/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_expression_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/geoip/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GeoIP Viewset */
        get: operations["policies_geoip_list"];
        put?: never;
        /** @description GeoIP Viewset */
        post: operations["policies_geoip_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/geoip/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GeoIP Viewset */
        get: operations["policies_geoip_retrieve"];
        /** @description GeoIP Viewset */
        put: operations["policies_geoip_update"];
        post?: never;
        /** @description GeoIP Viewset */
        delete: operations["policies_geoip_destroy"];
        options?: never;
        head?: never;
        /** @description GeoIP Viewset */
        patch: operations["policies_geoip_partial_update"];
        trace?: never;
    };
    "/policies/geoip/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_geoip_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/geoip_iso3166/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all countries in ISO-3166-1 */
        get: operations["policies_geoip_iso3166_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Policy Viewset */
        get: operations["policies_password_list"];
        put?: never;
        /** @description Password Policy Viewset */
        post: operations["policies_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/password/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Policy Viewset */
        get: operations["policies_password_retrieve"];
        /** @description Password Policy Viewset */
        put: operations["policies_password_update"];
        post?: never;
        /** @description Password Policy Viewset */
        delete: operations["policies_password_destroy"];
        options?: never;
        head?: never;
        /** @description Password Policy Viewset */
        patch: operations["policies_password_partial_update"];
        trace?: never;
    };
    "/policies/password/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_password_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/password_expiry/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Expiry Viewset */
        get: operations["policies_password_expiry_list"];
        put?: never;
        /** @description Password Expiry Viewset */
        post: operations["policies_password_expiry_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/password_expiry/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Expiry Viewset */
        get: operations["policies_password_expiry_retrieve"];
        /** @description Password Expiry Viewset */
        put: operations["policies_password_expiry_update"];
        post?: never;
        /** @description Password Expiry Viewset */
        delete: operations["policies_password_expiry_destroy"];
        options?: never;
        head?: never;
        /** @description Password Expiry Viewset */
        patch: operations["policies_password_expiry_partial_update"];
        trace?: never;
    };
    "/policies/password_expiry/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_password_expiry_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/reputation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reputation Policy Viewset */
        get: operations["policies_reputation_list"];
        put?: never;
        /** @description Reputation Policy Viewset */
        post: operations["policies_reputation_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/reputation/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reputation Policy Viewset */
        get: operations["policies_reputation_retrieve"];
        /** @description Reputation Policy Viewset */
        put: operations["policies_reputation_update"];
        post?: never;
        /** @description Reputation Policy Viewset */
        delete: operations["policies_reputation_destroy"];
        options?: never;
        head?: never;
        /** @description Reputation Policy Viewset */
        patch: operations["policies_reputation_partial_update"];
        trace?: never;
    };
    "/policies/reputation/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_reputation_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/reputation/scores/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reputation Viewset */
        get: operations["policies_reputation_scores_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/reputation/scores/{reputation_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reputation Viewset */
        get: operations["policies_reputation_scores_retrieve"];
        put?: never;
        post?: never;
        /** @description Reputation Viewset */
        delete: operations["policies_reputation_scores_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/reputation/scores/{reputation_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_reputation_scores_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/unique_password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Uniqueness Policy Viewset */
        get: operations["policies_unique_password_list"];
        put?: never;
        /** @description Password Uniqueness Policy Viewset */
        post: operations["policies_unique_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policies/unique_password/{policy_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Password Uniqueness Policy Viewset */
        get: operations["policies_unique_password_retrieve"];
        /** @description Password Uniqueness Policy Viewset */
        put: operations["policies_unique_password_update"];
        post?: never;
        /** @description Password Uniqueness Policy Viewset */
        delete: operations["policies_unique_password_destroy"];
        options?: never;
        head?: never;
        /** @description Password Uniqueness Policy Viewset */
        patch: operations["policies_unique_password_partial_update"];
        trace?: never;
    };
    "/policies/unique_password/{policy_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["policies_unique_password_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PropertyMapping Viewset */
        get: operations["propertymappings_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/all/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PropertyMapping Viewset */
        get: operations["propertymappings_all_retrieve"];
        put?: never;
        post?: never;
        /** @description PropertyMapping Viewset */
        delete: operations["propertymappings_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/all/{pm_uuid}/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test Property Mapping */
        post: operations["propertymappings_all_test_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/all/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["propertymappings_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/notification/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationWebhookMapping Viewset */
        get: operations["propertymappings_notification_list"];
        put?: never;
        /** @description NotificationWebhookMapping Viewset */
        post: operations["propertymappings_notification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/notification/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description NotificationWebhookMapping Viewset */
        get: operations["propertymappings_notification_retrieve"];
        /** @description NotificationWebhookMapping Viewset */
        put: operations["propertymappings_notification_update"];
        post?: never;
        /** @description NotificationWebhookMapping Viewset */
        delete: operations["propertymappings_notification_destroy"];
        options?: never;
        head?: never;
        /** @description NotificationWebhookMapping Viewset */
        patch: operations["propertymappings_notification_partial_update"];
        trace?: never;
    };
    "/propertymappings/notification/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_notification_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/google_workspace/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderMapping Viewset */
        get: operations["propertymappings_provider_google_workspace_list"];
        put?: never;
        /** @description GoogleWorkspaceProviderMapping Viewset */
        post: operations["propertymappings_provider_google_workspace_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/google_workspace/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderMapping Viewset */
        get: operations["propertymappings_provider_google_workspace_retrieve"];
        /** @description GoogleWorkspaceProviderMapping Viewset */
        put: operations["propertymappings_provider_google_workspace_update"];
        post?: never;
        /** @description GoogleWorkspaceProviderMapping Viewset */
        delete: operations["propertymappings_provider_google_workspace_destroy"];
        options?: never;
        head?: never;
        /** @description GoogleWorkspaceProviderMapping Viewset */
        patch: operations["propertymappings_provider_google_workspace_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/google_workspace/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_google_workspace_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/microsoft_entra/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderMapping Viewset */
        get: operations["propertymappings_provider_microsoft_entra_list"];
        put?: never;
        /** @description MicrosoftEntraProviderMapping Viewset */
        post: operations["propertymappings_provider_microsoft_entra_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/microsoft_entra/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderMapping Viewset */
        get: operations["propertymappings_provider_microsoft_entra_retrieve"];
        /** @description MicrosoftEntraProviderMapping Viewset */
        put: operations["propertymappings_provider_microsoft_entra_update"];
        post?: never;
        /** @description MicrosoftEntraProviderMapping Viewset */
        delete: operations["propertymappings_provider_microsoft_entra_destroy"];
        options?: never;
        head?: never;
        /** @description MicrosoftEntraProviderMapping Viewset */
        patch: operations["propertymappings_provider_microsoft_entra_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/microsoft_entra/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_microsoft_entra_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/rac/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RACPropertyMapping Viewset */
        get: operations["propertymappings_provider_rac_list"];
        put?: never;
        /** @description RACPropertyMapping Viewset */
        post: operations["propertymappings_provider_rac_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/rac/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RACPropertyMapping Viewset */
        get: operations["propertymappings_provider_rac_retrieve"];
        /** @description RACPropertyMapping Viewset */
        put: operations["propertymappings_provider_rac_update"];
        post?: never;
        /** @description RACPropertyMapping Viewset */
        delete: operations["propertymappings_provider_rac_destroy"];
        options?: never;
        head?: never;
        /** @description RACPropertyMapping Viewset */
        patch: operations["propertymappings_provider_rac_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/rac/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_rac_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/radius/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RadiusProviderPropertyMapping Viewset */
        get: operations["propertymappings_provider_radius_list"];
        put?: never;
        /** @description RadiusProviderPropertyMapping Viewset */
        post: operations["propertymappings_provider_radius_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/radius/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RadiusProviderPropertyMapping Viewset */
        get: operations["propertymappings_provider_radius_retrieve"];
        /** @description RadiusProviderPropertyMapping Viewset */
        put: operations["propertymappings_provider_radius_update"];
        post?: never;
        /** @description RadiusProviderPropertyMapping Viewset */
        delete: operations["propertymappings_provider_radius_destroy"];
        options?: never;
        head?: never;
        /** @description RadiusProviderPropertyMapping Viewset */
        patch: operations["propertymappings_provider_radius_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/radius/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_radius_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLPropertyMapping Viewset */
        get: operations["propertymappings_provider_saml_list"];
        put?: never;
        /** @description SAMLPropertyMapping Viewset */
        post: operations["propertymappings_provider_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/saml/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLPropertyMapping Viewset */
        get: operations["propertymappings_provider_saml_retrieve"];
        /** @description SAMLPropertyMapping Viewset */
        put: operations["propertymappings_provider_saml_update"];
        post?: never;
        /** @description SAMLPropertyMapping Viewset */
        delete: operations["propertymappings_provider_saml_destroy"];
        options?: never;
        head?: never;
        /** @description SAMLPropertyMapping Viewset */
        patch: operations["propertymappings_provider_saml_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/saml/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/scim/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMMapping Viewset */
        get: operations["propertymappings_provider_scim_list"];
        put?: never;
        /** @description SCIMMapping Viewset */
        post: operations["propertymappings_provider_scim_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/scim/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMMapping Viewset */
        get: operations["propertymappings_provider_scim_retrieve"];
        /** @description SCIMMapping Viewset */
        put: operations["propertymappings_provider_scim_update"];
        post?: never;
        /** @description SCIMMapping Viewset */
        delete: operations["propertymappings_provider_scim_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMMapping Viewset */
        patch: operations["propertymappings_provider_scim_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/scim/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_scim_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/scope/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ScopeMapping Viewset */
        get: operations["propertymappings_provider_scope_list"];
        put?: never;
        /** @description ScopeMapping Viewset */
        post: operations["propertymappings_provider_scope_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/provider/scope/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ScopeMapping Viewset */
        get: operations["propertymappings_provider_scope_retrieve"];
        /** @description ScopeMapping Viewset */
        put: operations["propertymappings_provider_scope_update"];
        post?: never;
        /** @description ScopeMapping Viewset */
        delete: operations["propertymappings_provider_scope_destroy"];
        options?: never;
        head?: never;
        /** @description ScopeMapping Viewset */
        patch: operations["propertymappings_provider_scope_partial_update"];
        trace?: never;
    };
    "/propertymappings/provider/scope/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_provider_scope_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/kerberos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description KerberosSource PropertyMapping Viewset */
        get: operations["propertymappings_source_kerberos_list"];
        put?: never;
        /** @description KerberosSource PropertyMapping Viewset */
        post: operations["propertymappings_source_kerberos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/kerberos/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description KerberosSource PropertyMapping Viewset */
        get: operations["propertymappings_source_kerberos_retrieve"];
        /** @description KerberosSource PropertyMapping Viewset */
        put: operations["propertymappings_source_kerberos_update"];
        post?: never;
        /** @description KerberosSource PropertyMapping Viewset */
        delete: operations["propertymappings_source_kerberos_destroy"];
        options?: never;
        head?: never;
        /** @description KerberosSource PropertyMapping Viewset */
        patch: operations["propertymappings_source_kerberos_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/kerberos/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_kerberos_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAP PropertyMapping Viewset */
        get: operations["propertymappings_source_ldap_list"];
        put?: never;
        /** @description LDAP PropertyMapping Viewset */
        post: operations["propertymappings_source_ldap_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/ldap/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAP PropertyMapping Viewset */
        get: operations["propertymappings_source_ldap_retrieve"];
        /** @description LDAP PropertyMapping Viewset */
        put: operations["propertymappings_source_ldap_update"];
        post?: never;
        /** @description LDAP PropertyMapping Viewset */
        delete: operations["propertymappings_source_ldap_destroy"];
        options?: never;
        head?: never;
        /** @description LDAP PropertyMapping Viewset */
        patch: operations["propertymappings_source_ldap_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/ldap/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_ldap_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/oauth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuthSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_oauth_list"];
        put?: never;
        /** @description OAuthSourcePropertyMapping Viewset */
        post: operations["propertymappings_source_oauth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/oauth/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuthSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_oauth_retrieve"];
        /** @description OAuthSourcePropertyMapping Viewset */
        put: operations["propertymappings_source_oauth_update"];
        post?: never;
        /** @description OAuthSourcePropertyMapping Viewset */
        delete: operations["propertymappings_source_oauth_destroy"];
        options?: never;
        head?: never;
        /** @description OAuthSourcePropertyMapping Viewset */
        patch: operations["propertymappings_source_oauth_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/oauth/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_oauth_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/plex/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PlexSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_plex_list"];
        put?: never;
        /** @description PlexSourcePropertyMapping Viewset */
        post: operations["propertymappings_source_plex_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/plex/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PlexSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_plex_retrieve"];
        /** @description PlexSourcePropertyMapping Viewset */
        put: operations["propertymappings_source_plex_update"];
        post?: never;
        /** @description PlexSourcePropertyMapping Viewset */
        delete: operations["propertymappings_source_plex_destroy"];
        options?: never;
        head?: never;
        /** @description PlexSourcePropertyMapping Viewset */
        patch: operations["propertymappings_source_plex_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/plex/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_plex_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_saml_list"];
        put?: never;
        /** @description SAMLSourcePropertyMapping Viewset */
        post: operations["propertymappings_source_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/saml/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_saml_retrieve"];
        /** @description SAMLSourcePropertyMapping Viewset */
        put: operations["propertymappings_source_saml_update"];
        post?: never;
        /** @description SAMLSourcePropertyMapping Viewset */
        delete: operations["propertymappings_source_saml_destroy"];
        options?: never;
        head?: never;
        /** @description SAMLSourcePropertyMapping Viewset */
        patch: operations["propertymappings_source_saml_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/saml/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/scim/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_scim_list"];
        put?: never;
        /** @description SCIMSourcePropertyMapping Viewset */
        post: operations["propertymappings_source_scim_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/propertymappings/source/scim/{pm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourcePropertyMapping Viewset */
        get: operations["propertymappings_source_scim_retrieve"];
        /** @description SCIMSourcePropertyMapping Viewset */
        put: operations["propertymappings_source_scim_update"];
        post?: never;
        /** @description SCIMSourcePropertyMapping Viewset */
        delete: operations["propertymappings_source_scim_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMSourcePropertyMapping Viewset */
        patch: operations["propertymappings_source_scim_partial_update"];
        trace?: never;
    };
    "/propertymappings/source/scim/{pm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["propertymappings_source_scim_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Provider Viewset */
        get: operations["providers_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/all/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Provider Viewset */
        get: operations["providers_all_retrieve"];
        put?: never;
        post?: never;
        /** @description Provider Viewset */
        delete: operations["providers_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/all/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["providers_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProvider Viewset */
        get: operations["providers_google_workspace_list"];
        put?: never;
        /** @description GoogleWorkspaceProvider Viewset */
        post: operations["providers_google_workspace_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProvider Viewset */
        get: operations["providers_google_workspace_retrieve"];
        /** @description GoogleWorkspaceProvider Viewset */
        put: operations["providers_google_workspace_update"];
        post?: never;
        /** @description GoogleWorkspaceProvider Viewset */
        delete: operations["providers_google_workspace_destroy"];
        options?: never;
        head?: never;
        /** @description GoogleWorkspaceProvider Viewset */
        patch: operations["providers_google_workspace_partial_update"];
        trace?: never;
    };
    "/providers/google_workspace/{id}/sync/object/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync/Re-sync a single user/group object */
        post: operations["providers_google_workspace_sync_object_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace/{id}/sync/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get provider's sync status */
        get: operations["providers_google_workspace_sync_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_google_workspace_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderGroup Viewset */
        get: operations["providers_google_workspace_groups_list"];
        put?: never;
        /** @description GoogleWorkspaceProviderGroup Viewset */
        post: operations["providers_google_workspace_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderGroup Viewset */
        get: operations["providers_google_workspace_groups_retrieve"];
        put?: never;
        post?: never;
        /** @description GoogleWorkspaceProviderGroup Viewset */
        delete: operations["providers_google_workspace_groups_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_groups/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_google_workspace_groups_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderUser Viewset */
        get: operations["providers_google_workspace_users_list"];
        put?: never;
        /** @description GoogleWorkspaceProviderUser Viewset */
        post: operations["providers_google_workspace_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GoogleWorkspaceProviderUser Viewset */
        get: operations["providers_google_workspace_users_retrieve"];
        put?: never;
        post?: never;
        /** @description GoogleWorkspaceProviderUser Viewset */
        delete: operations["providers_google_workspace_users_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/google_workspace_users/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_google_workspace_users_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAPProvider Viewset */
        get: operations["providers_ldap_list"];
        put?: never;
        /** @description LDAPProvider Viewset */
        post: operations["providers_ldap_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/ldap/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAPProvider Viewset */
        get: operations["providers_ldap_retrieve"];
        /** @description LDAPProvider Viewset */
        put: operations["providers_ldap_update"];
        post?: never;
        /** @description LDAPProvider Viewset */
        delete: operations["providers_ldap_destroy"];
        options?: never;
        head?: never;
        /** @description LDAPProvider Viewset */
        patch: operations["providers_ldap_partial_update"];
        trace?: never;
    };
    "/providers/ldap/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_ldap_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProvider Viewset */
        get: operations["providers_microsoft_entra_list"];
        put?: never;
        /** @description MicrosoftEntraProvider Viewset */
        post: operations["providers_microsoft_entra_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProvider Viewset */
        get: operations["providers_microsoft_entra_retrieve"];
        /** @description MicrosoftEntraProvider Viewset */
        put: operations["providers_microsoft_entra_update"];
        post?: never;
        /** @description MicrosoftEntraProvider Viewset */
        delete: operations["providers_microsoft_entra_destroy"];
        options?: never;
        head?: never;
        /** @description MicrosoftEntraProvider Viewset */
        patch: operations["providers_microsoft_entra_partial_update"];
        trace?: never;
    };
    "/providers/microsoft_entra/{id}/sync/object/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync/Re-sync a single user/group object */
        post: operations["providers_microsoft_entra_sync_object_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra/{id}/sync/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get provider's sync status */
        get: operations["providers_microsoft_entra_sync_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_microsoft_entra_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderGroup Viewset */
        get: operations["providers_microsoft_entra_groups_list"];
        put?: never;
        /** @description MicrosoftEntraProviderGroup Viewset */
        post: operations["providers_microsoft_entra_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderGroup Viewset */
        get: operations["providers_microsoft_entra_groups_retrieve"];
        put?: never;
        post?: never;
        /** @description MicrosoftEntraProviderGroup Viewset */
        delete: operations["providers_microsoft_entra_groups_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_groups/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_microsoft_entra_groups_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderUser Viewset */
        get: operations["providers_microsoft_entra_users_list"];
        put?: never;
        /** @description MicrosoftEntraProviderUser Viewset */
        post: operations["providers_microsoft_entra_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MicrosoftEntraProviderUser Viewset */
        get: operations["providers_microsoft_entra_users_retrieve"];
        put?: never;
        post?: never;
        /** @description MicrosoftEntraProviderUser Viewset */
        delete: operations["providers_microsoft_entra_users_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/microsoft_entra_users/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_microsoft_entra_users_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/oauth2/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuth2Provider Viewset */
        get: operations["providers_oauth2_list"];
        put?: never;
        /** @description OAuth2Provider Viewset */
        post: operations["providers_oauth2_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/oauth2/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OAuth2Provider Viewset */
        get: operations["providers_oauth2_retrieve"];
        /** @description OAuth2Provider Viewset */
        put: operations["providers_oauth2_update"];
        post?: never;
        /** @description OAuth2Provider Viewset */
        delete: operations["providers_oauth2_destroy"];
        options?: never;
        head?: never;
        /** @description OAuth2Provider Viewset */
        patch: operations["providers_oauth2_partial_update"];
        trace?: never;
    };
    "/providers/oauth2/{id}/preview_user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Preview user data for provider */
        get: operations["providers_oauth2_preview_user_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/oauth2/{id}/setup_urls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Providers setup URLs */
        get: operations["providers_oauth2_setup_urls_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/oauth2/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_oauth2_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/proxy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ProxyProvider Viewset */
        get: operations["providers_proxy_list"];
        put?: never;
        /** @description ProxyProvider Viewset */
        post: operations["providers_proxy_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/proxy/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ProxyProvider Viewset */
        get: operations["providers_proxy_retrieve"];
        /** @description ProxyProvider Viewset */
        put: operations["providers_proxy_update"];
        post?: never;
        /** @description ProxyProvider Viewset */
        delete: operations["providers_proxy_destroy"];
        options?: never;
        head?: never;
        /** @description ProxyProvider Viewset */
        patch: operations["providers_proxy_partial_update"];
        trace?: never;
    };
    "/providers/proxy/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_proxy_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/rac/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RACProvider Viewset */
        get: operations["providers_rac_list"];
        put?: never;
        /** @description RACProvider Viewset */
        post: operations["providers_rac_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/rac/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RACProvider Viewset */
        get: operations["providers_rac_retrieve"];
        /** @description RACProvider Viewset */
        put: operations["providers_rac_update"];
        post?: never;
        /** @description RACProvider Viewset */
        delete: operations["providers_rac_destroy"];
        options?: never;
        head?: never;
        /** @description RACProvider Viewset */
        patch: operations["providers_rac_partial_update"];
        trace?: never;
    };
    "/providers/rac/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_rac_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/radius/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RadiusProvider Viewset */
        get: operations["providers_radius_list"];
        put?: never;
        /** @description RadiusProvider Viewset */
        post: operations["providers_radius_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/radius/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RadiusProvider Viewset */
        get: operations["providers_radius_retrieve"];
        /** @description RadiusProvider Viewset */
        put: operations["providers_radius_update"];
        post?: never;
        /** @description RadiusProvider Viewset */
        delete: operations["providers_radius_destroy"];
        options?: never;
        head?: never;
        /** @description RadiusProvider Viewset */
        patch: operations["providers_radius_partial_update"];
        trace?: never;
    };
    "/providers/radius/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_radius_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLProvider Viewset */
        get: operations["providers_saml_list"];
        put?: never;
        /** @description SAMLProvider Viewset */
        post: operations["providers_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/saml/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLProvider Viewset */
        get: operations["providers_saml_retrieve"];
        /** @description SAMLProvider Viewset */
        put: operations["providers_saml_update"];
        post?: never;
        /** @description SAMLProvider Viewset */
        delete: operations["providers_saml_destroy"];
        options?: never;
        head?: never;
        /** @description SAMLProvider Viewset */
        patch: operations["providers_saml_partial_update"];
        trace?: never;
    };
    "/providers/saml/{id}/metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return metadata as XML string */
        get: operations["providers_saml_metadata_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/saml/{id}/preview_user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Preview user data for provider */
        get: operations["providers_saml_preview_user_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/saml/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/saml/import_metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create provider from SAML Metadata */
        post: operations["providers_saml_import_metadata_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProvider Viewset */
        get: operations["providers_scim_list"];
        put?: never;
        /** @description SCIMProvider Viewset */
        post: operations["providers_scim_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProvider Viewset */
        get: operations["providers_scim_retrieve"];
        /** @description SCIMProvider Viewset */
        put: operations["providers_scim_update"];
        post?: never;
        /** @description SCIMProvider Viewset */
        delete: operations["providers_scim_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMProvider Viewset */
        patch: operations["providers_scim_partial_update"];
        trace?: never;
    };
    "/providers/scim/{id}/sync/object/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync/Re-sync a single user/group object */
        post: operations["providers_scim_sync_object_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim/{id}/sync/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get provider's sync status */
        get: operations["providers_scim_sync_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_scim_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProviderGroup Viewset */
        get: operations["providers_scim_groups_list"];
        put?: never;
        /** @description SCIMProviderGroup Viewset */
        post: operations["providers_scim_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProviderGroup Viewset */
        get: operations["providers_scim_groups_retrieve"];
        put?: never;
        post?: never;
        /** @description SCIMProviderGroup Viewset */
        delete: operations["providers_scim_groups_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_groups/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_scim_groups_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProviderUser Viewset */
        get: operations["providers_scim_users_list"];
        put?: never;
        /** @description SCIMProviderUser Viewset */
        post: operations["providers_scim_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMProviderUser Viewset */
        get: operations["providers_scim_users_retrieve"];
        put?: never;
        post?: never;
        /** @description SCIMProviderUser Viewset */
        delete: operations["providers_scim_users_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/scim_users/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_scim_users_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/ssf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SSFProvider Viewset */
        get: operations["providers_ssf_list"];
        put?: never;
        /** @description SSFProvider Viewset */
        post: operations["providers_ssf_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/ssf/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SSFProvider Viewset */
        get: operations["providers_ssf_retrieve"];
        /** @description SSFProvider Viewset */
        put: operations["providers_ssf_update"];
        post?: never;
        /** @description SSFProvider Viewset */
        delete: operations["providers_ssf_destroy"];
        options?: never;
        head?: never;
        /** @description SSFProvider Viewset */
        patch: operations["providers_ssf_partial_update"];
        trace?: never;
    };
    "/providers/ssf/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["providers_ssf_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rac/connection_tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ConnectionToken Viewset */
        get: operations["rac_connection_tokens_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rac/connection_tokens/{connection_token_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ConnectionToken Viewset */
        get: operations["rac_connection_tokens_retrieve"];
        /** @description ConnectionToken Viewset */
        put: operations["rac_connection_tokens_update"];
        post?: never;
        /** @description ConnectionToken Viewset */
        delete: operations["rac_connection_tokens_destroy"];
        options?: never;
        head?: never;
        /** @description ConnectionToken Viewset */
        patch: operations["rac_connection_tokens_partial_update"];
        trace?: never;
    };
    "/rac/connection_tokens/{connection_token_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["rac_connection_tokens_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rac/endpoints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List accessible endpoints */
        get: operations["rac_endpoints_list"];
        put?: never;
        /** @description Endpoint Viewset */
        post: operations["rac_endpoints_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rac/endpoints/{pbm_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint Viewset */
        get: operations["rac_endpoints_retrieve"];
        /** @description Endpoint Viewset */
        put: operations["rac_endpoints_update"];
        post?: never;
        /** @description Endpoint Viewset */
        delete: operations["rac_endpoints_destroy"];
        options?: never;
        head?: never;
        /** @description Endpoint Viewset */
        patch: operations["rac_endpoints_partial_update"];
        trace?: never;
    };
    "/rac/endpoints/{pbm_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["rac_endpoints_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/initial_permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description InitialPermissions viewset */
        get: operations["rbac_initial_permissions_list"];
        put?: never;
        /** @description InitialPermissions viewset */
        post: operations["rbac_initial_permissions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/initial_permissions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description InitialPermissions viewset */
        get: operations["rbac_initial_permissions_retrieve"];
        /** @description InitialPermissions viewset */
        put: operations["rbac_initial_permissions_update"];
        post?: never;
        /** @description InitialPermissions viewset */
        delete: operations["rbac_initial_permissions_destroy"];
        options?: never;
        head?: never;
        /** @description InitialPermissions viewset */
        patch: operations["rbac_initial_permissions_partial_update"];
        trace?: never;
    };
    "/rbac/initial_permissions/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["rbac_initial_permissions_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only list of all permissions, filterable by model and app */
        get: operations["rbac_permissions_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read-only list of all permissions, filterable by model and app */
        get: operations["rbac_permissions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/assigned_by_roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get assigned object permissions for a single object */
        get: operations["rbac_permissions_assigned_by_roles_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/assigned_by_roles/{uuid}/assign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Assign permission(s) to role. When `object_pk` is set, the permissions
         *     are only assigned to the specific object, otherwise they are assigned globally. */
        post: operations["rbac_permissions_assigned_by_roles_assign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/assigned_by_roles/{uuid}/unassign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Unassign permission(s) to role. When `object_pk` is set, the permissions
         *     are only assigned to the specific object, otherwise they are assigned globally. */
        patch: operations["rbac_permissions_assigned_by_roles_unassign_partial_update"];
        trace?: never;
    };
    "/rbac/permissions/assigned_by_users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get assigned object permissions for a single object */
        get: operations["rbac_permissions_assigned_by_users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/assigned_by_users/{id}/assign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Assign permission(s) to user */
        post: operations["rbac_permissions_assigned_by_users_assign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/assigned_by_users/{id}/unassign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Unassign permission(s) to user. When `object_pk` is set, the permissions
         *     are only assigned to the specific object, otherwise they are assigned globally. */
        patch: operations["rbac_permissions_assigned_by_users_unassign_partial_update"];
        trace?: never;
    };
    "/rbac/permissions/roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a role's assigned object permissions */
        get: operations["rbac_permissions_roles_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/roles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a role's assigned object permissions */
        get: operations["rbac_permissions_roles_retrieve"];
        /** @description Get a role's assigned object permissions */
        put: operations["rbac_permissions_roles_update"];
        post?: never;
        /** @description Get a role's assigned object permissions */
        delete: operations["rbac_permissions_roles_destroy"];
        options?: never;
        head?: never;
        /** @description Get a role's assigned object permissions */
        patch: operations["rbac_permissions_roles_partial_update"];
        trace?: never;
    };
    "/rbac/permissions/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a users's assigned object permissions */
        get: operations["rbac_permissions_users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/permissions/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a users's assigned object permissions */
        get: operations["rbac_permissions_users_retrieve"];
        /** @description Get a users's assigned object permissions */
        put: operations["rbac_permissions_users_update"];
        post?: never;
        /** @description Get a users's assigned object permissions */
        delete: operations["rbac_permissions_users_destroy"];
        options?: never;
        head?: never;
        /** @description Get a users's assigned object permissions */
        patch: operations["rbac_permissions_users_partial_update"];
        trace?: never;
    };
    "/rbac/roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Role viewset */
        get: operations["rbac_roles_list"];
        put?: never;
        /** @description Role viewset */
        post: operations["rbac_roles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rbac/roles/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Role viewset */
        get: operations["rbac_roles_retrieve"];
        /** @description Role viewset */
        put: operations["rbac_roles_update"];
        post?: never;
        /** @description Role viewset */
        delete: operations["rbac_roles_destroy"];
        options?: never;
        head?: never;
        /** @description Role viewset */
        patch: operations["rbac_roles_partial_update"];
        trace?: never;
    };
    "/rbac/roles/{uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["rbac_roles_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/root/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve public configuration options */
        get: operations["root_config_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["sources_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["sources_all_retrieve"];
        put?: never;
        post?: never;
        /** @description Prevent deletion of built-in sources */
        delete: operations["sources_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/{slug}/set_icon/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set source icon */
        post: operations["sources_all_set_icon_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/{slug}/set_icon_url/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Set source icon (as URL) */
        post: operations["sources_all_set_icon_url_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["sources_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/all/user_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sources the user can configure */
        get: operations["sources_all_user_settings_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/all/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_all_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_all_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_all_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_all_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/all/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/kerberos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_kerberos_list"];
        put?: never;
        /** @description Group-source connection Viewset */
        post: operations["sources_group_connections_kerberos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/kerberos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_kerberos_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_kerberos_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_kerberos_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_kerberos_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/kerberos/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_kerberos_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_ldap_list"];
        put?: never;
        /** @description Group-source connection Viewset */
        post: operations["sources_group_connections_ldap_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/ldap/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_ldap_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_ldap_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_ldap_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_ldap_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/ldap/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_ldap_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/oauth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_oauth_list"];
        put?: never;
        /** @description Group-source connection Viewset */
        post: operations["sources_group_connections_oauth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/oauth/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_oauth_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_oauth_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_oauth_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_oauth_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/oauth/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_oauth_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/plex/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_plex_list"];
        put?: never;
        /** @description Group-source connection Viewset */
        post: operations["sources_group_connections_plex_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/plex/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_plex_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_plex_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_plex_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_plex_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/plex/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_plex_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_saml_list"];
        put?: never;
        /** @description Group-source connection Viewset */
        post: operations["sources_group_connections_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/group_connections/saml/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group-source connection Viewset */
        get: operations["sources_group_connections_saml_retrieve"];
        /** @description Group-source connection Viewset */
        put: operations["sources_group_connections_saml_update"];
        post?: never;
        /** @description Group-source connection Viewset */
        delete: operations["sources_group_connections_saml_destroy"];
        options?: never;
        head?: never;
        /** @description Group-source connection Viewset */
        patch: operations["sources_group_connections_saml_partial_update"];
        trace?: never;
    };
    "/sources/group_connections/saml/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_group_connections_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/kerberos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Kerberos Source Viewset */
        get: operations["sources_kerberos_list"];
        put?: never;
        /** @description Kerberos Source Viewset */
        post: operations["sources_kerberos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/kerberos/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Kerberos Source Viewset */
        get: operations["sources_kerberos_retrieve"];
        /** @description Kerberos Source Viewset */
        put: operations["sources_kerberos_update"];
        post?: never;
        /** @description Kerberos Source Viewset */
        delete: operations["sources_kerberos_destroy"];
        options?: never;
        head?: never;
        /** @description Kerberos Source Viewset */
        patch: operations["sources_kerberos_partial_update"];
        trace?: never;
    };
    "/sources/kerberos/{slug}/sync/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get source's sync status */
        get: operations["sources_kerberos_sync_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/kerberos/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_kerberos_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAP Source Viewset */
        get: operations["sources_ldap_list"];
        put?: never;
        /** @description LDAP Source Viewset */
        post: operations["sources_ldap_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/ldap/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description LDAP Source Viewset */
        get: operations["sources_ldap_retrieve"];
        /** @description LDAP Source Viewset */
        put: operations["sources_ldap_update"];
        post?: never;
        /** @description LDAP Source Viewset */
        delete: operations["sources_ldap_destroy"];
        options?: never;
        head?: never;
        /** @description LDAP Source Viewset */
        patch: operations["sources_ldap_partial_update"];
        trace?: never;
    };
    "/sources/ldap/{slug}/debug/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get raw LDAP data to debug */
        get: operations["sources_ldap_debug_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/ldap/{slug}/sync/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get source's sync status */
        get: operations["sources_ldap_sync_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/ldap/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_ldap_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/oauth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["sources_oauth_list"];
        put?: never;
        /** @description Source Viewset */
        post: operations["sources_oauth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/oauth/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Source Viewset */
        get: operations["sources_oauth_retrieve"];
        /** @description Source Viewset */
        put: operations["sources_oauth_update"];
        post?: never;
        /** @description Source Viewset */
        delete: operations["sources_oauth_destroy"];
        options?: never;
        head?: never;
        /** @description Source Viewset */
        patch: operations["sources_oauth_partial_update"];
        trace?: never;
    };
    "/sources/oauth/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_oauth_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/oauth/source_types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable source types. If ?name is set, only returns the type for <name>.
         *     If <name> isn't found, returns the default type. */
        get: operations["sources_oauth_source_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/plex/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plex source Viewset */
        get: operations["sources_plex_list"];
        put?: never;
        /** @description Plex source Viewset */
        post: operations["sources_plex_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/plex/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Plex source Viewset */
        get: operations["sources_plex_retrieve"];
        /** @description Plex source Viewset */
        put: operations["sources_plex_update"];
        post?: never;
        /** @description Plex source Viewset */
        delete: operations["sources_plex_destroy"];
        options?: never;
        head?: never;
        /** @description Plex source Viewset */
        patch: operations["sources_plex_partial_update"];
        trace?: never;
    };
    "/sources/plex/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_plex_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/plex/redeem_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Redeem a plex token, check it's access to resources against what's allowed
         *     for the source, and redirect to an authentication/enrollment flow. */
        post: operations["sources_plex_redeem_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/plex/redeem_token_authenticated/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Redeem a plex token for an authenticated user, creating a connection */
        post: operations["sources_plex_redeem_token_authenticated_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLSource Viewset */
        get: operations["sources_saml_list"];
        put?: never;
        /** @description SAMLSource Viewset */
        post: operations["sources_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/saml/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SAMLSource Viewset */
        get: operations["sources_saml_retrieve"];
        /** @description SAMLSource Viewset */
        put: operations["sources_saml_update"];
        post?: never;
        /** @description SAMLSource Viewset */
        delete: operations["sources_saml_destroy"];
        options?: never;
        head?: never;
        /** @description SAMLSource Viewset */
        patch: operations["sources_saml_partial_update"];
        trace?: never;
    };
    "/sources/saml/{slug}/metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return metadata as XML string */
        get: operations["sources_saml_metadata_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/saml/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSource Viewset */
        get: operations["sources_scim_list"];
        put?: never;
        /** @description SCIMSource Viewset */
        post: operations["sources_scim_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSource Viewset */
        get: operations["sources_scim_retrieve"];
        /** @description SCIMSource Viewset */
        put: operations["sources_scim_update"];
        post?: never;
        /** @description SCIMSource Viewset */
        delete: operations["sources_scim_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMSource Viewset */
        patch: operations["sources_scim_partial_update"];
        trace?: never;
    };
    "/sources/scim/{slug}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_scim_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim_groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourceGroup Viewset */
        get: operations["sources_scim_groups_list"];
        put?: never;
        /** @description SCIMSourceGroup Viewset */
        post: operations["sources_scim_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim_groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourceGroup Viewset */
        get: operations["sources_scim_groups_retrieve"];
        /** @description SCIMSourceGroup Viewset */
        put: operations["sources_scim_groups_update"];
        post?: never;
        /** @description SCIMSourceGroup Viewset */
        delete: operations["sources_scim_groups_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMSourceGroup Viewset */
        patch: operations["sources_scim_groups_partial_update"];
        trace?: never;
    };
    "/sources/scim_groups/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_scim_groups_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim_users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourceUser Viewset */
        get: operations["sources_scim_users_list"];
        put?: never;
        /** @description SCIMSourceUser Viewset */
        post: operations["sources_scim_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/scim_users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SCIMSourceUser Viewset */
        get: operations["sources_scim_users_retrieve"];
        /** @description SCIMSourceUser Viewset */
        put: operations["sources_scim_users_update"];
        post?: never;
        /** @description SCIMSourceUser Viewset */
        delete: operations["sources_scim_users_destroy"];
        options?: never;
        head?: never;
        /** @description SCIMSourceUser Viewset */
        patch: operations["sources_scim_users_partial_update"];
        trace?: never;
    };
    "/sources/scim_users/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_scim_users_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/all/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_all_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_all_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_all_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_all_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/all/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/kerberos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_kerberos_list"];
        put?: never;
        /** @description User-source connection Viewset */
        post: operations["sources_user_connections_kerberos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/kerberos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_kerberos_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_kerberos_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_kerberos_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_kerberos_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/kerberos/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_kerberos_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/ldap/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_ldap_list"];
        put?: never;
        /** @description User-source connection Viewset */
        post: operations["sources_user_connections_ldap_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/ldap/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_ldap_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_ldap_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_ldap_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_ldap_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/ldap/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_ldap_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/oauth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_oauth_list"];
        put?: never;
        /** @description User-source connection Viewset */
        post: operations["sources_user_connections_oauth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/oauth/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_oauth_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_oauth_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_oauth_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_oauth_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/oauth/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_oauth_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/plex/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_plex_list"];
        put?: never;
        /** @description User-source connection Viewset */
        post: operations["sources_user_connections_plex_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/plex/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_plex_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_plex_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_plex_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_plex_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/plex/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_plex_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/saml/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_saml_list"];
        put?: never;
        /** @description User-source connection Viewset */
        post: operations["sources_user_connections_saml_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sources/user_connections/saml/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User-source connection Viewset */
        get: operations["sources_user_connections_saml_retrieve"];
        /** @description User-source connection Viewset */
        put: operations["sources_user_connections_saml_update"];
        post?: never;
        /** @description User-source connection Viewset */
        delete: operations["sources_user_connections_saml_destroy"];
        options?: never;
        head?: never;
        /** @description User-source connection Viewset */
        patch: operations["sources_user_connections_saml_partial_update"];
        trace?: never;
    };
    "/sources/user_connections/saml/{id}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["sources_user_connections_saml_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ssf/streams/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SSFStream Viewset */
        get: operations["ssf_streams_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ssf/streams/{uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SSFStream Viewset */
        get: operations["ssf_streams_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stage Viewset */
        get: operations["stages_all_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/all/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Stage Viewset */
        get: operations["stages_all_retrieve"];
        put?: never;
        post?: never;
        /** @description Stage Viewset */
        delete: operations["stages_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/all/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_all_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/all/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all creatable types */
        get: operations["stages_all_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/all/user_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all stages the user can configure */
        get: operations["stages_all_user_settings_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/duo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorDuoStage Viewset */
        get: operations["stages_authenticator_duo_list"];
        put?: never;
        /** @description AuthenticatorDuoStage Viewset */
        post: operations["stages_authenticator_duo_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/duo/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorDuoStage Viewset */
        get: operations["stages_authenticator_duo_retrieve"];
        /** @description AuthenticatorDuoStage Viewset */
        put: operations["stages_authenticator_duo_update"];
        post?: never;
        /** @description AuthenticatorDuoStage Viewset */
        delete: operations["stages_authenticator_duo_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorDuoStage Viewset */
        patch: operations["stages_authenticator_duo_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/duo/{stage_uuid}/enrollment_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check enrollment status of user details in current session */
        post: operations["stages_authenticator_duo_enrollment_status_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/duo/{stage_uuid}/import_device_manual/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Import duo devices into authentik */
        post: operations["stages_authenticator_duo_import_device_manual_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Import duo devices into authentik */
        post: operations["stages_authenticator_duo_import_devices_automatic_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/duo/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_duo_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorEmailStage Viewset */
        get: operations["stages_authenticator_email_list"];
        put?: never;
        /** @description AuthenticatorEmailStage Viewset */
        post: operations["stages_authenticator_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/email/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorEmailStage Viewset */
        get: operations["stages_authenticator_email_retrieve"];
        /** @description AuthenticatorEmailStage Viewset */
        put: operations["stages_authenticator_email_update"];
        post?: never;
        /** @description AuthenticatorEmailStage Viewset */
        delete: operations["stages_authenticator_email_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorEmailStage Viewset */
        patch: operations["stages_authenticator_email_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/email/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_email_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/endpoint_gdtc/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        get: operations["stages_authenticator_endpoint_gdtc_list"];
        put?: never;
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        post: operations["stages_authenticator_endpoint_gdtc_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/endpoint_gdtc/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        get: operations["stages_authenticator_endpoint_gdtc_retrieve"];
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        put: operations["stages_authenticator_endpoint_gdtc_update"];
        post?: never;
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        delete: operations["stages_authenticator_endpoint_gdtc_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorEndpointGDTCStage Viewset */
        patch: operations["stages_authenticator_endpoint_gdtc_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/endpoint_gdtc/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_endpoint_gdtc_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/sms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorSMSStage Viewset */
        get: operations["stages_authenticator_sms_list"];
        put?: never;
        /** @description AuthenticatorSMSStage Viewset */
        post: operations["stages_authenticator_sms_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/sms/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorSMSStage Viewset */
        get: operations["stages_authenticator_sms_retrieve"];
        /** @description AuthenticatorSMSStage Viewset */
        put: operations["stages_authenticator_sms_update"];
        post?: never;
        /** @description AuthenticatorSMSStage Viewset */
        delete: operations["stages_authenticator_sms_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorSMSStage Viewset */
        patch: operations["stages_authenticator_sms_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/sms/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_sms_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/static/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorStaticStage Viewset */
        get: operations["stages_authenticator_static_list"];
        put?: never;
        /** @description AuthenticatorStaticStage Viewset */
        post: operations["stages_authenticator_static_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/static/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorStaticStage Viewset */
        get: operations["stages_authenticator_static_retrieve"];
        /** @description AuthenticatorStaticStage Viewset */
        put: operations["stages_authenticator_static_update"];
        post?: never;
        /** @description AuthenticatorStaticStage Viewset */
        delete: operations["stages_authenticator_static_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorStaticStage Viewset */
        patch: operations["stages_authenticator_static_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/static/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_static_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorTOTPStage Viewset */
        get: operations["stages_authenticator_totp_list"];
        put?: never;
        /** @description AuthenticatorTOTPStage Viewset */
        post: operations["stages_authenticator_totp_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/totp/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorTOTPStage Viewset */
        get: operations["stages_authenticator_totp_retrieve"];
        /** @description AuthenticatorTOTPStage Viewset */
        put: operations["stages_authenticator_totp_update"];
        post?: never;
        /** @description AuthenticatorTOTPStage Viewset */
        delete: operations["stages_authenticator_totp_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorTOTPStage Viewset */
        patch: operations["stages_authenticator_totp_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/totp/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_totp_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/validate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorValidateStage Viewset */
        get: operations["stages_authenticator_validate_list"];
        put?: never;
        /** @description AuthenticatorValidateStage Viewset */
        post: operations["stages_authenticator_validate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/validate/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorValidateStage Viewset */
        get: operations["stages_authenticator_validate_retrieve"];
        /** @description AuthenticatorValidateStage Viewset */
        put: operations["stages_authenticator_validate_update"];
        post?: never;
        /** @description AuthenticatorValidateStage Viewset */
        delete: operations["stages_authenticator_validate_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorValidateStage Viewset */
        patch: operations["stages_authenticator_validate_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/validate/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_validate_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/webauthn/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorWebAuthnStage Viewset */
        get: operations["stages_authenticator_webauthn_list"];
        put?: never;
        /** @description AuthenticatorWebAuthnStage Viewset */
        post: operations["stages_authenticator_webauthn_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/webauthn/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AuthenticatorWebAuthnStage Viewset */
        get: operations["stages_authenticator_webauthn_retrieve"];
        /** @description AuthenticatorWebAuthnStage Viewset */
        put: operations["stages_authenticator_webauthn_update"];
        post?: never;
        /** @description AuthenticatorWebAuthnStage Viewset */
        delete: operations["stages_authenticator_webauthn_destroy"];
        options?: never;
        head?: never;
        /** @description AuthenticatorWebAuthnStage Viewset */
        patch: operations["stages_authenticator_webauthn_partial_update"];
        trace?: never;
    };
    "/stages/authenticator/webauthn/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_authenticator_webauthn_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/webauthn_device_types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description WebAuthnDeviceType Viewset */
        get: operations["stages_authenticator_webauthn_device_types_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/authenticator/webauthn_device_types/{aaguid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description WebAuthnDeviceType Viewset */
        get: operations["stages_authenticator_webauthn_device_types_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/captcha/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CaptchaStage Viewset */
        get: operations["stages_captcha_list"];
        put?: never;
        /** @description CaptchaStage Viewset */
        post: operations["stages_captcha_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/captcha/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CaptchaStage Viewset */
        get: operations["stages_captcha_retrieve"];
        /** @description CaptchaStage Viewset */
        put: operations["stages_captcha_update"];
        post?: never;
        /** @description CaptchaStage Viewset */
        delete: operations["stages_captcha_destroy"];
        options?: never;
        head?: never;
        /** @description CaptchaStage Viewset */
        patch: operations["stages_captcha_partial_update"];
        trace?: never;
    };
    "/stages/captcha/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_captcha_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/consent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ConsentStage Viewset */
        get: operations["stages_consent_list"];
        put?: never;
        /** @description ConsentStage Viewset */
        post: operations["stages_consent_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/consent/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ConsentStage Viewset */
        get: operations["stages_consent_retrieve"];
        /** @description ConsentStage Viewset */
        put: operations["stages_consent_update"];
        post?: never;
        /** @description ConsentStage Viewset */
        delete: operations["stages_consent_destroy"];
        options?: never;
        head?: never;
        /** @description ConsentStage Viewset */
        patch: operations["stages_consent_partial_update"];
        trace?: never;
    };
    "/stages/consent/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_consent_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/deny/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DenyStage Viewset */
        get: operations["stages_deny_list"];
        put?: never;
        /** @description DenyStage Viewset */
        post: operations["stages_deny_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/deny/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DenyStage Viewset */
        get: operations["stages_deny_retrieve"];
        /** @description DenyStage Viewset */
        put: operations["stages_deny_update"];
        post?: never;
        /** @description DenyStage Viewset */
        delete: operations["stages_deny_destroy"];
        options?: never;
        head?: never;
        /** @description DenyStage Viewset */
        patch: operations["stages_deny_partial_update"];
        trace?: never;
    };
    "/stages/deny/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_deny_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/dummy/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DummyStage Viewset */
        get: operations["stages_dummy_list"];
        put?: never;
        /** @description DummyStage Viewset */
        post: operations["stages_dummy_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/dummy/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description DummyStage Viewset */
        get: operations["stages_dummy_retrieve"];
        /** @description DummyStage Viewset */
        put: operations["stages_dummy_update"];
        post?: never;
        /** @description DummyStage Viewset */
        delete: operations["stages_dummy_destroy"];
        options?: never;
        head?: never;
        /** @description DummyStage Viewset */
        patch: operations["stages_dummy_partial_update"];
        trace?: never;
    };
    "/stages/dummy/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_dummy_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description EmailStage Viewset */
        get: operations["stages_email_list"];
        put?: never;
        /** @description EmailStage Viewset */
        post: operations["stages_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/email/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description EmailStage Viewset */
        get: operations["stages_email_retrieve"];
        /** @description EmailStage Viewset */
        put: operations["stages_email_update"];
        post?: never;
        /** @description EmailStage Viewset */
        delete: operations["stages_email_destroy"];
        options?: never;
        head?: never;
        /** @description EmailStage Viewset */
        patch: operations["stages_email_partial_update"];
        trace?: never;
    };
    "/stages/email/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_email_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/email/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all available templates, including custom templates */
        get: operations["stages_email_templates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/identification/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description IdentificationStage Viewset */
        get: operations["stages_identification_list"];
        put?: never;
        /** @description IdentificationStage Viewset */
        post: operations["stages_identification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/identification/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description IdentificationStage Viewset */
        get: operations["stages_identification_retrieve"];
        /** @description IdentificationStage Viewset */
        put: operations["stages_identification_update"];
        post?: never;
        /** @description IdentificationStage Viewset */
        delete: operations["stages_identification_destroy"];
        options?: never;
        head?: never;
        /** @description IdentificationStage Viewset */
        patch: operations["stages_identification_partial_update"];
        trace?: never;
    };
    "/stages/identification/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_identification_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/invitation/invitations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Invitation Viewset */
        get: operations["stages_invitation_invitations_list"];
        put?: never;
        /** @description Invitation Viewset */
        post: operations["stages_invitation_invitations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/invitation/invitations/{invite_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Invitation Viewset */
        get: operations["stages_invitation_invitations_retrieve"];
        /** @description Invitation Viewset */
        put: operations["stages_invitation_invitations_update"];
        post?: never;
        /** @description Invitation Viewset */
        delete: operations["stages_invitation_invitations_destroy"];
        options?: never;
        head?: never;
        /** @description Invitation Viewset */
        patch: operations["stages_invitation_invitations_partial_update"];
        trace?: never;
    };
    "/stages/invitation/invitations/{invite_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_invitation_invitations_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/invitation/stages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description InvitationStage Viewset */
        get: operations["stages_invitation_stages_list"];
        put?: never;
        /** @description InvitationStage Viewset */
        post: operations["stages_invitation_stages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/invitation/stages/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description InvitationStage Viewset */
        get: operations["stages_invitation_stages_retrieve"];
        /** @description InvitationStage Viewset */
        put: operations["stages_invitation_stages_update"];
        post?: never;
        /** @description InvitationStage Viewset */
        delete: operations["stages_invitation_stages_destroy"];
        options?: never;
        head?: never;
        /** @description InvitationStage Viewset */
        patch: operations["stages_invitation_stages_partial_update"];
        trace?: never;
    };
    "/stages/invitation/stages/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_invitation_stages_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/mtls/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MutualTLSStage Viewset */
        get: operations["stages_mtls_list"];
        put?: never;
        /** @description MutualTLSStage Viewset */
        post: operations["stages_mtls_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/mtls/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description MutualTLSStage Viewset */
        get: operations["stages_mtls_retrieve"];
        /** @description MutualTLSStage Viewset */
        put: operations["stages_mtls_update"];
        post?: never;
        /** @description MutualTLSStage Viewset */
        delete: operations["stages_mtls_destroy"];
        options?: never;
        head?: never;
        /** @description MutualTLSStage Viewset */
        patch: operations["stages_mtls_partial_update"];
        trace?: never;
    };
    "/stages/mtls/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_mtls_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PasswordStage Viewset */
        get: operations["stages_password_list"];
        put?: never;
        /** @description PasswordStage Viewset */
        post: operations["stages_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/password/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PasswordStage Viewset */
        get: operations["stages_password_retrieve"];
        /** @description PasswordStage Viewset */
        put: operations["stages_password_update"];
        post?: never;
        /** @description PasswordStage Viewset */
        delete: operations["stages_password_destroy"];
        options?: never;
        head?: never;
        /** @description PasswordStage Viewset */
        patch: operations["stages_password_partial_update"];
        trace?: never;
    };
    "/stages/password/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_password_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/prompt/prompts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Prompt Viewset */
        get: operations["stages_prompt_prompts_list"];
        put?: never;
        /** @description Prompt Viewset */
        post: operations["stages_prompt_prompts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/prompt/prompts/{prompt_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Prompt Viewset */
        get: operations["stages_prompt_prompts_retrieve"];
        /** @description Prompt Viewset */
        put: operations["stages_prompt_prompts_update"];
        post?: never;
        /** @description Prompt Viewset */
        delete: operations["stages_prompt_prompts_destroy"];
        options?: never;
        head?: never;
        /** @description Prompt Viewset */
        patch: operations["stages_prompt_prompts_partial_update"];
        trace?: never;
    };
    "/stages/prompt/prompts/{prompt_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_prompt_prompts_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/prompt/prompts/preview/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Preview a prompt as a challenge, just like a flow would receive */
        post: operations["stages_prompt_prompts_preview_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/prompt/stages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PromptStage Viewset */
        get: operations["stages_prompt_stages_list"];
        put?: never;
        /** @description PromptStage Viewset */
        post: operations["stages_prompt_stages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/prompt/stages/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description PromptStage Viewset */
        get: operations["stages_prompt_stages_retrieve"];
        /** @description PromptStage Viewset */
        put: operations["stages_prompt_stages_update"];
        post?: never;
        /** @description PromptStage Viewset */
        delete: operations["stages_prompt_stages_destroy"];
        options?: never;
        head?: never;
        /** @description PromptStage Viewset */
        patch: operations["stages_prompt_stages_partial_update"];
        trace?: never;
    };
    "/stages/prompt/stages/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_prompt_stages_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/redirect/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RedirectStage Viewset */
        get: operations["stages_redirect_list"];
        put?: never;
        /** @description RedirectStage Viewset */
        post: operations["stages_redirect_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/redirect/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description RedirectStage Viewset */
        get: operations["stages_redirect_retrieve"];
        /** @description RedirectStage Viewset */
        put: operations["stages_redirect_update"];
        post?: never;
        /** @description RedirectStage Viewset */
        delete: operations["stages_redirect_destroy"];
        options?: never;
        head?: never;
        /** @description RedirectStage Viewset */
        patch: operations["stages_redirect_partial_update"];
        trace?: never;
    };
    "/stages/redirect/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_redirect_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/source/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SourceStage Viewset */
        get: operations["stages_source_list"];
        put?: never;
        /** @description SourceStage Viewset */
        post: operations["stages_source_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/source/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SourceStage Viewset */
        get: operations["stages_source_retrieve"];
        /** @description SourceStage Viewset */
        put: operations["stages_source_update"];
        post?: never;
        /** @description SourceStage Viewset */
        delete: operations["stages_source_destroy"];
        options?: never;
        head?: never;
        /** @description SourceStage Viewset */
        patch: operations["stages_source_partial_update"];
        trace?: never;
    };
    "/stages/source/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_source_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserDeleteStage Viewset */
        get: operations["stages_user_delete_list"];
        put?: never;
        /** @description UserDeleteStage Viewset */
        post: operations["stages_user_delete_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_delete/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserDeleteStage Viewset */
        get: operations["stages_user_delete_retrieve"];
        /** @description UserDeleteStage Viewset */
        put: operations["stages_user_delete_update"];
        post?: never;
        /** @description UserDeleteStage Viewset */
        delete: operations["stages_user_delete_destroy"];
        options?: never;
        head?: never;
        /** @description UserDeleteStage Viewset */
        patch: operations["stages_user_delete_partial_update"];
        trace?: never;
    };
    "/stages/user_delete/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_user_delete_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserLoginStage Viewset */
        get: operations["stages_user_login_list"];
        put?: never;
        /** @description UserLoginStage Viewset */
        post: operations["stages_user_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_login/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserLoginStage Viewset */
        get: operations["stages_user_login_retrieve"];
        /** @description UserLoginStage Viewset */
        put: operations["stages_user_login_update"];
        post?: never;
        /** @description UserLoginStage Viewset */
        delete: operations["stages_user_login_destroy"];
        options?: never;
        head?: never;
        /** @description UserLoginStage Viewset */
        patch: operations["stages_user_login_partial_update"];
        trace?: never;
    };
    "/stages/user_login/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_user_login_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserLogoutStage Viewset */
        get: operations["stages_user_logout_list"];
        put?: never;
        /** @description UserLogoutStage Viewset */
        post: operations["stages_user_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_logout/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserLogoutStage Viewset */
        get: operations["stages_user_logout_retrieve"];
        /** @description UserLogoutStage Viewset */
        put: operations["stages_user_logout_update"];
        post?: never;
        /** @description UserLogoutStage Viewset */
        delete: operations["stages_user_logout_destroy"];
        options?: never;
        head?: never;
        /** @description UserLogoutStage Viewset */
        patch: operations["stages_user_logout_partial_update"];
        trace?: never;
    };
    "/stages/user_logout/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_user_logout_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_write/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserWriteStage Viewset */
        get: operations["stages_user_write_list"];
        put?: never;
        /** @description UserWriteStage Viewset */
        post: operations["stages_user_write_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stages/user_write/{stage_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description UserWriteStage Viewset */
        get: operations["stages_user_write_retrieve"];
        /** @description UserWriteStage Viewset */
        put: operations["stages_user_write_update"];
        post?: never;
        /** @description UserWriteStage Viewset */
        delete: operations["stages_user_write_destroy"];
        options?: never;
        head?: never;
        /** @description UserWriteStage Viewset */
        patch: operations["stages_user_write_partial_update"];
        trace?: never;
    };
    "/stages/user_write/{stage_uuid}/used_by/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all objects that use this object */
        get: operations["stages_user_write_used_by_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Challenge when a flow's active stage calls `stage_invalid()`. */
        AccessDeniedChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-access-denied";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            error_message?: string;
        };
        /** @enum {string} */
        AlgEnum: "rsa" | "ecdsa";
        /** @description Serialize Application info */
        App: {
            name: string;
            label: string;
        };
        /** @enum {string} */
        AppEnum: "authentik.tenants" | "authentik.admin" | "authentik.api" | "authentik.crypto" | "authentik.flows" | "authentik.outposts" | "authentik.policies.dummy" | "authentik.policies.event_matcher" | "authentik.policies.expiry" | "authentik.policies.expression" | "authentik.policies.geoip" | "authentik.policies.password" | "authentik.policies.reputation" | "authentik.policies" | "authentik.providers.ldap" | "authentik.providers.oauth2" | "authentik.providers.proxy" | "authentik.providers.rac" | "authentik.providers.radius" | "authentik.providers.saml" | "authentik.providers.scim" | "authentik.rbac" | "authentik.recovery" | "authentik.sources.kerberos" | "authentik.sources.ldap" | "authentik.sources.oauth" | "authentik.sources.plex" | "authentik.sources.saml" | "authentik.sources.scim" | "authentik.stages.authenticator" | "authentik.stages.authenticator_duo" | "authentik.stages.authenticator_email" | "authentik.stages.authenticator_sms" | "authentik.stages.authenticator_static" | "authentik.stages.authenticator_totp" | "authentik.stages.authenticator_validate" | "authentik.stages.authenticator_webauthn" | "authentik.stages.captcha" | "authentik.stages.consent" | "authentik.stages.deny" | "authentik.stages.dummy" | "authentik.stages.email" | "authentik.stages.identification" | "authentik.stages.invitation" | "authentik.stages.password" | "authentik.stages.prompt" | "authentik.stages.redirect" | "authentik.stages.user_delete" | "authentik.stages.user_login" | "authentik.stages.user_logout" | "authentik.stages.user_write" | "authentik.brands" | "authentik.blueprints" | "authentik.core" | "authentik.enterprise" | "authentik.enterprise.audit" | "authentik.enterprise.policies.unique_password" | "authentik.enterprise.providers.google_workspace" | "authentik.enterprise.providers.microsoft_entra" | "authentik.enterprise.providers.ssf" | "authentik.enterprise.stages.authenticator_endpoint_gdtc" | "authentik.enterprise.stages.mtls" | "authentik.enterprise.stages.source" | "authentik.events";
        /** @description Pseudo class for apple response */
        AppleChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-source-oauth-apple";
        };
        /** @description Special challenge for apple-native authentication flow, which happens on the client. */
        AppleLoginChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-source-oauth-apple";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            client_id: string;
            scope: string;
            redirect_uri: string;
            state: string;
        };
        /** @description Application Serializer */
        Application: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Application's display Name. */
            name: string;
            /** @description Internal application name, used in URLs. */
            slug: string;
            provider?: number | null;
            readonly provider_obj: components["schemas"]["Provider"];
            backchannel_providers?: number[];
            readonly backchannel_providers_obj: components["schemas"]["Provider"][];
            /** @description Allow formatting of launch URL */
            readonly launch_url: string | null;
            /** @description Open launch URL in a new browser tab or window. */
            open_in_new_tab?: boolean;
            /** Format: uri */
            meta_launch_url?: string;
            /** @description Get the URL to the App Icon image. If the name is /static or starts with http
             *     it is returned as-is */
            readonly meta_icon: string | null;
            meta_description?: string;
            meta_publisher?: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            group?: string;
        };
        /** @description ApplicationEntitlement Serializer */
        ApplicationEntitlement: {
            /** Format: uuid */
            readonly pbm_uuid: string;
            name: string;
            /** Format: uuid */
            app: string;
            attributes?: unknown;
        };
        /** @description ApplicationEntitlement Serializer */
        ApplicationEntitlementRequest: {
            name: string;
            /** Format: uuid */
            app: string;
            attributes?: unknown;
        };
        /** @description Application Serializer */
        ApplicationRequest: {
            /** @description Application's display Name. */
            name: string;
            /** @description Internal application name, used in URLs. */
            slug: string;
            provider?: number | null;
            backchannel_providers?: number[];
            /** @description Open launch URL in a new browser tab or window. */
            open_in_new_tab?: boolean;
            /** Format: uri */
            meta_launch_url?: string;
            meta_description?: string;
            meta_publisher?: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            group?: string;
        };
        /** @enum {string} */
        AuthModeEnum: "static" | "prompt";
        /** @enum {string} */
        AuthTypeEnum: "basic" | "bearer";
        /** @description AuthenticatedSession Serializer */
        AuthenticatedSession: {
            /** Format: uuid */
            uuid?: string;
            /** @description Check if session is currently active session */
            readonly current: boolean;
            /** @description Get parsed user agent */
            readonly user_agent: {
                /** @description User agent device */
                device: {
                    brand: string;
                    family: string;
                    model: string;
                };
                /** @description User agent os */
                os: {
                    family: string;
                    major: string;
                    minor: string;
                    patch: string;
                    patch_minor: string;
                };
                /** @description User agent browser */
                user_agent: {
                    family: string;
                    major: string;
                    minor: string;
                    patch: string;
                };
                string: string;
            };
            /** @description Get GeoIP Data */
            readonly geo_ip: {
                continent: string;
                country: string;
                /** Format: double */
                lat: number;
                /** Format: double */
                long: number;
                city: string;
            } | null;
            /** @description Get ASN Data */
            readonly asn: {
                asn: number;
                as_org: string | null;
                network: string | null;
            } | null;
            user: number;
            readonly last_ip: string;
            readonly last_user_agent: string;
            /** Format: date-time */
            readonly last_used: string;
            /** Format: date-time */
            readonly expires: string;
        };
        /** @enum {string} */
        AuthenticationEnum: "none" | "require_authenticated" | "require_unauthenticated" | "require_superuser" | "require_redirect" | "require_outpost";
        /** @enum {string} */
        AuthenticatorAttachmentEnum: "platform" | "cross-platform";
        /** @description Duo Challenge */
        AuthenticatorDuoChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-duo";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            activation_barcode: string;
            activation_code: string;
            stage_uuid: string;
        };
        /** @description Pseudo class for duo response */
        AuthenticatorDuoChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-duo";
        };
        /** @description AuthenticatorDuoStage Serializer */
        AuthenticatorDuoStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            client_id: string;
            api_hostname: string;
            admin_integration_key?: string;
        };
        AuthenticatorDuoStageDeviceImportResponse: {
            readonly count: number;
            readonly error: string;
        };
        AuthenticatorDuoStageManualDeviceImportRequest: {
            duo_user_id: string;
            username: string;
        };
        /** @description AuthenticatorDuoStage Serializer */
        AuthenticatorDuoStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            client_id: string;
            client_secret: string;
            api_hostname: string;
            admin_integration_key?: string;
            admin_secret_key?: string;
        };
        /** @description Authenticator Email Setup challenge */
        AuthenticatorEmailChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-email";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            email?: string | null;
            /** @default true */
            email_required: boolean;
        };
        /** @description Authenticator Email Challenge response, device is set by get_response_instance */
        AuthenticatorEmailChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-email";
            code?: number;
            email?: string;
        };
        /** @description AuthenticatorEmailStage Serializer */
        AuthenticatorEmailStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            password?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            subject?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            template?: string;
        };
        /** @description AuthenticatorEmailStage Serializer */
        AuthenticatorEmailStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            password?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            subject?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            template?: string;
        };
        /** @description AuthenticatorEndpointGDTCStage Serializer */
        AuthenticatorEndpointGDTCStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            credentials: unknown;
        };
        /** @description AuthenticatorEndpointGDTCStage Serializer */
        AuthenticatorEndpointGDTCStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            credentials: unknown;
        };
        /** @description SMS Setup challenge */
        AuthenticatorSMSChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-sms";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            /** @default true */
            phone_number_required: boolean;
        };
        /** @description SMS Challenge response, device is set by get_response_instance */
        AuthenticatorSMSChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-sms";
            code?: number;
            phone_number?: string;
        };
        /** @description AuthenticatorSMSStage Serializer */
        AuthenticatorSMSStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            provider: components["schemas"]["ProviderEnum"];
            from_number: string;
            account_sid: string;
            auth: string;
            auth_password?: string;
            auth_type?: components["schemas"]["AuthTypeEnum"];
            /** @description When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future. */
            verify_only?: boolean;
            /**
             * Format: uuid
             * @description Optionally modify the payload being sent to custom providers.
             */
            mapping?: string | null;
        };
        /** @description AuthenticatorSMSStage Serializer */
        AuthenticatorSMSStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            provider: components["schemas"]["ProviderEnum"];
            from_number: string;
            account_sid: string;
            auth: string;
            auth_password?: string;
            auth_type?: components["schemas"]["AuthTypeEnum"];
            /** @description When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future. */
            verify_only?: boolean;
            /**
             * Format: uuid
             * @description Optionally modify the payload being sent to custom providers.
             */
            mapping?: string | null;
        };
        /** @description Static authenticator challenge */
        AuthenticatorStaticChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-static";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            codes: string[];
        };
        /** @description Pseudo class for static response */
        AuthenticatorStaticChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-static";
        };
        /** @description AuthenticatorStaticStage Serializer */
        AuthenticatorStaticStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            token_count?: number;
            token_length?: number;
        };
        /** @description AuthenticatorStaticStage Serializer */
        AuthenticatorStaticStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            token_count?: number;
            token_length?: number;
        };
        /** @description TOTP Setup challenge */
        AuthenticatorTOTPChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-totp";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            config_url: string;
        };
        /** @description TOTP Challenge response, device is set by get_response_instance */
        AuthenticatorTOTPChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-totp";
            code: number;
        };
        /** @description AuthenticatorTOTPStage Serializer */
        AuthenticatorTOTPStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            digits: components["schemas"]["DigitsEnum"];
        };
        /** @description AuthenticatorTOTPStage Serializer */
        AuthenticatorTOTPStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            digits: components["schemas"]["DigitsEnum"];
        };
        /** @description AuthenticatorValidateStage Serializer */
        AuthenticatorValidateStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            not_configured_action?: components["schemas"]["NotConfiguredActionEnum"];
            /** @description Device classes which can be used to authenticate */
            device_classes?: components["schemas"]["DeviceClassesEnum"][];
            /** @description Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again. */
            configuration_stages?: string[];
            /** @description If any of the user's device has been used within this threshold, this stage will be skipped */
            last_auth_threshold?: string;
            /** @description Enforce user verification for WebAuthn devices. */
            webauthn_user_verification?: components["schemas"]["UserVerificationEnum"];
            webauthn_allowed_device_types?: string[];
            readonly webauthn_allowed_device_types_obj: components["schemas"]["WebAuthnDeviceType"][];
        };
        /** @description AuthenticatorValidateStage Serializer */
        AuthenticatorValidateStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            not_configured_action?: components["schemas"]["NotConfiguredActionEnum"];
            /** @description Device classes which can be used to authenticate */
            device_classes?: components["schemas"]["DeviceClassesEnum"][];
            /** @description Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again. */
            configuration_stages?: string[];
            /** @description If any of the user's device has been used within this threshold, this stage will be skipped */
            last_auth_threshold?: string;
            /** @description Enforce user verification for WebAuthn devices. */
            webauthn_user_verification?: components["schemas"]["UserVerificationEnum"];
            webauthn_allowed_device_types?: string[];
        };
        /** @description Authenticator challenge */
        AuthenticatorValidationChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-validate";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            device_challenges: components["schemas"]["DeviceChallenge"][];
            configuration_stages: components["schemas"]["SelectableStage"][];
        };
        /** @description Challenge used for Code-based and WebAuthn authenticators */
        AuthenticatorValidationChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-validate";
            selected_challenge?: components["schemas"]["DeviceChallengeRequest"];
            selected_stage?: string;
            code?: string;
            webauthn?: {
                [key: string]: unknown;
            };
            duo?: number;
        };
        /** @description WebAuthn Challenge */
        AuthenticatorWebAuthnChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-webauthn";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            registration: {
                [key: string]: unknown;
            };
        };
        /** @description WebAuthn Challenge response */
        AuthenticatorWebAuthnChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-authenticator-webauthn";
            response: {
                [key: string]: unknown;
            };
        };
        /** @description AuthenticatorWebAuthnStage Serializer */
        AuthenticatorWebAuthnStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            user_verification?: components["schemas"]["UserVerificationEnum"];
            authenticator_attachment?: components["schemas"]["AuthenticatorAttachmentEnum"] | null;
            resident_key_requirement?: components["schemas"]["ResidentKeyRequirementEnum"];
            device_type_restrictions?: string[];
            readonly device_type_restrictions_obj: components["schemas"]["WebAuthnDeviceType"][];
        };
        /** @description AuthenticatorWebAuthnStage Serializer */
        AuthenticatorWebAuthnStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            user_verification?: components["schemas"]["UserVerificationEnum"];
            authenticator_attachment?: components["schemas"]["AuthenticatorAttachmentEnum"] | null;
            resident_key_requirement?: components["schemas"]["ResidentKeyRequirementEnum"];
            device_type_restrictions?: string[];
        };
        /** @enum {string} */
        AuthorizationCodeAuthMethodEnum: "basic_auth" | "post_body";
        /** @description Pseudo class for autosubmit response */
        AutoSubmitChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-autosubmit";
        };
        /** @description Autosubmit challenge used to send and navigate a POST request */
        AutosubmitChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-autosubmit";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            url: string;
            attrs: {
                [key: string]: string;
            };
            title?: string;
        };
        /** @enum {string} */
        BackendsEnum: "authentik.core.auth.InbuiltBackend" | "authentik.core.auth.TokenBackend" | "authentik.sources.ldap.auth.LDAPBackend" | "authentik.sources.kerberos.auth.KerberosBackend";
        /** @enum {string} */
        BindingTypeEnum: "REDIRECT" | "POST" | "POST_AUTO";
        BlueprintFile: {
            path: string;
            /** Format: date-time */
            last_m: string;
            hash: string;
            readonly meta: components["schemas"]["Metadata"];
        };
        /** @description Info about a single blueprint instance file */
        BlueprintInstance: {
            /**
             * Instance uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @default  */
            path: string;
            context?: unknown;
            /** Format: date-time */
            readonly last_applied: string;
            readonly last_applied_hash: string;
            readonly status: components["schemas"]["BlueprintInstanceStatusEnum"];
            enabled?: boolean;
            readonly managed_models: string[];
            readonly metadata: unknown;
            content?: string;
        };
        /** @description Info about a single blueprint instance file */
        BlueprintInstanceRequest: {
            name: string;
            /** @default  */
            path: string;
            context?: unknown;
            enabled?: boolean;
            content?: string;
        };
        /** @enum {string} */
        BlueprintInstanceStatusEnum: "successful" | "warning" | "error" | "orphaned" | "unknown";
        /** @description Brand Serializer */
        Brand: {
            /** Format: uuid */
            readonly brand_uuid: string;
            /** @description Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b` */
            domain: string;
            default?: boolean;
            branding_title?: string;
            branding_logo?: string;
            branding_favicon?: string;
            branding_custom_css?: string;
            branding_default_flow_background?: string;
            /** Format: uuid */
            flow_authentication?: string | null;
            /** Format: uuid */
            flow_invalidation?: string | null;
            /** Format: uuid */
            flow_recovery?: string | null;
            /** Format: uuid */
            flow_unenrollment?: string | null;
            /** Format: uuid */
            flow_user_settings?: string | null;
            /** Format: uuid */
            flow_device_code?: string | null;
            /**
             * Format: uuid
             * @description When set, external users will be redirected to this application after authenticating.
             */
            default_application?: string | null;
            /**
             * Format: uuid
             * @description Web Certificate used by the authentik Core webserver.
             */
            web_certificate?: string | null;
            /** @description Certificates used for client authentication. */
            client_certificates?: string[];
            attributes?: unknown;
        };
        /** @description Brand Serializer */
        BrandRequest: {
            /** @description Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b` */
            domain: string;
            default?: boolean;
            branding_title?: string;
            branding_logo?: string;
            branding_favicon?: string;
            branding_custom_css?: string;
            branding_default_flow_background?: string;
            /** Format: uuid */
            flow_authentication?: string | null;
            /** Format: uuid */
            flow_invalidation?: string | null;
            /** Format: uuid */
            flow_recovery?: string | null;
            /** Format: uuid */
            flow_unenrollment?: string | null;
            /** Format: uuid */
            flow_user_settings?: string | null;
            /** Format: uuid */
            flow_device_code?: string | null;
            /**
             * Format: uuid
             * @description When set, external users will be redirected to this application after authenticating.
             */
            default_application?: string | null;
            /**
             * Format: uuid
             * @description Web Certificate used by the authentik Core webserver.
             */
            web_certificate?: string | null;
            /** @description Certificates used for client authentication. */
            client_certificates?: string[];
            attributes?: unknown;
        };
        /** @description Generic cache stats for an object */
        Cache: {
            readonly count: number;
        };
        /** @enum {string} */
        CapabilitiesEnum: "can_save_media" | "can_geo_ip" | "can_asn" | "can_impersonate" | "can_debug" | "is_enterprise";
        /** @description Site public key */
        CaptchaChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-captcha";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            site_key: string;
            js_url: string;
            interactive: boolean;
        };
        /** @description Validate captcha token */
        CaptchaChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-captcha";
            token: string;
        };
        /** @description CaptchaStage Serializer */
        CaptchaStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description Public key, acquired your captcha Provider. */
            public_key: string;
            js_url?: string;
            api_url?: string;
            interactive?: boolean;
            /** Format: double */
            score_min_threshold?: number;
            /** Format: double */
            score_max_threshold?: number;
            /** @description When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions */
            error_on_invalid_score?: boolean;
        };
        /** @description CaptchaStage Serializer */
        CaptchaStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Public key, acquired your captcha Provider. */
            public_key: string;
            /** @description Private key, acquired your captcha Provider. */
            private_key: string;
            js_url?: string;
            api_url?: string;
            interactive?: boolean;
            /** Format: double */
            score_min_threshold?: number;
            /** Format: double */
            score_max_threshold?: number;
            /** @description When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions */
            error_on_invalid_score?: boolean;
        };
        /** @enum {string} */
        CertAttributeEnum: "subject" | "common_name" | "email";
        /** @description Get CertificateKeyPair's data */
        CertificateData: {
            readonly data: string;
        };
        /** @description Certificate generation parameters */
        CertificateGenerationRequest: {
            common_name: string;
            subject_alt_name?: string;
            validity_days: number;
            /** @default rsa */
            alg: components["schemas"]["AlgEnum"];
        };
        /** @description CertificateKeyPair Serializer */
        CertificateKeyPair: {
            /**
             * Kp uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get certificate Hash (SHA256) */
            readonly fingerprint_sha256: string | null;
            /** @description Get certificate Hash (SHA1) */
            readonly fingerprint_sha1: string | null;
            /**
             * Format: date-time
             * @description Get certificate expiry
             */
            readonly cert_expiry: string | null;
            /** @description Get certificate subject as full rfc4514 */
            readonly cert_subject: string | null;
            /** @description Show if this keypair has a private key configured or not */
            readonly private_key_available: boolean;
            /** @description Get the private key's type, if set */
            readonly private_key_type: string | null;
            /** @description Get URL to download certificate */
            readonly certificate_download_url: string;
            /** @description Get URL to download private key */
            readonly private_key_download_url: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
        };
        /** @description CertificateKeyPair Serializer */
        CertificateKeyPairRequest: {
            name: string;
            /** @description PEM-encoded Certificate data */
            certificate_data: string;
            /** @description Optional Private Key. If this is set, you can use this keypair for encryption. */
            key_data?: string;
        };
        ChallengeTypes: components["schemas"]["AccessDeniedChallenge"] | components["schemas"]["AppleLoginChallenge"] | components["schemas"]["AuthenticatorDuoChallenge"] | components["schemas"]["AuthenticatorEmailChallenge"] | components["schemas"]["AuthenticatorSMSChallenge"] | components["schemas"]["AuthenticatorStaticChallenge"] | components["schemas"]["AuthenticatorTOTPChallenge"] | components["schemas"]["AuthenticatorValidationChallenge"] | components["schemas"]["AuthenticatorWebAuthnChallenge"] | components["schemas"]["AutosubmitChallenge"] | components["schemas"]["CaptchaChallenge"] | components["schemas"]["ConsentChallenge"] | components["schemas"]["EmailChallenge"] | components["schemas"]["FlowErrorChallenge"] | components["schemas"]["FrameChallenge"] | components["schemas"]["IdentificationChallenge"] | components["schemas"]["OAuthDeviceCodeChallenge"] | components["schemas"]["OAuthDeviceCodeFinishChallenge"] | components["schemas"]["PasswordChallenge"] | components["schemas"]["PlexAuthenticationChallenge"] | components["schemas"]["PromptChallenge"] | components["schemas"]["RedirectChallenge"] | components["schemas"]["SessionEndChallenge"] | components["schemas"]["ShellChallenge"] | components["schemas"]["UserLoginChallenge"];
        /** @enum {string} */
        ClientTypeEnum: "confidential" | "public";
        /** @enum {string} */
        CompatibilityModeEnum: "default" | "aws" | "slack";
        /** @description Serialize authentik Config into DRF Object */
        Config: {
            error_reporting: components["schemas"]["ErrorReportingConfig"];
            capabilities: components["schemas"]["CapabilitiesEnum"][];
            cache_timeout: number;
            cache_timeout_flows: number;
            cache_timeout_policies: number;
            cache_timeout_reputation: number;
        };
        /** @description ConnectionToken Serializer */
        ConnectionToken: {
            /**
             * Connection token uuid
             * Format: uuid
             */
            pk?: string;
            provider: number;
            readonly provider_obj: components["schemas"]["RACProvider"];
            /** Format: uuid */
            endpoint: string;
            readonly endpoint_obj: components["schemas"]["Endpoint"];
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description ConnectionToken Serializer */
        ConnectionTokenRequest: {
            /**
             * Connection token uuid
             * Format: uuid
             */
            pk?: string;
            provider: number;
            /** Format: uuid */
            endpoint: string;
        };
        /** @description Challenge info for consent screens */
        ConsentChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-consent";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            header_text?: string;
            permissions: components["schemas"]["ConsentPermission"][];
            additional_permissions: components["schemas"]["ConsentPermission"][];
            token: string;
        };
        /** @description Consent challenge response, any valid response request is valid */
        ConsentChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-consent";
            token: string;
        };
        /** @description Permission used for consent */
        ConsentPermission: {
            name: string;
            id: string;
        };
        /** @description ConsentStage Serializer */
        ConsentStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            mode?: components["schemas"]["ConsentStageModeEnum"];
            /**
             * Consent expires in
             * @description Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
             */
            consent_expire_in?: string;
        };
        /** @enum {string} */
        ConsentStageModeEnum: "always_require" | "permanent" | "expiring";
        /** @description ConsentStage Serializer */
        ConsentStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            mode?: components["schemas"]["ConsentStageModeEnum"];
            /**
             * Consent expires in
             * @description Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
             */
            consent_expire_in?: string;
        };
        /** @description Contextual flow information for a challenge */
        ContextualFlowInfo: {
            title?: string;
            background?: string;
            cancel_url: string;
            layout: components["schemas"]["ContextualFlowInfoLayoutEnum"];
        };
        /** @enum {string} */
        ContextualFlowInfoLayoutEnum: "stacked" | "content_left" | "content_right" | "sidebar_left" | "sidebar_right";
        /** @description Coordinates for diagrams */
        Coordinate: {
            readonly x_cord: number;
            readonly y_cord: number;
        };
        /** @enum {string} */
        CountryCodeEnum: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";
        /** @description Partial brand information for styling */
        CurrentBrand: {
            matched_domain: string;
            branding_title: string;
            branding_logo: string;
            branding_favicon: string;
            branding_custom_css: string;
            readonly ui_footer_links: components["schemas"]["FooterLink"][];
            /** @default automatic */
            readonly ui_theme: components["schemas"]["UiThemeEnum"];
            flow_authentication?: string;
            flow_invalidation?: string;
            flow_recovery?: string;
            flow_unenrollment?: string;
            flow_user_settings?: string;
            flow_device_code?: string;
            readonly default_locale: string;
        };
        /** @enum {string} */
        DeliveryMethodEnum: "https://schemas.openid.net/secevent/risc/delivery-method/push" | "https://schemas.openid.net/secevent/risc/delivery-method/poll";
        /** @enum {string} */
        DeniedActionEnum: "message_continue" | "message" | "continue";
        /** @description DenyStage Serializer */
        DenyStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            deny_message?: string;
        };
        /** @description DenyStage Serializer */
        DenyStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            deny_message?: string;
        };
        DetailedCountry: {
            code: components["schemas"]["CountryCodeEnum"];
            name: string;
        };
        DetailedCountryField: {
            code: components["schemas"]["CountryCodeEnum"];
            name: string;
        };
        DetailedCountryFieldRequest: {
            code: components["schemas"]["CountryCodeEnum"];
            name: string;
        };
        /** @description Serializer for Duo authenticator devices */
        Device: {
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            pk: string;
            name: string;
            /** @description Get type of device */
            readonly type: string;
            confirmed: boolean;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
            /** Format: date-time */
            readonly last_used: string | null;
            /** @description Get extra description */
            readonly extra_description: string;
        };
        /** @description Single device challenge */
        DeviceChallenge: {
            device_class: string;
            device_uid: string;
            challenge: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            last_used: string | null;
        };
        /** @description Single device challenge */
        DeviceChallengeRequest: {
            device_class: string;
            device_uid: string;
            challenge: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            last_used: string | null;
        };
        /** @enum {string} */
        DeviceClassesEnum: "static" | "totp" | "webauthn" | "duo" | "sms" | "email";
        /** @enum {string} */
        DigestAlgorithmEnum: "http://www.w3.org/2000/09/xmldsig#sha1" | "http://www.w3.org/2001/04/xmlenc#sha256" | "http://www.w3.org/2001/04/xmldsig-more#sha384" | "http://www.w3.org/2001/04/xmlenc#sha512";
        /** @enum {string} */
        DigitsEnum: "6" | "8";
        /** @description DockerServiceConnection Serializer */
        DockerServiceConnection: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system. */
            url: string;
            /**
             * Format: uuid
             * @description CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
             */
            tls_verification?: string | null;
            /**
             * Format: uuid
             * @description Certificate/Key used for authentication. Can be left empty for no authentication.
             */
            tls_authentication?: string | null;
        };
        /** @description DockerServiceConnection Serializer */
        DockerServiceConnectionRequest: {
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            /** @description Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system. */
            url: string;
            /**
             * Format: uuid
             * @description CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
             */
            tls_verification?: string | null;
            /**
             * Format: uuid
             * @description Certificate/Key used for authentication. Can be left empty for no authentication.
             */
            tls_authentication?: string | null;
        };
        /** @description Dummy Policy Serializer */
        DummyPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            result?: boolean;
            wait_min?: number;
            wait_max?: number;
        };
        /** @description Dummy Policy Serializer */
        DummyPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            result?: boolean;
            wait_min?: number;
            wait_max?: number;
        };
        /** @description DummyStage Serializer */
        DummyStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            throw_error?: boolean;
        };
        /** @description DummyStage Serializer */
        DummyStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            throw_error?: boolean;
        };
        /** @description Serializer for Duo authenticator devices */
        DuoDevice: {
            /** ID */
            readonly pk: number;
            /** @description The human-readable name of this device. */
            name: string;
            readonly user: components["schemas"]["GroupMember"];
        };
        DuoDeviceEnrollmentStatus: {
            duo_response: components["schemas"]["DuoResponseEnum"];
        };
        /** @description Serializer for Duo authenticator devices */
        DuoDeviceRequest: {
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @enum {string} */
        DuoResponseEnum: "success" | "waiting" | "invalid";
        /** @description Email challenge */
        EmailChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-email";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
        };
        /** @description Email challenge resposen. No fields. This challenge is
         *     always declared invalid to give the user a chance to retry */
        EmailChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-email";
        };
        /** @description Serializer for email authenticator devices */
        EmailDevice: {
            /** @description The human-readable name of this device. */
            name: string;
            /** ID */
            readonly pk: number;
            /** Format: email */
            readonly email: string;
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description Serializer for email authenticator devices */
        EmailDeviceRequest: {
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description EmailStage Serializer */
        EmailStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            subject?: string;
            template?: string;
            /** @description Activate users upon completion of stage. */
            activate_user_on_success?: boolean;
        };
        /** @description EmailStage Serializer */
        EmailStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            password?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            subject?: string;
            template?: string;
            /** @description Activate users upon completion of stage. */
            activate_user_on_success?: boolean;
        };
        /** @description Endpoint Serializer */
        Endpoint: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            provider: number;
            readonly provider_obj: components["schemas"]["RACProvider"];
            protocol: components["schemas"]["ProtocolEnum"];
            host: string;
            settings?: unknown;
            property_mappings?: string[];
            auth_mode: components["schemas"]["AuthModeEnum"];
            /** @description Build actual launch URL (the provider itself does not have one, just
             *     individual endpoints) */
            readonly launch_url: string | null;
            maximum_connections?: number;
        };
        /** @description Serializer for Endpoint authenticator devices */
        EndpointDevice: {
            /**
             * Uuid
             * Format: uuid
             */
            pk?: string;
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description Serializer for Endpoint authenticator devices */
        EndpointDeviceRequest: {
            /**
             * Uuid
             * Format: uuid
             */
            pk?: string;
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description Endpoint Serializer */
        EndpointRequest: {
            name: string;
            provider: number;
            protocol: components["schemas"]["ProtocolEnum"];
            host: string;
            settings?: unknown;
            property_mappings?: string[];
            auth_mode: components["schemas"]["AuthModeEnum"];
            maximum_connections?: number;
        };
        /** @description Serializer for rest_framework's error messages */
        ErrorDetail: {
            string: string;
            code: string;
        };
        /** @description Config for error reporting */
        ErrorReportingConfig: {
            readonly enabled: boolean;
            readonly sentry_dsn: string;
            readonly environment: string;
            readonly send_pii: boolean;
            /** Format: double */
            readonly traces_sample_rate: number;
        };
        /** @description Event Serializer */
        Event: {
            /**
             * Event uuid
             * Format: uuid
             */
            readonly pk: string;
            user?: unknown;
            action: components["schemas"]["EventActions"];
            app: string;
            context?: unknown;
            client_ip?: string | null;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            expires?: string;
            brand?: unknown;
        };
        /** @enum {string} */
        EventActions: "login" | "login_failed" | "logout" | "user_write" | "suspicious_request" | "password_set" | "secret_view" | "secret_rotate" | "invitation_used" | "authorize_application" | "source_linked" | "impersonation_started" | "impersonation_ended" | "flow_execution" | "policy_execution" | "policy_exception" | "property_mapping_exception" | "system_task_execution" | "system_task_exception" | "system_exception" | "configuration_error" | "model_created" | "model_updated" | "model_deleted" | "email_sent" | "update_available" | "custom_";
        /** @description Event Matcher Policy Serializer */
        EventMatcherPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            /** @description Match created events with this action type. When left empty, all action types will be matched. */
            action?: components["schemas"]["EventActions"] | null;
            /** @description Matches Event's Client IP (strict matching, for network matching use an Expression Policy) */
            client_ip?: string | null;
            /** @description Match events created by selected application. When left empty, all applications are matched. */
            app?: components["schemas"]["AppEnum"] | null;
            /** @description Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched. */
            model?: components["schemas"]["ModelEnum"] | null;
        };
        /** @description Event Matcher Policy Serializer */
        EventMatcherPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Match created events with this action type. When left empty, all action types will be matched. */
            action?: components["schemas"]["EventActions"] | null;
            /** @description Matches Event's Client IP (strict matching, for network matching use an Expression Policy) */
            client_ip?: string | null;
            /** @description Match events created by selected application. When left empty, all applications are matched. */
            app?: components["schemas"]["AppEnum"] | null;
            /** @description Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched. */
            model?: components["schemas"]["ModelEnum"] | null;
        };
        /** @description Event Serializer */
        EventRequest: {
            user?: unknown;
            action: components["schemas"]["EventActions"];
            app: string;
            context?: unknown;
            client_ip?: string | null;
            /** Format: date-time */
            expires?: string;
            brand?: unknown;
        };
        /** @description Response object of Event's top_per_user */
        EventTopPerUser: {
            application: {
                [key: string]: unknown;
            };
            counted_events: number;
            unique_users: number;
        };
        /** @enum {string} */
        EventsRequestedEnum: "https://schemas.openid.net/secevent/caep/event-type/session-revoked" | "https://schemas.openid.net/secevent/caep/event-type/credential-change" | "https://schemas.openid.net/secevent/ssf/event-type/verification";
        /** @description Serializer for BaseGrantModel and ExpiringBaseGrant */
        ExpiringBaseGrantModel: {
            /** ID */
            readonly pk: number;
            provider: components["schemas"]["OAuth2Provider"];
            user: components["schemas"]["User"];
            /** @description Check if token is expired yet. */
            readonly is_expired: boolean;
            /** Format: date-time */
            expires?: string | null;
            scope: string[];
        };
        /** @description Group Membership Policy Serializer */
        ExpressionPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            expression: string;
        };
        /** @description Group Membership Policy Serializer */
        ExpressionPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            expression: string;
        };
        /** @description User permission with additional object-related data */
        ExtraRoleObjectPermission: {
            readonly id: number;
            readonly codename: string;
            /** Python model class name */
            readonly model: string;
            readonly app_label: string;
            object_pk: string;
            readonly name: string;
            /** @description Get app label from permission's model */
            readonly app_label_verbose: string;
            /** @description Get model label from permission's model */
            readonly model_verbose: string;
            /** @description Get model description from attached model. This operation takes at least
             *     one additional query, and the description is only shown if the user/role has the
             *     view_ permission on the object */
            readonly object_description: string | null;
        };
        /** @description User permission with additional object-related data */
        ExtraRoleObjectPermissionRequest: {
            object_pk: string;
        };
        /** @description User permission with additional object-related data */
        ExtraUserObjectPermission: {
            readonly id: number;
            readonly codename: string;
            /** Python model class name */
            readonly model: string;
            readonly app_label: string;
            object_pk: string;
            readonly name: string;
            /** @description Get app label from permission's model */
            readonly app_label_verbose: string;
            /** @description Get model label from permission's model */
            readonly model_verbose: string;
            /** @description Get model description from attached model. This operation takes at least
             *     one additional query, and the description is only shown if the user/role has the
             *     view_ permission on the object */
            readonly object_description: string | null;
        };
        /** @description User permission with additional object-related data */
        ExtraUserObjectPermissionRequest: {
            object_pk: string;
        };
        /** @description Serializer to upload file */
        FilePathRequest: {
            url: string;
        };
        /** @description Serializer to upload file */
        FileUploadRequest: {
            /** Format: binary */
            file?: string;
            /** @default false */
            clear: boolean;
        };
        /** @description Flow Serializer */
        Flow: {
            /**
             * Flow uuid
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            readonly policybindingmodel_ptr_id: string;
            name: string;
            /** @description Visible in the URL. */
            slug: string;
            /** @description Shown as the Title in Flow pages. */
            title: string;
            /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik. */
            designation: components["schemas"]["FlowDesignationEnum"];
            /** @description Get the URL to the background image. If the name is /static or starts with http
             *     it is returned as-is */
            readonly background: string;
            readonly stages: string[];
            readonly policies: string[];
            /** @description Get count of cached flows */
            readonly cache_count: number;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Enable compatibility mode, increases compatibility with password managers on mobile devices. */
            compatibility_mode?: boolean;
            /** @description Get export URL for flow */
            readonly export_url: string;
            layout?: components["schemas"]["FlowLayoutEnum"];
            /** @description Configure what should happen when a flow denies access to a user. */
            denied_action?: components["schemas"]["DeniedActionEnum"];
            /** @description Required level of authentication and authorization to access a flow. */
            authentication?: components["schemas"]["AuthenticationEnum"];
        };
        FlowChallengeResponseRequest: components["schemas"]["AppleChallengeResponseRequest"] | components["schemas"]["AuthenticatorDuoChallengeResponseRequest"] | components["schemas"]["AuthenticatorEmailChallengeResponseRequest"] | components["schemas"]["AuthenticatorSMSChallengeResponseRequest"] | components["schemas"]["AuthenticatorStaticChallengeResponseRequest"] | components["schemas"]["AuthenticatorTOTPChallengeResponseRequest"] | components["schemas"]["AuthenticatorValidationChallengeResponseRequest"] | components["schemas"]["AuthenticatorWebAuthnChallengeResponseRequest"] | components["schemas"]["AutoSubmitChallengeResponseRequest"] | components["schemas"]["CaptchaChallengeResponseRequest"] | components["schemas"]["ConsentChallengeResponseRequest"] | components["schemas"]["EmailChallengeResponseRequest"] | components["schemas"]["FrameChallengeResponseRequest"] | components["schemas"]["IdentificationChallengeResponseRequest"] | components["schemas"]["OAuthDeviceCodeChallengeResponseRequest"] | components["schemas"]["OAuthDeviceCodeFinishChallengeResponseRequest"] | components["schemas"]["PasswordChallengeResponseRequest"] | components["schemas"]["PlexAuthenticationChallengeResponseRequest"] | components["schemas"]["PromptChallengeResponseRequest"] | components["schemas"]["RedirectChallengeResponseRequest"] | components["schemas"]["UserLoginChallengeResponseRequest"];
        /** @enum {string} */
        FlowDesignationEnum: "authentication" | "authorization" | "invalidation" | "enrollment" | "unenrollment" | "recovery" | "stage_configuration";
        /** @description response of the flow's diagram action */
        FlowDiagram: {
            readonly diagram: string;
        };
        /** @description Challenge class when an unhandled error occurs during a stage. Normal users
         *     are shown an error message, superusers are shown a full stacktrace. */
        FlowErrorChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-flow-error";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            request_id: string;
            error?: string;
            traceback?: string;
        };
        /** @description Logs of an attempted flow import */
        FlowImportResult: {
            readonly logs: components["schemas"]["LogEvent"][];
            readonly success: boolean;
        };
        /** @description Serializer for inspect endpoint */
        FlowInspection: {
            plans: components["schemas"]["FlowInspectorPlan"][];
            current_plan?: components["schemas"]["FlowInspectorPlan"];
            is_completed: boolean;
        };
        /** @description Serializer for an active FlowPlan */
        FlowInspectorPlan: {
            readonly current_stage: components["schemas"]["FlowStageBinding"];
            readonly next_planned_stage: components["schemas"]["FlowStageBinding"];
            /** @description Get the plan's context, sanitized */
            readonly plan_context: {
                [key: string]: unknown;
            };
            /** @description Get a unique session ID */
            readonly session_id: string;
        };
        /** @enum {string} */
        FlowLayoutEnum: "stacked" | "content_left" | "content_right" | "sidebar_left" | "sidebar_right";
        /** @description Flow Serializer */
        FlowRequest: {
            name: string;
            /** @description Visible in the URL. */
            slug: string;
            /** @description Shown as the Title in Flow pages. */
            title: string;
            /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik. */
            designation: components["schemas"]["FlowDesignationEnum"];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Enable compatibility mode, increases compatibility with password managers on mobile devices. */
            compatibility_mode?: boolean;
            layout?: components["schemas"]["FlowLayoutEnum"];
            /** @description Configure what should happen when a flow denies access to a user. */
            denied_action?: components["schemas"]["DeniedActionEnum"];
            /** @description Required level of authentication and authorization to access a flow. */
            authentication?: components["schemas"]["AuthenticationEnum"];
        };
        /** @description Stripped down flow serializer */
        FlowSet: {
            /**
             * Flow uuid
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            readonly policybindingmodel_ptr_id: string;
            name: string;
            /** @description Visible in the URL. */
            slug: string;
            /** @description Shown as the Title in Flow pages. */
            title: string;
            /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik. */
            designation: components["schemas"]["FlowDesignationEnum"];
            /** @description Get the URL to the background image. If the name is /static or starts with http
             *     it is returned as-is */
            readonly background: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Enable compatibility mode, increases compatibility with password managers on mobile devices. */
            compatibility_mode?: boolean;
            /** @description Get export URL for flow */
            readonly export_url: string;
            layout?: components["schemas"]["FlowLayoutEnum"];
            /** @description Configure what should happen when a flow denies access to a user. */
            denied_action?: components["schemas"]["DeniedActionEnum"];
        };
        /** @description Stripped down flow serializer */
        FlowSetRequest: {
            name: string;
            /** @description Visible in the URL. */
            slug: string;
            /** @description Shown as the Title in Flow pages. */
            title: string;
            /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik. */
            designation: components["schemas"]["FlowDesignationEnum"];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Enable compatibility mode, increases compatibility with password managers on mobile devices. */
            compatibility_mode?: boolean;
            layout?: components["schemas"]["FlowLayoutEnum"];
            /** @description Configure what should happen when a flow denies access to a user. */
            denied_action?: components["schemas"]["DeniedActionEnum"];
        };
        /** @description FlowStageBinding Serializer */
        FlowStageBinding: {
            /**
             * Fsb uuid
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            readonly policybindingmodel_ptr_id: string;
            /** Format: uuid */
            target: string;
            /** Format: uuid */
            stage: string;
            readonly stage_obj: components["schemas"]["Stage"];
            /** @description Evaluate policies during the Flow planning process. */
            evaluate_on_plan?: boolean;
            /** @description Evaluate policies when the Stage is presented to the user. */
            re_evaluate_policies?: boolean;
            order: number;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context. */
            invalid_response_action?: components["schemas"]["InvalidResponseActionEnum"];
        };
        /** @description FlowStageBinding Serializer */
        FlowStageBindingRequest: {
            /** Format: uuid */
            target: string;
            /** Format: uuid */
            stage: string;
            /** @description Evaluate policies during the Flow planning process. */
            evaluate_on_plan?: boolean;
            /** @description Evaluate policies when the Stage is presented to the user. */
            re_evaluate_policies?: boolean;
            order: number;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context. */
            invalid_response_action?: components["schemas"]["InvalidResponseActionEnum"];
        };
        /** @description Links returned in Config API */
        FooterLink: {
            readonly href: string | null;
            readonly name: string;
        };
        /** @description Challenge type to render a frame */
        FrameChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "xak-flow-frame";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            url: string;
            /** @default false */
            loading_overlay: boolean;
            loading_text: string;
        };
        /** @description Base class for all challenge responses */
        FrameChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "xak-flow-frame";
        };
        /** @description Generic API Error */
        GenericError: {
            detail: string;
            code?: string;
        };
        /** @description GeoIP Policy Serializer */
        GeoIPPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            asns?: number[];
            countries: components["schemas"]["CountryCodeEnum"][];
            readonly countries_obj: components["schemas"]["DetailedCountryField"][];
            check_history_distance?: boolean;
            /** Format: int64 */
            history_max_distance_km?: number;
            distance_tolerance_km?: number;
            history_login_count?: number;
            check_impossible_travel?: boolean;
            impossible_tolerance_km?: number;
        };
        /** @description GeoIP Policy Serializer */
        GeoIPPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            asns?: number[];
            countries: components["schemas"]["CountryCodeEnum"][];
            check_history_distance?: boolean;
            /** Format: int64 */
            history_max_distance_km?: number;
            distance_tolerance_km?: number;
            history_login_count?: number;
            check_impossible_travel?: boolean;
            impossible_tolerance_km?: number;
        };
        /** @enum {string} */
        GeoipBindingEnum: "no_binding" | "bind_continent" | "bind_continent_country" | "bind_continent_country_city";
        /** @description GoogleWorkspaceProvider Serializer */
        GoogleWorkspaceProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** Format: email */
            delegated_subject: string;
            credentials: unknown;
            scopes?: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            default_group_email_domain: string;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description GoogleWorkspaceProviderGroup Serializer */
        GoogleWorkspaceProviderGroup: {
            /** Format: uuid */
            readonly id: string;
            google_id: string;
            /** Format: uuid */
            group: string;
            readonly group_obj: components["schemas"]["UserGroup"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description GoogleWorkspaceProviderGroup Serializer */
        GoogleWorkspaceProviderGroupRequest: {
            google_id: string;
            /** Format: uuid */
            group: string;
            provider: number;
        };
        /** @description GoogleWorkspaceProviderMapping Serializer */
        GoogleWorkspaceProviderMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description GoogleWorkspaceProviderMapping Serializer */
        GoogleWorkspaceProviderMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description GoogleWorkspaceProvider Serializer */
        GoogleWorkspaceProviderRequest: {
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** Format: email */
            delegated_subject: string;
            credentials: unknown;
            scopes?: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            default_group_email_domain: string;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_google_workspace.googleworkspaceprovider";
        };
        /** @description GoogleWorkspaceProviderUser Serializer */
        GoogleWorkspaceProviderUser: {
            /** Format: uuid */
            readonly id: string;
            google_id: string;
            user: number;
            readonly user_obj: components["schemas"]["GroupMember"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description GoogleWorkspaceProviderUser Serializer */
        GoogleWorkspaceProviderUserRequest: {
            google_id: string;
            user: number;
            provider: number;
        };
        /** @description Group Serializer */
        Group: {
            /**
             * Group uuid
             * Format: uuid
             */
            readonly pk: string;
            readonly num_pk: number;
            name: string;
            /** @description Users added to this group will be superusers. */
            is_superuser?: boolean;
            /** Format: uuid */
            parent?: string | null;
            readonly parent_name: string | null;
            users?: number[];
            readonly users_obj: components["schemas"]["GroupMember"][] | null;
            attributes?: {
                [key: string]: unknown;
            };
            roles?: string[];
            readonly roles_obj: components["schemas"]["Role"][];
        };
        /** @description Group Source Connection */
        GroupKerberosSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupKerberosSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Group Source Connection */
        GroupLDAPSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupLDAPSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @enum {string} */
        GroupMatchingModeEnum: "identifier" | "name_link" | "name_deny";
        /** @description Stripped down user serializer to show relevant users for groups */
        GroupMember: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            attributes?: {
                [key: string]: unknown;
            };
            readonly uid: string;
        };
        /** @description Stripped down user serializer to show relevant users for groups */
        GroupMemberRequest: {
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            attributes?: {
                [key: string]: unknown;
            };
        };
        /** @description Group Source Connection */
        GroupOAuthSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupOAuthSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Group Source Connection */
        GroupPlexSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupPlexSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Group Serializer */
        GroupRequest: {
            name: string;
            /** @description Users added to this group will be superusers. */
            is_superuser?: boolean;
            /** Format: uuid */
            parent?: string | null;
            users?: number[];
            attributes?: {
                [key: string]: unknown;
            };
            roles?: string[];
        };
        /** @description Group Source Connection */
        GroupSAMLSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupSAMLSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Group Source Connection */
        GroupSourceConnection: {
            /** ID */
            readonly pk: number;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description Group Source Connection */
        GroupSourceConnectionRequest: {
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Identification challenges with all UI elements */
        IdentificationChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-identification";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            user_fields: string[] | null;
            password_fields: boolean;
            /** @default false */
            allow_show_password: boolean;
            application_pre?: string;
            flow_designation: components["schemas"]["FlowDesignationEnum"];
            captcha_stage?: components["schemas"]["CaptchaChallenge"] | null;
            enroll_url?: string;
            recovery_url?: string;
            passwordless_url?: string;
            primary_action: string;
            sources?: components["schemas"]["LoginSource"][];
            show_source_labels: boolean;
            /** @default true */
            enable_remember_me: boolean;
        };
        /** @description Identification challenge */
        IdentificationChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-identification";
            uid_field: string;
            password?: string | null;
            captcha_token?: string | null;
        };
        /** @description IdentificationStage Serializer */
        IdentificationStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description Fields of the user object to match against. (Hold shift to select multiple options) */
            user_fields?: components["schemas"]["UserFieldsEnum"][];
            /**
             * Format: uuid
             * @description When set, shows a password field, instead of showing the password field as separate step.
             */
            password_stage?: string | null;
            /**
             * Format: uuid
             * @description When set, adds functionality exactly like a Captcha stage, but baked into the Identification stage.
             */
            captcha_stage?: string | null;
            /** @description When enabled, user fields are matched regardless of their casing. */
            case_insensitive_matching?: boolean;
            /** @description When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown */
            show_matched_user?: boolean;
            /**
             * Format: uuid
             * @description Optional enrollment flow, which is linked at the bottom of the page.
             */
            enrollment_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional recovery flow, which is linked at the bottom of the page.
             */
            recovery_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional passwordless flow, which is linked at the bottom of the page.
             */
            passwordless_flow?: string | null;
            /** @description Specify which sources should be shown. */
            sources?: string[];
            show_source_labels?: boolean;
            /** @description When enabled, the stage will succeed and continue even when incorrect user info is entered. */
            pretend_user_exists?: boolean;
            /** @description Show the user the 'Remember me on this device' toggle, allowing repeat users to skip straight to entering their password. */
            enable_remember_me?: boolean;
        };
        /** @description IdentificationStage Serializer */
        IdentificationStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Fields of the user object to match against. (Hold shift to select multiple options) */
            user_fields?: components["schemas"]["UserFieldsEnum"][];
            /**
             * Format: uuid
             * @description When set, shows a password field, instead of showing the password field as separate step.
             */
            password_stage?: string | null;
            /**
             * Format: uuid
             * @description When set, adds functionality exactly like a Captcha stage, but baked into the Identification stage.
             */
            captcha_stage?: string | null;
            /** @description When enabled, user fields are matched regardless of their casing. */
            case_insensitive_matching?: boolean;
            /** @description When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown */
            show_matched_user?: boolean;
            /**
             * Format: uuid
             * @description Optional enrollment flow, which is linked at the bottom of the page.
             */
            enrollment_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional recovery flow, which is linked at the bottom of the page.
             */
            recovery_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional passwordless flow, which is linked at the bottom of the page.
             */
            passwordless_flow?: string | null;
            /** @description Specify which sources should be shown. */
            sources?: string[];
            show_source_labels?: boolean;
            /** @description When enabled, the stage will succeed and continue even when incorrect user info is entered. */
            pretend_user_exists?: boolean;
            /** @description Show the user the 'Remember me on this device' toggle, allowing repeat users to skip straight to entering their password. */
            enable_remember_me?: boolean;
        };
        ImpersonationRequest: {
            reason: string;
        };
        /** @description InitialPermissions serializer */
        InitialPermissions: {
            /** ID */
            readonly pk: number;
            name: string;
            mode: components["schemas"]["InitialPermissionsModeEnum"];
            /** Format: uuid */
            role: string;
            permissions?: number[];
            readonly permissions_obj: components["schemas"]["Permission"][];
        };
        /** @enum {string} */
        InitialPermissionsModeEnum: "user" | "role";
        /** @description InitialPermissions serializer */
        InitialPermissionsRequest: {
            name: string;
            mode: components["schemas"]["InitialPermissionsModeEnum"];
            /** Format: uuid */
            role: string;
            permissions?: number[];
        };
        InstallID: {
            install_id: string;
        };
        /** @enum {string} */
        IntentEnum: "verification" | "api" | "recovery" | "app_password";
        /** @enum {string} */
        InvalidResponseActionEnum: "retry" | "restart" | "restart_with_context";
        /** @description Invitation Serializer */
        Invitation: {
            /**
             * Invite uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** Format: date-time */
            expires?: string | null;
            fixed_data?: {
                [key: string]: unknown;
            };
            readonly created_by: components["schemas"]["GroupMember"];
            /** @description When enabled, the invitation will be deleted after usage. */
            single_use?: boolean;
            /**
             * Format: uuid
             * @description When set, only the configured flow can use this invitation.
             */
            flow?: string | null;
            readonly flow_obj: components["schemas"]["Flow"];
        };
        /** @description Invitation Serializer */
        InvitationRequest: {
            name: string;
            /** Format: date-time */
            expires?: string | null;
            fixed_data?: {
                [key: string]: unknown;
            };
            /** @description When enabled, the invitation will be deleted after usage. */
            single_use?: boolean;
            /**
             * Format: uuid
             * @description When set, only the configured flow can use this invitation.
             */
            flow?: string | null;
        };
        /** @description InvitationStage Serializer */
        InvitationStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given. */
            continue_flow_without_invitation?: boolean;
        };
        /** @description InvitationStage Serializer */
        InvitationStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given. */
            continue_flow_without_invitation?: boolean;
        };
        /** @enum {string} */
        IssuerModeEnum: "global" | "per_provider";
        /** @enum {string} */
        KadminTypeEnum: "MIT" | "Heimdal" | "other";
        /** @description Kerberos Source Serializer */
        KerberosSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            readonly icon: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Kerberos realm */
            realm: string;
            /** @description Custom krb5.conf to use. Uses the system one by default */
            krb5_conf?: string;
            /** @description KAdmin server type */
            kadmin_type?: components["schemas"]["KadminTypeEnum"];
            /** @description Sync users from Kerberos into authentik */
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to Kerberos */
            sync_users_password?: boolean;
            /** @description Principal to authenticate to kadmin for sync. */
            sync_principal?: string;
            /** @description Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual */
            sync_ccache?: string;
            /** @description Get cached source connectivity */
            readonly connectivity: {
                [key: string]: string;
            } | null;
            /** @description Force the use of a specific server name for SPNEGO. Must be in the form HTTP@hostname */
            spnego_server_name?: string;
            /** @description Credential cache to use for SPNEGO in form type:residual */
            spnego_ccache?: string;
            /** @description If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend */
            password_login_update_internal_password?: boolean;
        };
        /** @description Kerberos PropertyMapping Serializer */
        KerberosSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description Kerberos PropertyMapping Serializer */
        KerberosSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description Kerberos Source Serializer */
        KerberosSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Kerberos realm */
            realm: string;
            /** @description Custom krb5.conf to use. Uses the system one by default */
            krb5_conf?: string;
            /** @description KAdmin server type */
            kadmin_type?: components["schemas"]["KadminTypeEnum"];
            /** @description Sync users from Kerberos into authentik */
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to Kerberos */
            sync_users_password?: boolean;
            /** @description Principal to authenticate to kadmin for sync. */
            sync_principal?: string;
            /** @description Password to authenticate to kadmin for sync */
            sync_password?: string;
            /** @description Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual */
            sync_keytab?: string;
            /** @description Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual */
            sync_ccache?: string;
            /** @description Force the use of a specific server name for SPNEGO. Must be in the form HTTP@hostname */
            spnego_server_name?: string;
            /** @description SPNEGO keytab base64-encoded or path to keytab in the form FILE:path */
            spnego_keytab?: string;
            /** @description Credential cache to use for SPNEGO in form type:residual */
            spnego_ccache?: string;
            /** @description If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend */
            password_login_update_internal_password?: boolean;
        };
        /** @description Kerberos Source sync status */
        KerberosSyncStatus: {
            readonly is_running: boolean;
            readonly tasks: components["schemas"]["SystemTask"][];
        };
        /** @description KubernetesServiceConnection Serializer */
        KubernetesServiceConnection: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Paste your kubeconfig here. authentik will automatically use the currently selected context. */
            kubeconfig?: unknown;
            /** @description Verify SSL Certificates of the Kubernetes API endpoint */
            verify_ssl?: boolean;
        };
        /** @description KubernetesServiceConnection Serializer */
        KubernetesServiceConnectionRequest: {
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            /** @description Paste your kubeconfig here. authentik will automatically use the currently selected context. */
            kubeconfig?: unknown;
            /** @description Verify SSL Certificates of the Kubernetes API endpoint */
            verify_ssl?: boolean;
        };
        /** @enum {string} */
        LDAPAPIAccessMode: "direct" | "cached";
        /** @description Base serializer class which doesn't implement create/update methods */
        LDAPCheckAccess: {
            has_search_permission?: boolean;
            access: components["schemas"]["PolicyTestResult"];
        };
        LDAPDebug: {
            readonly user: {
                [key: string]: unknown;
            }[];
            readonly group: {
                [key: string]: unknown;
            }[];
            readonly membership: {
                [key: string]: unknown;
            }[];
        };
        /** @description LDAPProvider Serializer */
        LDAPOutpostConfig: {
            /** ID */
            readonly pk: number;
            name: string;
            /** @description DN under which objects are accessible. */
            base_dn?: string;
            bind_flow_slug: string;
            /** @description Get slug for unbind flow, defaulting to brand's default flow. */
            readonly unbind_flow_slug: string | null;
            /** @description Prioritise backchannel slug over direct application slug */
            readonly application_slug: string;
            /** Format: uuid */
            certificate?: string | null;
            tls_server_name?: string;
            /** @description The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber */
            uid_start_number?: number;
            /** @description The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber */
            gid_start_number?: number;
            search_mode?: components["schemas"]["LDAPAPIAccessMode"];
            bind_mode?: components["schemas"]["LDAPAPIAccessMode"];
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description LDAPProvider Serializer */
        LDAPProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description DN under which objects are accessible. */
            base_dn?: string;
            /** Format: uuid */
            certificate?: string | null;
            tls_server_name?: string;
            /** @description The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber */
            uid_start_number?: number;
            /** @description The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber */
            gid_start_number?: number;
            readonly outpost_set: string[];
            search_mode?: components["schemas"]["LDAPAPIAccessMode"];
            bind_mode?: components["schemas"]["LDAPAPIAccessMode"];
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description LDAPProvider Serializer */
        LDAPProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description DN under which objects are accessible. */
            base_dn?: string;
            /** Format: uuid */
            certificate?: string | null;
            tls_server_name?: string;
            /** @description The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber */
            uid_start_number?: number;
            /** @description The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber */
            gid_start_number?: number;
            search_mode?: components["schemas"]["LDAPAPIAccessMode"];
            bind_mode?: components["schemas"]["LDAPAPIAccessMode"];
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_ldap.ldapprovider";
        };
        /** @description LDAP Source Serializer */
        LDAPSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            readonly icon: string;
            /** Format: uri */
            server_uri: string;
            /**
             * Format: uuid
             * @description Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
             */
            peer_certificate?: string | null;
            /**
             * Format: uuid
             * @description Client certificate to authenticate against the LDAP Server's Certificate.
             */
            client_certificate?: string | null;
            bind_cn?: string;
            /** Enable Start TLS */
            start_tls?: boolean;
            /** Use Server URI for SNI verification */
            sni?: boolean;
            base_dn: string;
            /**
             * Addition User DN
             * @description Prepended to Base DN for User-queries.
             */
            additional_user_dn?: string;
            /**
             * Addition Group DN
             * @description Prepended to Base DN for Group-queries.
             */
            additional_group_dn?: string;
            /** @description Consider Objects matching this filter to be Users. */
            user_object_filter?: string;
            /** @description Consider Objects matching this filter to be Groups. */
            group_object_filter?: string;
            /** @description Field which contains members of a group. */
            group_membership_field?: string;
            /** @description Attribute which matches the value of `group_membership_field`. */
            user_membership_attribute?: string;
            /** @description Field which contains a unique Identifier. */
            object_uniqueness_field?: string;
            /** @description Update internal authentik password when login succeeds with LDAP */
            password_login_update_internal_password?: boolean;
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source. */
            sync_users_password?: boolean;
            sync_groups?: boolean;
            /** Format: uuid */
            sync_parent_group?: string | null;
            /** @description Get cached source connectivity */
            readonly connectivity: {
                [key: string]: {
                    [key: string]: string;
                };
            } | null;
            /** @description Lookup group membership based on a user attribute instead of a group attribute. This allows nested group resolution on systems like FreeIPA and Active Directory */
            lookup_groups_from_user?: boolean;
            /** @description Delete authentik users and groups which were previously supplied by this source, but are now missing from it. */
            delete_not_found_objects?: boolean;
        };
        /** @description LDAP PropertyMapping Serializer */
        LDAPSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description LDAP PropertyMapping Serializer */
        LDAPSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description LDAP Source Serializer */
        LDAPSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** Format: uri */
            server_uri: string;
            /**
             * Format: uuid
             * @description Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
             */
            peer_certificate?: string | null;
            /**
             * Format: uuid
             * @description Client certificate to authenticate against the LDAP Server's Certificate.
             */
            client_certificate?: string | null;
            bind_cn?: string;
            bind_password?: string;
            /** Enable Start TLS */
            start_tls?: boolean;
            /** Use Server URI for SNI verification */
            sni?: boolean;
            base_dn: string;
            /**
             * Addition User DN
             * @description Prepended to Base DN for User-queries.
             */
            additional_user_dn?: string;
            /**
             * Addition Group DN
             * @description Prepended to Base DN for Group-queries.
             */
            additional_group_dn?: string;
            /** @description Consider Objects matching this filter to be Users. */
            user_object_filter?: string;
            /** @description Consider Objects matching this filter to be Groups. */
            group_object_filter?: string;
            /** @description Field which contains members of a group. */
            group_membership_field?: string;
            /** @description Attribute which matches the value of `group_membership_field`. */
            user_membership_attribute?: string;
            /** @description Field which contains a unique Identifier. */
            object_uniqueness_field?: string;
            /** @description Update internal authentik password when login succeeds with LDAP */
            password_login_update_internal_password?: boolean;
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source. */
            sync_users_password?: boolean;
            sync_groups?: boolean;
            /** Format: uuid */
            sync_parent_group?: string | null;
            /** @description Lookup group membership based on a user attribute instead of a group attribute. This allows nested group resolution on systems like FreeIPA and Active Directory */
            lookup_groups_from_user?: boolean;
            /** @description Delete authentik users and groups which were previously supplied by this source, but are now missing from it. */
            delete_not_found_objects?: boolean;
        };
        /** @description License Serializer */
        License: {
            /** Format: uuid */
            readonly license_uuid: string;
            readonly name: string;
            key: string;
            /** Format: date-time */
            readonly expiry: string;
            readonly internal_users: number;
            readonly external_users: number;
        };
        /** @enum {string} */
        LicenseFlagsEnum: "trial" | "non_production";
        /** @description Serializer for license forecast */
        LicenseForecast: {
            internal_users: number;
            external_users: number;
            forecasted_internal_users: number;
            forecasted_external_users: number;
        };
        /** @description License Serializer */
        LicenseRequest: {
            key: string;
        };
        /** @description Serializer for license status */
        LicenseSummary: {
            internal_users: number;
            external_users: number;
            status: components["schemas"]["LicenseSummaryStatusEnum"];
            /** Format: date-time */
            latest_valid: string;
            license_flags: components["schemas"]["LicenseFlagsEnum"][];
        };
        /** @enum {string} */
        LicenseSummaryStatusEnum: "unlicensed" | "valid" | "expired" | "expiry_soon" | "limit_exceeded_admin" | "limit_exceeded_user" | "read_only";
        /** @description Returns a single link */
        Link: {
            link: string;
        };
        /** @description Single log message with all context logged. */
        LogEvent: {
            /** Format: date-time */
            timestamp: string;
            log_level: components["schemas"]["LogLevelEnum"];
            logger: string;
            event: string;
            attributes: {
                [key: string]: unknown;
            };
        };
        /** @enum {string} */
        LogLevelEnum: "critical" | "exception" | "error" | "warn" | "warning" | "info" | "debug" | "notset";
        LoginChallengeTypes: components["schemas"]["RedirectChallenge"] | components["schemas"]["AppleLoginChallenge"] | components["schemas"]["PlexAuthenticationChallenge"];
        /** @description Login Metrics per 1h */
        LoginMetrics: {
            readonly logins: components["schemas"]["Coordinate"][];
            readonly logins_failed: components["schemas"]["Coordinate"][];
            readonly authorizations: components["schemas"]["Coordinate"][];
        };
        /** @description Serializer for Login buttons of sources */
        LoginSource: {
            name: string;
            icon_url?: string | null;
            challenge: components["schemas"]["LoginChallengeTypes"];
        };
        /** @enum {string} */
        MatchingModeEnum: "strict" | "regex";
        /** @description Serializer for blueprint metadata */
        Metadata: {
            name: string;
            labels: {
                [key: string]: unknown;
            };
        };
        /** @description MicrosoftEntraProvider Serializer */
        MicrosoftEntraProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            client_id: string;
            client_secret: string;
            tenant_id: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description MicrosoftEntraProviderGroup Serializer */
        MicrosoftEntraProviderGroup: {
            /** Format: uuid */
            readonly id: string;
            microsoft_id: string;
            /** Format: uuid */
            group: string;
            readonly group_obj: components["schemas"]["UserGroup"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description MicrosoftEntraProviderGroup Serializer */
        MicrosoftEntraProviderGroupRequest: {
            microsoft_id: string;
            /** Format: uuid */
            group: string;
            provider: number;
        };
        /** @description MicrosoftEntraProviderMapping Serializer */
        MicrosoftEntraProviderMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description MicrosoftEntraProviderMapping Serializer */
        MicrosoftEntraProviderMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description MicrosoftEntraProvider Serializer */
        MicrosoftEntraProviderRequest: {
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            client_id: string;
            client_secret: string;
            tenant_id: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_microsoft_entra.microsoftentraprovider";
        };
        /** @description MicrosoftEntraProviderUser Serializer */
        MicrosoftEntraProviderUser: {
            /** Format: uuid */
            readonly id: string;
            microsoft_id: string;
            user: number;
            readonly user_obj: components["schemas"]["GroupMember"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description MicrosoftEntraProviderUser Serializer */
        MicrosoftEntraProviderUserRequest: {
            microsoft_id: string;
            user: number;
            provider: number;
        };
        /** @enum {string} */
        ModelEnum: "authentik_tenants.domain" | "authentik_crypto.certificatekeypair" | "authentik_flows.flow" | "authentik_flows.flowstagebinding" | "authentik_outposts.dockerserviceconnection" | "authentik_outposts.kubernetesserviceconnection" | "authentik_outposts.outpost" | "authentik_policies_dummy.dummypolicy" | "authentik_policies_event_matcher.eventmatcherpolicy" | "authentik_policies_expiry.passwordexpirypolicy" | "authentik_policies_expression.expressionpolicy" | "authentik_policies_geoip.geoippolicy" | "authentik_policies_password.passwordpolicy" | "authentik_policies_reputation.reputationpolicy" | "authentik_policies.policybinding" | "authentik_providers_ldap.ldapprovider" | "authentik_providers_oauth2.scopemapping" | "authentik_providers_oauth2.oauth2provider" | "authentik_providers_proxy.proxyprovider" | "authentik_providers_rac.racprovider" | "authentik_providers_rac.endpoint" | "authentik_providers_rac.racpropertymapping" | "authentik_providers_radius.radiusprovider" | "authentik_providers_radius.radiusproviderpropertymapping" | "authentik_providers_saml.samlprovider" | "authentik_providers_saml.samlpropertymapping" | "authentik_providers_scim.scimprovider" | "authentik_providers_scim.scimmapping" | "authentik_rbac.role" | "authentik_rbac.initialpermissions" | "authentik_sources_kerberos.kerberossource" | "authentik_sources_kerberos.kerberossourcepropertymapping" | "authentik_sources_kerberos.userkerberossourceconnection" | "authentik_sources_kerberos.groupkerberossourceconnection" | "authentik_sources_ldap.ldapsource" | "authentik_sources_ldap.ldapsourcepropertymapping" | "authentik_sources_ldap.userldapsourceconnection" | "authentik_sources_ldap.groupldapsourceconnection" | "authentik_sources_oauth.oauthsource" | "authentik_sources_oauth.oauthsourcepropertymapping" | "authentik_sources_oauth.useroauthsourceconnection" | "authentik_sources_oauth.groupoauthsourceconnection" | "authentik_sources_plex.plexsource" | "authentik_sources_plex.plexsourcepropertymapping" | "authentik_sources_plex.userplexsourceconnection" | "authentik_sources_plex.groupplexsourceconnection" | "authentik_sources_saml.samlsource" | "authentik_sources_saml.samlsourcepropertymapping" | "authentik_sources_saml.usersamlsourceconnection" | "authentik_sources_saml.groupsamlsourceconnection" | "authentik_sources_scim.scimsource" | "authentik_sources_scim.scimsourcepropertymapping" | "authentik_stages_authenticator_duo.authenticatorduostage" | "authentik_stages_authenticator_duo.duodevice" | "authentik_stages_authenticator_email.authenticatoremailstage" | "authentik_stages_authenticator_email.emaildevice" | "authentik_stages_authenticator_sms.authenticatorsmsstage" | "authentik_stages_authenticator_sms.smsdevice" | "authentik_stages_authenticator_static.authenticatorstaticstage" | "authentik_stages_authenticator_static.staticdevice" | "authentik_stages_authenticator_totp.authenticatortotpstage" | "authentik_stages_authenticator_totp.totpdevice" | "authentik_stages_authenticator_validate.authenticatorvalidatestage" | "authentik_stages_authenticator_webauthn.authenticatorwebauthnstage" | "authentik_stages_authenticator_webauthn.webauthndevice" | "authentik_stages_captcha.captchastage" | "authentik_stages_consent.consentstage" | "authentik_stages_consent.userconsent" | "authentik_stages_deny.denystage" | "authentik_stages_dummy.dummystage" | "authentik_stages_email.emailstage" | "authentik_stages_identification.identificationstage" | "authentik_stages_invitation.invitationstage" | "authentik_stages_invitation.invitation" | "authentik_stages_password.passwordstage" | "authentik_stages_prompt.prompt" | "authentik_stages_prompt.promptstage" | "authentik_stages_redirect.redirectstage" | "authentik_stages_user_delete.userdeletestage" | "authentik_stages_user_login.userloginstage" | "authentik_stages_user_logout.userlogoutstage" | "authentik_stages_user_write.userwritestage" | "authentik_brands.brand" | "authentik_blueprints.blueprintinstance" | "authentik_core.group" | "authentik_core.user" | "authentik_core.application" | "authentik_core.applicationentitlement" | "authentik_core.token" | "authentik_enterprise.license" | "authentik_policies_unique_password.uniquepasswordpolicy" | "authentik_providers_google_workspace.googleworkspaceprovider" | "authentik_providers_google_workspace.googleworkspaceprovidermapping" | "authentik_providers_microsoft_entra.microsoftentraprovider" | "authentik_providers_microsoft_entra.microsoftentraprovidermapping" | "authentik_providers_ssf.ssfprovider" | "authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage" | "authentik_stages_mtls.mutualtlsstage" | "authentik_stages_source.sourcestage" | "authentik_events.event" | "authentik_events.notificationtransport" | "authentik_events.notification" | "authentik_events.notificationrule" | "authentik_events.notificationwebhookmapping";
        /** @description MutualTLSStage Serializer */
        MutualTLSStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            mode: components["schemas"]["MutualTLSStageModeEnum"];
            /** @description Configure certificate authorities to validate the certificate against. This option has a higher priority than the `client_certificate` option on `Brand`. */
            certificate_authorities?: string[];
            cert_attribute: components["schemas"]["CertAttributeEnum"];
            user_attribute: components["schemas"]["UserAttributeEnum"];
        };
        /** @enum {string} */
        MutualTLSStageModeEnum: "optional" | "required";
        /** @description MutualTLSStage Serializer */
        MutualTLSStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            mode: components["schemas"]["MutualTLSStageModeEnum"];
            /** @description Configure certificate authorities to validate the certificate against. This option has a higher priority than the `client_certificate` option on `Brand`. */
            certificate_authorities?: string[];
            cert_attribute: components["schemas"]["CertAttributeEnum"];
            user_attribute: components["schemas"]["UserAttributeEnum"];
        };
        /** @enum {string} */
        NameIdPolicyEnum: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" | "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" | "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName" | "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName" | "urn:oasis:names:tc:SAML:2.0:nameid-format:transient";
        /** @enum {string} */
        NetworkBindingEnum: "no_binding" | "bind_asn" | "bind_asn_network" | "bind_asn_network_ip";
        /** @enum {string} */
        NotConfiguredActionEnum: "skip" | "deny" | "configure";
        /** @description Notification Serializer */
        Notification: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            readonly severity: components["schemas"]["SeverityEnum"];
            readonly body: string;
            /** Format: date-time */
            readonly created: string;
            event?: components["schemas"]["Event"];
            seen?: boolean;
        };
        /** @description Notification Serializer */
        NotificationRequest: {
            event?: components["schemas"]["EventRequest"];
            seen?: boolean;
        };
        /** @description NotificationRule Serializer */
        NotificationRule: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI. */
            transports?: string[];
            /** @description Controls which severity level the created notifications will have. */
            severity?: components["schemas"]["SeverityEnum"];
            /**
             * Format: uuid
             * @description Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
             */
            group?: string | null;
            readonly group_obj: components["schemas"]["Group"];
        };
        /** @description NotificationRule Serializer */
        NotificationRuleRequest: {
            name: string;
            /** @description Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI. */
            transports?: string[];
            /** @description Controls which severity level the created notifications will have. */
            severity?: components["schemas"]["SeverityEnum"];
            /**
             * Format: uuid
             * @description Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
             */
            group?: string | null;
        };
        /** @description NotificationTransport Serializer */
        NotificationTransport: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            mode?: components["schemas"]["NotificationTransportModeEnum"];
            /** @description Return selected mode with a UI Label */
            readonly mode_verbose: string;
            /** Format: uri */
            webhook_url?: string;
            /**
             * Format: uuid
             * @description Customize the body of the request. Mapping should return data that is JSON-serializable.
             */
            webhook_mapping_body?: string | null;
            /**
             * Format: uuid
             * @description Configure additional headers to be sent. Mapping should return a dictionary of key-value pairs
             */
            webhook_mapping_headers?: string | null;
            /** @description Only send notification once, for example when sending a webhook into a chat channel. */
            send_once?: boolean;
        };
        /** @enum {string} */
        NotificationTransportModeEnum: "local" | "webhook" | "webhook_slack" | "email";
        /** @description NotificationTransport Serializer */
        NotificationTransportRequest: {
            name: string;
            mode?: components["schemas"]["NotificationTransportModeEnum"];
            /** Format: uri */
            webhook_url?: string;
            /**
             * Format: uuid
             * @description Customize the body of the request. Mapping should return data that is JSON-serializable.
             */
            webhook_mapping_body?: string | null;
            /**
             * Format: uuid
             * @description Configure additional headers to be sent. Mapping should return a dictionary of key-value pairs
             */
            webhook_mapping_headers?: string | null;
            /** @description Only send notification once, for example when sending a webhook into a chat channel. */
            send_once?: boolean;
        };
        /** @description Notification test serializer */
        NotificationTransportTest: {
            messages: string[];
        };
        /** @description NotificationWebhookMapping Serializer */
        NotificationWebhookMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            expression: string;
        };
        /** @description NotificationWebhookMapping Serializer */
        NotificationWebhookMappingRequest: {
            name: string;
            expression: string;
        };
        /** @description OAuth2Provider Serializer */
        OAuth2Provider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable */
            client_type?: components["schemas"]["ClientTypeEnum"];
            client_id?: string;
            client_secret?: string;
            /** @description Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_code_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
            /** @description Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint. */
            include_claims_in_id_token?: boolean;
            /**
             * Format: uuid
             * @description Key used to sign the tokens.
             */
            signing_key?: string | null;
            /**
             * Format: uuid
             * @description Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.
             */
            encryption_key?: string | null;
            redirect_uris: components["schemas"]["RedirectURI"][];
            /** @description Configure what data should be used as unique User Identifier. For most cases, the default should be fine. */
            sub_mode?: components["schemas"]["SubModeEnum"];
            /** @description Configure how the issuer field of the ID Token should be filled. */
            issuer_mode?: components["schemas"]["IssuerModeEnum"];
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
        };
        /** @description OAuth2Provider Serializer */
        OAuth2ProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable */
            client_type?: components["schemas"]["ClientTypeEnum"];
            client_id?: string;
            client_secret?: string;
            /** @description Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_code_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
            /** @description Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint. */
            include_claims_in_id_token?: boolean;
            /**
             * Format: uuid
             * @description Key used to sign the tokens.
             */
            signing_key?: string | null;
            /**
             * Format: uuid
             * @description Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.
             */
            encryption_key?: string | null;
            redirect_uris: components["schemas"]["RedirectURIRequest"][];
            /** @description Configure what data should be used as unique User Identifier. For most cases, the default should be fine. */
            sub_mode?: components["schemas"]["SubModeEnum"];
            /** @description Configure how the issuer field of the ID Token should be filled. */
            issuer_mode?: components["schemas"]["IssuerModeEnum"];
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_oauth2.oauth2provider";
        };
        /** @description OAuth2 Provider Metadata serializer */
        OAuth2ProviderSetupURLs: {
            readonly issuer: string;
            readonly authorize: string;
            readonly token: string;
            readonly user_info: string;
            readonly provider_info: string;
            readonly logout: string;
            readonly jwks: string;
        };
        /** @description OAuth Device code challenge */
        OAuthDeviceCodeChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-provider-oauth2-device-code";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
        };
        /** @description Response that includes the user-entered device code */
        OAuthDeviceCodeChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-provider-oauth2-device-code";
            code: string;
        };
        /** @description Final challenge after user enters their code */
        OAuthDeviceCodeFinishChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-provider-oauth2-device-code-finish";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
        };
        /** @description Response that device has been authenticated and tab can be closed */
        OAuthDeviceCodeFinishChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-provider-oauth2-device-code-finish";
        };
        /** @description OAuth Source Serializer */
        OAuthSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            readonly icon: string | null;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            provider_type: components["schemas"]["ProviderTypeEnum"];
            /** @description URL used to request the initial token. This URL is only required for OAuth 1. */
            request_token_url?: string | null;
            /** @description URL the user is redirect to to conest the flow. */
            authorization_url?: string | null;
            /** @description URL used by authentik to retrieve tokens. */
            access_token_url?: string | null;
            /** @description URL used by authentik to get user information. */
            profile_url?: string | null;
            consumer_key: string;
            /** @description Get OAuth Callback URL */
            readonly callback_url: string;
            additional_scopes?: string;
            readonly type: components["schemas"]["SourceType"];
            oidc_well_known_url?: string;
            oidc_jwks_url?: string;
            oidc_jwks?: unknown;
            /** @description How to perform authentication during an authorization_code token request flow */
            authorization_code_auth_method?: components["schemas"]["AuthorizationCodeAuthMethodEnum"];
        };
        /** @description OAuthSourcePropertyMapping Serializer */
        OAuthSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description OAuthSourcePropertyMapping Serializer */
        OAuthSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description OAuth Source Serializer */
        OAuthSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            provider_type: components["schemas"]["ProviderTypeEnum"];
            /** @description URL used to request the initial token. This URL is only required for OAuth 1. */
            request_token_url?: string | null;
            /** @description URL the user is redirect to to conest the flow. */
            authorization_url?: string | null;
            /** @description URL used by authentik to retrieve tokens. */
            access_token_url?: string | null;
            /** @description URL used by authentik to get user information. */
            profile_url?: string | null;
            consumer_key: string;
            consumer_secret: string;
            additional_scopes?: string;
            oidc_well_known_url?: string;
            oidc_jwks_url?: string;
            oidc_jwks?: unknown;
            /** @description How to perform authentication during an authorization_code token request flow */
            authorization_code_auth_method?: components["schemas"]["AuthorizationCodeAuthMethodEnum"];
        };
        /** @description rest_framework Serializer for OIDC Configuration */
        OpenIDConnectConfiguration: {
            issuer: string;
            authorization_endpoint: string;
            token_endpoint: string;
            userinfo_endpoint: string;
            end_session_endpoint: string;
            introspection_endpoint: string;
            jwks_uri: string;
            response_types_supported: string[];
            id_token_signing_alg_values_supported: string[];
            subject_types_supported: string[];
            token_endpoint_auth_methods_supported: string[];
        };
        /** @enum {string} */
        OutgoingSyncDeleteAction: "do_nothing" | "delete" | "suspend";
        /** @description Outpost Serializer */
        Outpost: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            type: components["schemas"]["OutpostTypeEnum"];
            providers: number[];
            readonly providers_obj: components["schemas"]["Provider"][];
            /**
             * Format: uuid
             * @description Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
             */
            service_connection?: string | null;
            readonly service_connection_obj: components["schemas"]["ServiceConnection"];
            readonly refresh_interval_s: number;
            /** @description Get Token identifier */
            readonly token_identifier: string;
            config: {
                [key: string]: unknown;
            };
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
        };
        /** @description Global default outpost config */
        OutpostDefaultConfig: {
            readonly config: {
                [key: string]: unknown;
            };
        };
        /** @description Outpost health status */
        OutpostHealth: {
            readonly uid: string;
            /** Format: date-time */
            readonly last_seen: string;
            readonly version: string;
            readonly golang_version: string;
            readonly openssl_enabled: boolean;
            readonly openssl_version: string;
            /** @description Get FIPS enabled */
            readonly fips_enabled: boolean | null;
            readonly version_should: string;
            readonly version_outdated: boolean;
            readonly build_hash: string;
            readonly build_hash_should: string;
            readonly hostname: string;
        };
        /** @description Outpost Serializer */
        OutpostRequest: {
            name: string;
            type: components["schemas"]["OutpostTypeEnum"];
            providers: number[];
            /**
             * Format: uuid
             * @description Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
             */
            service_connection?: string | null;
            config: {
                [key: string]: unknown;
            };
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
        };
        /** @enum {string} */
        OutpostTypeEnum: "proxy" | "ldap" | "radius" | "rac";
        PaginatedApplicationEntitlementList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ApplicationEntitlement"][];
        };
        PaginatedApplicationList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Application"][];
        };
        PaginatedAuthenticatedSessionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatedSession"][];
        };
        PaginatedAuthenticatorDuoStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorDuoStage"][];
        };
        PaginatedAuthenticatorEmailStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorEmailStage"][];
        };
        PaginatedAuthenticatorEndpointGDTCStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorEndpointGDTCStage"][];
        };
        PaginatedAuthenticatorSMSStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorSMSStage"][];
        };
        PaginatedAuthenticatorStaticStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorStaticStage"][];
        };
        PaginatedAuthenticatorTOTPStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorTOTPStage"][];
        };
        PaginatedAuthenticatorValidateStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorValidateStage"][];
        };
        PaginatedAuthenticatorWebAuthnStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["AuthenticatorWebAuthnStage"][];
        };
        PaginatedBlueprintInstanceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["BlueprintInstance"][];
        };
        PaginatedBrandList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Brand"][];
        };
        PaginatedCaptchaStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["CaptchaStage"][];
        };
        PaginatedCertificateKeyPairList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["CertificateKeyPair"][];
        };
        PaginatedConnectionTokenList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ConnectionToken"][];
        };
        PaginatedConsentStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ConsentStage"][];
        };
        PaginatedDenyStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["DenyStage"][];
        };
        PaginatedDockerServiceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["DockerServiceConnection"][];
        };
        PaginatedDummyPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["DummyPolicy"][];
        };
        PaginatedDummyStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["DummyStage"][];
        };
        PaginatedDuoDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["DuoDevice"][];
        };
        PaginatedEmailDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["EmailDevice"][];
        };
        PaginatedEmailStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["EmailStage"][];
        };
        PaginatedEndpointDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["EndpointDevice"][];
        };
        PaginatedEndpointList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Endpoint"][];
        };
        PaginatedEventList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Event"][];
        };
        PaginatedEventMatcherPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["EventMatcherPolicy"][];
        };
        PaginatedExpiringBaseGrantModelList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ExpiringBaseGrantModel"][];
        };
        PaginatedExpressionPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ExpressionPolicy"][];
        };
        PaginatedExtraRoleObjectPermissionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ExtraRoleObjectPermission"][];
        };
        PaginatedExtraUserObjectPermissionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ExtraUserObjectPermission"][];
        };
        PaginatedFlowList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Flow"][];
        };
        PaginatedFlowStageBindingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["FlowStageBinding"][];
        };
        PaginatedGeoIPPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GeoIPPolicy"][];
        };
        PaginatedGoogleWorkspaceProviderGroupList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GoogleWorkspaceProviderGroup"][];
        };
        PaginatedGoogleWorkspaceProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GoogleWorkspaceProvider"][];
        };
        PaginatedGoogleWorkspaceProviderMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GoogleWorkspaceProviderMapping"][];
        };
        PaginatedGoogleWorkspaceProviderUserList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GoogleWorkspaceProviderUser"][];
        };
        PaginatedGroupKerberosSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupKerberosSourceConnection"][];
        };
        PaginatedGroupLDAPSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupLDAPSourceConnection"][];
        };
        PaginatedGroupList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Group"][];
        };
        PaginatedGroupOAuthSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupOAuthSourceConnection"][];
        };
        PaginatedGroupPlexSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupPlexSourceConnection"][];
        };
        PaginatedGroupSAMLSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupSAMLSourceConnection"][];
        };
        PaginatedGroupSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["GroupSourceConnection"][];
        };
        PaginatedIdentificationStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["IdentificationStage"][];
        };
        PaginatedInitialPermissionsList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["InitialPermissions"][];
        };
        PaginatedInvitationList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Invitation"][];
        };
        PaginatedInvitationStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["InvitationStage"][];
        };
        PaginatedKerberosSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["KerberosSource"][];
        };
        PaginatedKerberosSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["KerberosSourcePropertyMapping"][];
        };
        PaginatedKubernetesServiceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["KubernetesServiceConnection"][];
        };
        PaginatedLDAPOutpostConfigList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["LDAPOutpostConfig"][];
        };
        PaginatedLDAPProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["LDAPProvider"][];
        };
        PaginatedLDAPSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["LDAPSource"][];
        };
        PaginatedLDAPSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["LDAPSourcePropertyMapping"][];
        };
        PaginatedLicenseList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["License"][];
        };
        PaginatedMicrosoftEntraProviderGroupList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["MicrosoftEntraProviderGroup"][];
        };
        PaginatedMicrosoftEntraProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["MicrosoftEntraProvider"][];
        };
        PaginatedMicrosoftEntraProviderMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["MicrosoftEntraProviderMapping"][];
        };
        PaginatedMicrosoftEntraProviderUserList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["MicrosoftEntraProviderUser"][];
        };
        PaginatedMutualTLSStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["MutualTLSStage"][];
        };
        PaginatedNotificationList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Notification"][];
        };
        PaginatedNotificationRuleList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["NotificationRule"][];
        };
        PaginatedNotificationTransportList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["NotificationTransport"][];
        };
        PaginatedNotificationWebhookMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["NotificationWebhookMapping"][];
        };
        PaginatedOAuth2ProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["OAuth2Provider"][];
        };
        PaginatedOAuthSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["OAuthSource"][];
        };
        PaginatedOAuthSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["OAuthSourcePropertyMapping"][];
        };
        PaginatedOutpostList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Outpost"][];
        };
        PaginatedPasswordExpiryPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PasswordExpiryPolicy"][];
        };
        PaginatedPasswordPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PasswordPolicy"][];
        };
        PaginatedPasswordStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PasswordStage"][];
        };
        PaginatedPermissionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Permission"][];
        };
        PaginatedPlexSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PlexSource"][];
        };
        PaginatedPlexSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PlexSourcePropertyMapping"][];
        };
        PaginatedPolicyBindingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PolicyBinding"][];
        };
        PaginatedPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Policy"][];
        };
        PaginatedPromptList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Prompt"][];
        };
        PaginatedPromptStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PromptStage"][];
        };
        PaginatedPropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["PropertyMapping"][];
        };
        PaginatedProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Provider"][];
        };
        PaginatedProxyOutpostConfigList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ProxyOutpostConfig"][];
        };
        PaginatedProxyProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ProxyProvider"][];
        };
        PaginatedRACPropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RACPropertyMapping"][];
        };
        PaginatedRACProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RACProvider"][];
        };
        PaginatedRadiusOutpostConfigList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RadiusOutpostConfig"][];
        };
        PaginatedRadiusProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RadiusProvider"][];
        };
        PaginatedRadiusProviderPropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RadiusProviderPropertyMapping"][];
        };
        PaginatedRedirectStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RedirectStage"][];
        };
        PaginatedReputationList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Reputation"][];
        };
        PaginatedReputationPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ReputationPolicy"][];
        };
        PaginatedRoleAssignedObjectPermissionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["RoleAssignedObjectPermission"][];
        };
        PaginatedRoleList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Role"][];
        };
        PaginatedSAMLPropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SAMLPropertyMapping"][];
        };
        PaginatedSAMLProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SAMLProvider"][];
        };
        PaginatedSAMLSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SAMLSource"][];
        };
        PaginatedSAMLSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SAMLSourcePropertyMapping"][];
        };
        PaginatedSCIMMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMMapping"][];
        };
        PaginatedSCIMProviderGroupList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMProviderGroup"][];
        };
        PaginatedSCIMProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMProvider"][];
        };
        PaginatedSCIMProviderUserList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMProviderUser"][];
        };
        PaginatedSCIMSourceGroupList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMSourceGroup"][];
        };
        PaginatedSCIMSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMSource"][];
        };
        PaginatedSCIMSourcePropertyMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMSourcePropertyMapping"][];
        };
        PaginatedSCIMSourceUserList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SCIMSourceUser"][];
        };
        PaginatedSMSDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SMSDevice"][];
        };
        PaginatedSSFProviderList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SSFProvider"][];
        };
        PaginatedSSFStreamList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SSFStream"][];
        };
        PaginatedScopeMappingList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ScopeMapping"][];
        };
        PaginatedServiceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["ServiceConnection"][];
        };
        PaginatedSourceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Source"][];
        };
        PaginatedSourceStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SourceStage"][];
        };
        PaginatedStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Stage"][];
        };
        PaginatedStaticDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["StaticDevice"][];
        };
        PaginatedSystemTaskList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["SystemTask"][];
        };
        PaginatedTOTPDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["TOTPDevice"][];
        };
        PaginatedTokenList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["Token"][];
        };
        PaginatedTokenModelList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["TokenModel"][];
        };
        PaginatedUniquePasswordPolicyList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UniquePasswordPolicy"][];
        };
        PaginatedUserAssignedObjectPermissionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserAssignedObjectPermission"][];
        };
        PaginatedUserConsentList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserConsent"][];
        };
        PaginatedUserDeleteStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserDeleteStage"][];
        };
        PaginatedUserKerberosSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserKerberosSourceConnection"][];
        };
        PaginatedUserLDAPSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserLDAPSourceConnection"][];
        };
        PaginatedUserList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["User"][];
        };
        PaginatedUserLoginStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserLoginStage"][];
        };
        PaginatedUserLogoutStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserLogoutStage"][];
        };
        PaginatedUserOAuthSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserOAuthSourceConnection"][];
        };
        PaginatedUserPlexSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserPlexSourceConnection"][];
        };
        PaginatedUserSAMLSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserSAMLSourceConnection"][];
        };
        PaginatedUserSourceConnectionList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserSourceConnection"][];
        };
        PaginatedUserWriteStageList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["UserWriteStage"][];
        };
        PaginatedWebAuthnDeviceList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["WebAuthnDevice"][];
        };
        PaginatedWebAuthnDeviceTypeList: {
            pagination: components["schemas"]["Pagination"];
            results: components["schemas"]["WebAuthnDeviceType"][];
        };
        Pagination: {
            next: number;
            previous: number;
            count: number;
            current: number;
            total_pages: number;
            start_index: number;
            end_index: number;
        };
        /** @description Password challenge UI fields */
        PasswordChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-password";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            recovery_url?: string;
            /** @default false */
            allow_show_password: boolean;
        };
        /** @description Password challenge response */
        PasswordChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-password";
            password: string;
        };
        /** @description Password Expiry Policy Serializer */
        PasswordExpiryPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            days: number;
            deny_only?: boolean;
        };
        /** @description Password Expiry Policy Serializer */
        PasswordExpiryPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            days: number;
            deny_only?: boolean;
        };
        /** @description Password Policy Serializer */
        PasswordPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            amount_digits?: number;
            amount_uppercase?: number;
            amount_lowercase?: number;
            amount_symbols?: number;
            length_min?: number;
            symbol_charset?: string;
            error_message?: string;
            check_static_rules?: boolean;
            check_have_i_been_pwned?: boolean;
            check_zxcvbn?: boolean;
            /** @description How many times the password hash is allowed to be on haveibeenpwned */
            hibp_allowed_count?: number;
            /** @description If the zxcvbn score is equal or less than this value, the policy will fail. */
            zxcvbn_score_threshold?: number;
        };
        /** @description Password Policy Serializer */
        PasswordPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            amount_digits?: number;
            amount_uppercase?: number;
            amount_lowercase?: number;
            amount_symbols?: number;
            length_min?: number;
            symbol_charset?: string;
            error_message?: string;
            check_static_rules?: boolean;
            check_have_i_been_pwned?: boolean;
            check_zxcvbn?: boolean;
            /** @description How many times the password hash is allowed to be on haveibeenpwned */
            hibp_allowed_count?: number;
            /** @description If the zxcvbn score is equal or less than this value, the policy will fail. */
            zxcvbn_score_threshold?: number;
        };
        /** @description PasswordStage Serializer */
        PasswordStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description Selection of backends to test the password against. */
            backends: components["schemas"]["BackendsEnum"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            /** @description How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage. */
            failed_attempts_before_cancel?: number;
            /** @description When enabled, provides a 'show password' button with the password input field. */
            allow_show_password?: boolean;
        };
        /** @description PasswordStage Serializer */
        PasswordStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Selection of backends to test the password against. */
            backends: components["schemas"]["BackendsEnum"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            /** @description How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage. */
            failed_attempts_before_cancel?: number;
            /** @description When enabled, provides a 'show password' button with the password input field. */
            allow_show_password?: boolean;
        };
        /** @description ApplicationEntitlement Serializer */
        PatchedApplicationEntitlementRequest: {
            name?: string;
            /** Format: uuid */
            app?: string;
            attributes?: unknown;
        };
        /** @description Application Serializer */
        PatchedApplicationRequest: {
            /** @description Application's display Name. */
            name?: string;
            /** @description Internal application name, used in URLs. */
            slug?: string;
            provider?: number | null;
            backchannel_providers?: number[];
            /** @description Open launch URL in a new browser tab or window. */
            open_in_new_tab?: boolean;
            /** Format: uri */
            meta_launch_url?: string;
            meta_description?: string;
            meta_publisher?: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            group?: string;
        };
        /** @description AuthenticatorDuoStage Serializer */
        PatchedAuthenticatorDuoStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            client_id?: string;
            client_secret?: string;
            api_hostname?: string;
            admin_integration_key?: string;
            admin_secret_key?: string;
        };
        /** @description AuthenticatorEmailStage Serializer */
        PatchedAuthenticatorEmailStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            password?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            subject?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            template?: string;
        };
        /** @description AuthenticatorEndpointGDTCStage Serializer */
        PatchedAuthenticatorEndpointGDTCStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            credentials?: unknown;
        };
        /** @description AuthenticatorSMSStage Serializer */
        PatchedAuthenticatorSMSStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            provider?: components["schemas"]["ProviderEnum"];
            from_number?: string;
            account_sid?: string;
            auth?: string;
            auth_password?: string;
            auth_type?: components["schemas"]["AuthTypeEnum"];
            /** @description When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future. */
            verify_only?: boolean;
            /**
             * Format: uuid
             * @description Optionally modify the payload being sent to custom providers.
             */
            mapping?: string | null;
        };
        /** @description AuthenticatorStaticStage Serializer */
        PatchedAuthenticatorStaticStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            token_count?: number;
            token_length?: number;
        };
        /** @description AuthenticatorTOTPStage Serializer */
        PatchedAuthenticatorTOTPStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            digits?: components["schemas"]["DigitsEnum"];
        };
        /** @description AuthenticatorValidateStage Serializer */
        PatchedAuthenticatorValidateStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            not_configured_action?: components["schemas"]["NotConfiguredActionEnum"];
            /** @description Device classes which can be used to authenticate */
            device_classes?: components["schemas"]["DeviceClassesEnum"][];
            /** @description Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again. */
            configuration_stages?: string[];
            /** @description If any of the user's device has been used within this threshold, this stage will be skipped */
            last_auth_threshold?: string;
            /** @description Enforce user verification for WebAuthn devices. */
            webauthn_user_verification?: components["schemas"]["UserVerificationEnum"];
            webauthn_allowed_device_types?: string[];
        };
        /** @description AuthenticatorWebAuthnStage Serializer */
        PatchedAuthenticatorWebAuthnStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            friendly_name?: string | null;
            user_verification?: components["schemas"]["UserVerificationEnum"];
            authenticator_attachment?: components["schemas"]["AuthenticatorAttachmentEnum"] | null;
            resident_key_requirement?: components["schemas"]["ResidentKeyRequirementEnum"];
            device_type_restrictions?: string[];
        };
        /** @description Info about a single blueprint instance file */
        PatchedBlueprintInstanceRequest: {
            name?: string;
            /** @default  */
            path: string;
            context?: unknown;
            enabled?: boolean;
            content?: string;
        };
        /** @description Brand Serializer */
        PatchedBrandRequest: {
            /** @description Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b` */
            domain?: string;
            default?: boolean;
            branding_title?: string;
            branding_logo?: string;
            branding_favicon?: string;
            branding_custom_css?: string;
            branding_default_flow_background?: string;
            /** Format: uuid */
            flow_authentication?: string | null;
            /** Format: uuid */
            flow_invalidation?: string | null;
            /** Format: uuid */
            flow_recovery?: string | null;
            /** Format: uuid */
            flow_unenrollment?: string | null;
            /** Format: uuid */
            flow_user_settings?: string | null;
            /** Format: uuid */
            flow_device_code?: string | null;
            /**
             * Format: uuid
             * @description When set, external users will be redirected to this application after authenticating.
             */
            default_application?: string | null;
            /**
             * Format: uuid
             * @description Web Certificate used by the authentik Core webserver.
             */
            web_certificate?: string | null;
            /** @description Certificates used for client authentication. */
            client_certificates?: string[];
            attributes?: unknown;
        };
        /** @description CaptchaStage Serializer */
        PatchedCaptchaStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Public key, acquired your captcha Provider. */
            public_key?: string;
            /** @description Private key, acquired your captcha Provider. */
            private_key?: string;
            js_url?: string;
            api_url?: string;
            interactive?: boolean;
            /** Format: double */
            score_min_threshold?: number;
            /** Format: double */
            score_max_threshold?: number;
            /** @description When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions */
            error_on_invalid_score?: boolean;
        };
        /** @description CertificateKeyPair Serializer */
        PatchedCertificateKeyPairRequest: {
            name?: string;
            /** @description PEM-encoded Certificate data */
            certificate_data?: string;
            /** @description Optional Private Key. If this is set, you can use this keypair for encryption. */
            key_data?: string;
        };
        /** @description ConnectionToken Serializer */
        PatchedConnectionTokenRequest: {
            /**
             * Connection token uuid
             * Format: uuid
             */
            pk?: string;
            provider?: number;
            /** Format: uuid */
            endpoint?: string;
        };
        /** @description ConsentStage Serializer */
        PatchedConsentStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            mode?: components["schemas"]["ConsentStageModeEnum"];
            /**
             * Consent expires in
             * @description Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
             */
            consent_expire_in?: string;
        };
        /** @description DenyStage Serializer */
        PatchedDenyStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            deny_message?: string;
        };
        /** @description DockerServiceConnection Serializer */
        PatchedDockerServiceConnectionRequest: {
            name?: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            /** @description Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system. */
            url?: string;
            /**
             * Format: uuid
             * @description CA which the endpoint's Certificate is verified against. Can be left empty for no validation.
             */
            tls_verification?: string | null;
            /**
             * Format: uuid
             * @description Certificate/Key used for authentication. Can be left empty for no authentication.
             */
            tls_authentication?: string | null;
        };
        /** @description Dummy Policy Serializer */
        PatchedDummyPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            result?: boolean;
            wait_min?: number;
            wait_max?: number;
        };
        /** @description DummyStage Serializer */
        PatchedDummyStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            throw_error?: boolean;
        };
        /** @description Serializer for Duo authenticator devices */
        PatchedDuoDeviceRequest: {
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description Serializer for email authenticator devices */
        PatchedEmailDeviceRequest: {
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description EmailStage Serializer */
        PatchedEmailStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description When enabled, global Email connection settings will be used and connection settings below will be ignored. */
            use_global_settings?: boolean;
            host?: string;
            port?: number;
            username?: string;
            password?: string;
            use_tls?: boolean;
            use_ssl?: boolean;
            timeout?: number;
            /** Format: email */
            from_address?: string;
            /** @description Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
            token_expiry?: string;
            subject?: string;
            template?: string;
            /** @description Activate users upon completion of stage. */
            activate_user_on_success?: boolean;
        };
        /** @description Serializer for Endpoint authenticator devices */
        PatchedEndpointDeviceRequest: {
            /**
             * Uuid
             * Format: uuid
             */
            pk?: string;
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description Endpoint Serializer */
        PatchedEndpointRequest: {
            name?: string;
            provider?: number;
            protocol?: components["schemas"]["ProtocolEnum"];
            host?: string;
            settings?: unknown;
            property_mappings?: string[];
            auth_mode?: components["schemas"]["AuthModeEnum"];
            maximum_connections?: number;
        };
        /** @description Event Matcher Policy Serializer */
        PatchedEventMatcherPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Match created events with this action type. When left empty, all action types will be matched. */
            action?: components["schemas"]["EventActions"] | null;
            /** @description Matches Event's Client IP (strict matching, for network matching use an Expression Policy) */
            client_ip?: string | null;
            /** @description Match events created by selected application. When left empty, all applications are matched. */
            app?: components["schemas"]["AppEnum"] | null;
            /** @description Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched. */
            model?: components["schemas"]["ModelEnum"] | null;
        };
        /** @description Event Serializer */
        PatchedEventRequest: {
            user?: unknown;
            action?: components["schemas"]["EventActions"];
            app?: string;
            context?: unknown;
            client_ip?: string | null;
            /** Format: date-time */
            expires?: string;
            brand?: unknown;
        };
        /** @description Group Membership Policy Serializer */
        PatchedExpressionPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            expression?: string;
        };
        /** @description User permission with additional object-related data */
        PatchedExtraRoleObjectPermissionRequest: {
            object_pk?: string;
        };
        /** @description User permission with additional object-related data */
        PatchedExtraUserObjectPermissionRequest: {
            object_pk?: string;
        };
        /** @description Flow Serializer */
        PatchedFlowRequest: {
            name?: string;
            /** @description Visible in the URL. */
            slug?: string;
            /** @description Shown as the Title in Flow pages. */
            title?: string;
            /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik. */
            designation?: components["schemas"]["FlowDesignationEnum"];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Enable compatibility mode, increases compatibility with password managers on mobile devices. */
            compatibility_mode?: boolean;
            layout?: components["schemas"]["FlowLayoutEnum"];
            /** @description Configure what should happen when a flow denies access to a user. */
            denied_action?: components["schemas"]["DeniedActionEnum"];
            /** @description Required level of authentication and authorization to access a flow. */
            authentication?: components["schemas"]["AuthenticationEnum"];
        };
        /** @description FlowStageBinding Serializer */
        PatchedFlowStageBindingRequest: {
            /** Format: uuid */
            target?: string;
            /** Format: uuid */
            stage?: string;
            /** @description Evaluate policies during the Flow planning process. */
            evaluate_on_plan?: boolean;
            /** @description Evaluate policies when the Stage is presented to the user. */
            re_evaluate_policies?: boolean;
            order?: number;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context. */
            invalid_response_action?: components["schemas"]["InvalidResponseActionEnum"];
        };
        /** @description GeoIP Policy Serializer */
        PatchedGeoIPPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            asns?: number[];
            countries?: components["schemas"]["CountryCodeEnum"][];
            check_history_distance?: boolean;
            /** Format: int64 */
            history_max_distance_km?: number;
            distance_tolerance_km?: number;
            history_login_count?: number;
            check_impossible_travel?: boolean;
            impossible_tolerance_km?: number;
        };
        /** @description GoogleWorkspaceProviderMapping Serializer */
        PatchedGoogleWorkspaceProviderMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description GoogleWorkspaceProvider Serializer */
        PatchedGoogleWorkspaceProviderRequest: {
            name?: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** Format: email */
            delegated_subject?: string;
            credentials?: unknown;
            scopes?: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            default_group_email_domain?: string;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description Group Source Connection */
        PatchedGroupKerberosSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description Group Source Connection */
        PatchedGroupLDAPSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description Group Source Connection */
        PatchedGroupOAuthSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description Group Source Connection */
        PatchedGroupPlexSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description Group Serializer */
        PatchedGroupRequest: {
            name?: string;
            /** @description Users added to this group will be superusers. */
            is_superuser?: boolean;
            /** Format: uuid */
            parent?: string | null;
            users?: number[];
            attributes?: {
                [key: string]: unknown;
            };
            roles?: string[];
        };
        /** @description Group Source Connection */
        PatchedGroupSAMLSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description Group Source Connection */
        PatchedGroupSourceConnectionRequest: {
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description IdentificationStage Serializer */
        PatchedIdentificationStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Fields of the user object to match against. (Hold shift to select multiple options) */
            user_fields?: components["schemas"]["UserFieldsEnum"][];
            /**
             * Format: uuid
             * @description When set, shows a password field, instead of showing the password field as separate step.
             */
            password_stage?: string | null;
            /**
             * Format: uuid
             * @description When set, adds functionality exactly like a Captcha stage, but baked into the Identification stage.
             */
            captcha_stage?: string | null;
            /** @description When enabled, user fields are matched regardless of their casing. */
            case_insensitive_matching?: boolean;
            /** @description When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown */
            show_matched_user?: boolean;
            /**
             * Format: uuid
             * @description Optional enrollment flow, which is linked at the bottom of the page.
             */
            enrollment_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional recovery flow, which is linked at the bottom of the page.
             */
            recovery_flow?: string | null;
            /**
             * Format: uuid
             * @description Optional passwordless flow, which is linked at the bottom of the page.
             */
            passwordless_flow?: string | null;
            /** @description Specify which sources should be shown. */
            sources?: string[];
            show_source_labels?: boolean;
            /** @description When enabled, the stage will succeed and continue even when incorrect user info is entered. */
            pretend_user_exists?: boolean;
            /** @description Show the user the 'Remember me on this device' toggle, allowing repeat users to skip straight to entering their password. */
            enable_remember_me?: boolean;
        };
        /** @description InitialPermissions serializer */
        PatchedInitialPermissionsRequest: {
            name?: string;
            mode?: components["schemas"]["InitialPermissionsModeEnum"];
            /** Format: uuid */
            role?: string;
            permissions?: number[];
        };
        /** @description Invitation Serializer */
        PatchedInvitationRequest: {
            name?: string;
            /** Format: date-time */
            expires?: string | null;
            fixed_data?: {
                [key: string]: unknown;
            };
            /** @description When enabled, the invitation will be deleted after usage. */
            single_use?: boolean;
            /**
             * Format: uuid
             * @description When set, only the configured flow can use this invitation.
             */
            flow?: string | null;
        };
        /** @description InvitationStage Serializer */
        PatchedInvitationStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given. */
            continue_flow_without_invitation?: boolean;
        };
        /** @description Kerberos PropertyMapping Serializer */
        PatchedKerberosSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description Kerberos Source Serializer */
        PatchedKerberosSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Kerberos realm */
            realm?: string;
            /** @description Custom krb5.conf to use. Uses the system one by default */
            krb5_conf?: string;
            /** @description KAdmin server type */
            kadmin_type?: components["schemas"]["KadminTypeEnum"];
            /** @description Sync users from Kerberos into authentik */
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to Kerberos */
            sync_users_password?: boolean;
            /** @description Principal to authenticate to kadmin for sync. */
            sync_principal?: string;
            /** @description Password to authenticate to kadmin for sync */
            sync_password?: string;
            /** @description Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual */
            sync_keytab?: string;
            /** @description Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual */
            sync_ccache?: string;
            /** @description Force the use of a specific server name for SPNEGO. Must be in the form HTTP@hostname */
            spnego_server_name?: string;
            /** @description SPNEGO keytab base64-encoded or path to keytab in the form FILE:path */
            spnego_keytab?: string;
            /** @description Credential cache to use for SPNEGO in form type:residual */
            spnego_ccache?: string;
            /** @description If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend */
            password_login_update_internal_password?: boolean;
        };
        /** @description KubernetesServiceConnection Serializer */
        PatchedKubernetesServiceConnectionRequest: {
            name?: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            /** @description Paste your kubeconfig here. authentik will automatically use the currently selected context. */
            kubeconfig?: unknown;
            /** @description Verify SSL Certificates of the Kubernetes API endpoint */
            verify_ssl?: boolean;
        };
        /** @description LDAPProvider Serializer */
        PatchedLDAPProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow?: string;
            property_mappings?: string[];
            /** @description DN under which objects are accessible. */
            base_dn?: string;
            /** Format: uuid */
            certificate?: string | null;
            tls_server_name?: string;
            /** @description The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber */
            uid_start_number?: number;
            /** @description The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber */
            gid_start_number?: number;
            search_mode?: components["schemas"]["LDAPAPIAccessMode"];
            bind_mode?: components["schemas"]["LDAPAPIAccessMode"];
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description LDAP PropertyMapping Serializer */
        PatchedLDAPSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description LDAP Source Serializer */
        PatchedLDAPSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** Format: uri */
            server_uri?: string;
            /**
             * Format: uuid
             * @description Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
             */
            peer_certificate?: string | null;
            /**
             * Format: uuid
             * @description Client certificate to authenticate against the LDAP Server's Certificate.
             */
            client_certificate?: string | null;
            bind_cn?: string;
            bind_password?: string;
            /** Enable Start TLS */
            start_tls?: boolean;
            /** Use Server URI for SNI verification */
            sni?: boolean;
            base_dn?: string;
            /**
             * Addition User DN
             * @description Prepended to Base DN for User-queries.
             */
            additional_user_dn?: string;
            /**
             * Addition Group DN
             * @description Prepended to Base DN for Group-queries.
             */
            additional_group_dn?: string;
            /** @description Consider Objects matching this filter to be Users. */
            user_object_filter?: string;
            /** @description Consider Objects matching this filter to be Groups. */
            group_object_filter?: string;
            /** @description Field which contains members of a group. */
            group_membership_field?: string;
            /** @description Attribute which matches the value of `group_membership_field`. */
            user_membership_attribute?: string;
            /** @description Field which contains a unique Identifier. */
            object_uniqueness_field?: string;
            /** @description Update internal authentik password when login succeeds with LDAP */
            password_login_update_internal_password?: boolean;
            sync_users?: boolean;
            /** @description When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source. */
            sync_users_password?: boolean;
            sync_groups?: boolean;
            /** Format: uuid */
            sync_parent_group?: string | null;
            /** @description Lookup group membership based on a user attribute instead of a group attribute. This allows nested group resolution on systems like FreeIPA and Active Directory */
            lookup_groups_from_user?: boolean;
            /** @description Delete authentik users and groups which were previously supplied by this source, but are now missing from it. */
            delete_not_found_objects?: boolean;
        };
        /** @description License Serializer */
        PatchedLicenseRequest: {
            key?: string;
        };
        /** @description MicrosoftEntraProviderMapping Serializer */
        PatchedMicrosoftEntraProviderMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description MicrosoftEntraProvider Serializer */
        PatchedMicrosoftEntraProviderRequest: {
            name?: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            client_id?: string;
            client_secret?: string;
            tenant_id?: string;
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            user_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            group_delete_action?: components["schemas"]["OutgoingSyncDeleteAction"];
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description MutualTLSStage Serializer */
        PatchedMutualTLSStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            mode?: components["schemas"]["MutualTLSStageModeEnum"];
            /** @description Configure certificate authorities to validate the certificate against. This option has a higher priority than the `client_certificate` option on `Brand`. */
            certificate_authorities?: string[];
            cert_attribute?: components["schemas"]["CertAttributeEnum"];
            user_attribute?: components["schemas"]["UserAttributeEnum"];
        };
        /** @description Notification Serializer */
        PatchedNotificationRequest: {
            event?: components["schemas"]["EventRequest"];
            seen?: boolean;
        };
        /** @description NotificationRule Serializer */
        PatchedNotificationRuleRequest: {
            name?: string;
            /** @description Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI. */
            transports?: string[];
            /** @description Controls which severity level the created notifications will have. */
            severity?: components["schemas"]["SeverityEnum"];
            /**
             * Format: uuid
             * @description Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
             */
            group?: string | null;
        };
        /** @description NotificationTransport Serializer */
        PatchedNotificationTransportRequest: {
            name?: string;
            mode?: components["schemas"]["NotificationTransportModeEnum"];
            /** Format: uri */
            webhook_url?: string;
            /**
             * Format: uuid
             * @description Customize the body of the request. Mapping should return data that is JSON-serializable.
             */
            webhook_mapping_body?: string | null;
            /**
             * Format: uuid
             * @description Configure additional headers to be sent. Mapping should return a dictionary of key-value pairs
             */
            webhook_mapping_headers?: string | null;
            /** @description Only send notification once, for example when sending a webhook into a chat channel. */
            send_once?: boolean;
        };
        /** @description NotificationWebhookMapping Serializer */
        PatchedNotificationWebhookMappingRequest: {
            name?: string;
            expression?: string;
        };
        /** @description OAuth2Provider Serializer */
        PatchedOAuth2ProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow?: string;
            property_mappings?: string[];
            /** @description Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable */
            client_type?: components["schemas"]["ClientTypeEnum"];
            client_id?: string;
            client_secret?: string;
            /** @description Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_code_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
            /** @description Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint. */
            include_claims_in_id_token?: boolean;
            /**
             * Format: uuid
             * @description Key used to sign the tokens.
             */
            signing_key?: string | null;
            /**
             * Format: uuid
             * @description Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.
             */
            encryption_key?: string | null;
            redirect_uris?: components["schemas"]["RedirectURIRequest"][];
            /** @description Configure what data should be used as unique User Identifier. For most cases, the default should be fine. */
            sub_mode?: components["schemas"]["SubModeEnum"];
            /** @description Configure how the issuer field of the ID Token should be filled. */
            issuer_mode?: components["schemas"]["IssuerModeEnum"];
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
        };
        /** @description OAuthSourcePropertyMapping Serializer */
        PatchedOAuthSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description OAuth Source Serializer */
        PatchedOAuthSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            provider_type?: components["schemas"]["ProviderTypeEnum"];
            /** @description URL used to request the initial token. This URL is only required for OAuth 1. */
            request_token_url?: string | null;
            /** @description URL the user is redirect to to conest the flow. */
            authorization_url?: string | null;
            /** @description URL used by authentik to retrieve tokens. */
            access_token_url?: string | null;
            /** @description URL used by authentik to get user information. */
            profile_url?: string | null;
            consumer_key?: string;
            consumer_secret?: string;
            additional_scopes?: string;
            oidc_well_known_url?: string;
            oidc_jwks_url?: string;
            oidc_jwks?: unknown;
            /** @description How to perform authentication during an authorization_code token request flow */
            authorization_code_auth_method?: components["schemas"]["AuthorizationCodeAuthMethodEnum"];
        };
        /** @description Outpost Serializer */
        PatchedOutpostRequest: {
            name?: string;
            type?: components["schemas"]["OutpostTypeEnum"];
            providers?: number[];
            /**
             * Format: uuid
             * @description Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
             */
            service_connection?: string | null;
            config?: {
                [key: string]: unknown;
            };
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
        };
        /** @description Password Expiry Policy Serializer */
        PatchedPasswordExpiryPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            days?: number;
            deny_only?: boolean;
        };
        /** @description Password Policy Serializer */
        PatchedPasswordPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            amount_digits?: number;
            amount_uppercase?: number;
            amount_lowercase?: number;
            amount_symbols?: number;
            length_min?: number;
            symbol_charset?: string;
            error_message?: string;
            check_static_rules?: boolean;
            check_have_i_been_pwned?: boolean;
            check_zxcvbn?: boolean;
            /** @description How many times the password hash is allowed to be on haveibeenpwned */
            hibp_allowed_count?: number;
            /** @description If the zxcvbn score is equal or less than this value, the policy will fail. */
            zxcvbn_score_threshold?: number;
        };
        /** @description PasswordStage Serializer */
        PatchedPasswordStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Selection of backends to test the password against. */
            backends?: components["schemas"]["BackendsEnum"][];
            /**
             * Format: uuid
             * @description Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
             */
            configure_flow?: string | null;
            /** @description How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage. */
            failed_attempts_before_cancel?: number;
            /** @description When enabled, provides a 'show password' button with the password input field. */
            allow_show_password?: boolean;
        };
        /** @description Request to assign a new permission */
        PatchedPermissionAssignRequest: {
            permissions?: string[];
            model?: components["schemas"]["ModelEnum"];
            object_pk?: string;
        };
        /** @description PlexSourcePropertyMapping Serializer */
        PatchedPlexSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description Plex Source Serializer */
        PatchedPlexSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Client identifier used to talk to Plex. */
            client_id?: string;
            /** @description Which servers a user has to be a member of to be granted access. Empty list allows every server. */
            allowed_servers?: string[];
            /** @description Allow friends to authenticate, even if you don't share a server. */
            allow_friends?: boolean;
            /** @description Plex token used to check friends */
            plex_token?: string;
        };
        /** @description PolicyBinding Serializer */
        PatchedPolicyBindingRequest: {
            /** Format: uuid */
            policy?: string | null;
            /** Format: uuid */
            group?: string | null;
            user?: number | null;
            /** Format: uuid */
            target?: string;
            /** @description Negates the outcome of the policy. Messages are unaffected. */
            negate?: boolean;
            enabled?: boolean;
            order?: number;
            /** @description Timeout after which Policy execution is terminated. */
            timeout?: number;
            /** @description Result if the Policy execution fails. */
            failure_result?: boolean;
        };
        /** @description Prompt Serializer */
        PatchedPromptRequest: {
            name?: string;
            /** @description Name of the form field, also used to store the value */
            field_key?: string;
            label?: string;
            type?: components["schemas"]["PromptTypeEnum"];
            required?: boolean;
            /** @description Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices. */
            placeholder?: string;
            /** @description Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices. */
            initial_value?: string;
            order?: number;
            promptstage_set?: components["schemas"]["StageRequest"][];
            sub_text?: string;
            placeholder_expression?: boolean;
            initial_value_expression?: boolean;
        };
        /** @description PromptStage Serializer */
        PatchedPromptStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            fields?: string[];
            validation_policies?: string[];
        };
        /** @description ProxyProvider Serializer */
        PatchedProxyProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow?: string;
            property_mappings?: string[];
            /** Format: uri */
            internal_host?: string;
            /** Format: uri */
            external_host?: string;
            /** @description Validate SSL Certificates of upstream servers */
            internal_host_ssl_validation?: boolean;
            /** Format: uuid */
            certificate?: string | null;
            /** @description Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
            skip_path_regex?: string;
            /**
             * Set HTTP-Basic Authentication
             * @description Set a custom HTTP-Basic Authentication header based on values from authentik.
             */
            basic_auth_enabled?: boolean;
            /**
             * HTTP-Basic Password Key
             * @description User/Group Attribute used for the password part of the HTTP-Basic Header.
             */
            basic_auth_password_attribute?: string;
            /**
             * HTTP-Basic Username Key
             * @description User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
             */
            basic_auth_user_attribute?: string;
            /** @description Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host. */
            mode?: components["schemas"]["ProxyMode"];
            /** @description When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
            intercept_header_auth?: boolean;
            cookie_domain?: string;
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
        };
        /** @description RACPropertyMapping Serializer */
        PatchedRACPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
            static_settings?: {
                [key: string]: unknown;
            };
        };
        /** @description RACProvider Serializer */
        PatchedRACProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            property_mappings?: string[];
            settings?: unknown;
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            connection_expiry?: string;
            /** @description When set to true, connection tokens will be deleted upon disconnect. */
            delete_token_on_disconnect?: boolean;
        };
        /** @description RadiusProviderPropertyMapping Serializer */
        PatchedRadiusProviderPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description RadiusProvider Serializer */
        PatchedRadiusProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow?: string;
            property_mappings?: string[];
            /** @description List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
            client_networks?: string;
            /** @description Shared secret between clients and server to hash packets. */
            shared_secret?: string;
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description RedirectStage Serializer */
        PatchedRedirectStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            keep_context?: boolean;
            mode?: components["schemas"]["RedirectStageModeEnum"];
            target_static?: string;
            /** Format: uuid */
            target_flow?: string | null;
        };
        /** @description Reputation Policy Serializer */
        PatchedReputationPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            check_ip?: boolean;
            check_username?: boolean;
            threshold?: number;
        };
        /** @description Role serializer */
        PatchedRoleRequest: {
            name?: string;
        };
        /** @description SAMLPropertyMapping Serializer */
        PatchedSAMLPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
            saml_name?: string;
            friendly_name?: string | null;
        };
        /** @description SAMLProvider Serializer */
        PatchedSAMLProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow?: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow?: string;
            property_mappings?: string[];
            /** Format: uri */
            acs_url?: string;
            /** @description Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added. */
            audience?: string;
            /** @description Also known as EntityID */
            issuer?: string;
            /** @description Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3). */
            assertion_valid_not_before?: string;
            /** @description Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            assertion_valid_not_on_or_after?: string;
            /** @description Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            session_valid_not_on_or_after?: string;
            /**
             * NameID Property Mapping
             * Format: uuid
             * @description Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
             */
            name_id_mapping?: string | null;
            /**
             * AuthnContextClassRef Property Mapping
             * Format: uuid
             * @description Configure how the AuthnContextClassRef value will be created. When left empty, the AuthnContextClassRef will be set based on which authentication methods the user used to authenticate.
             */
            authn_context_class_ref_mapping?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Service Provider.
             */
            signing_kp?: string | null;
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
            sign_assertion?: boolean;
            sign_response?: boolean;
            /**
             * Service Provider Binding
             * @description This determines how authentik sends the response back to the Service Provider.
             */
            sp_binding?: components["schemas"]["SpBindingEnum"];
            /** @description Default relay_state value for IDP-initiated logins */
            default_relay_state?: string;
        };
        /** @description SAMLSourcePropertyMapping Serializer */
        PatchedSAMLSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description SAMLSource Serializer */
        PatchedSAMLSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /**
             * Format: uuid
             * @description Flow used before authentication.
             */
            pre_authentication_flow?: string;
            /** @description Also known as Entity ID. Defaults the Metadata URL. */
            issuer?: string;
            /**
             * Format: uri
             * @description URL that the initial Login request is sent to.
             */
            sso_url?: string;
            /**
             * Format: uri
             * @description Optional URL if your IDP supports Single-Logout.
             */
            slo_url?: string | null;
            /** @description Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done. */
            allow_idp_initiated?: boolean;
            /** @description NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent. */
            name_id_policy?: components["schemas"]["NameIdPolicyEnum"];
            binding_type?: components["schemas"]["BindingTypeEnum"];
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Identity Provider.
             */
            signing_kp?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Delete temporary users after
             * @description Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
             */
            temporary_user_delete_after?: string;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
        };
        /** @description SCIMMapping Serializer */
        PatchedSCIMMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description SCIMProvider Serializer */
        PatchedSCIMProviderRequest: {
            name?: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** @description Base URL to SCIM requests, usually ends in /v2 */
            url?: string;
            verify_certificates?: boolean;
            /** @description Authentication token */
            token?: string;
            /**
             * SCIM Compatibility Mode
             * @description Alter authentik behavior for vendor-specific SCIM implementations.
             */
            compatibility_mode?: components["schemas"]["CompatibilityModeEnum"];
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description SCIMSourceGroup Serializer */
        PatchedSCIMSourceGroupRequest: {
            id?: string;
            /** Format: uuid */
            group?: string;
            /** Format: uuid */
            source?: string;
            attributes?: unknown;
        };
        /** @description SCIMSourcePropertyMapping Serializer */
        PatchedSCIMSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
        };
        /** @description SCIMSource Serializer */
        PatchedSCIMSourceRequest: {
            /** @description Source's display Name. */
            name?: string;
            /** @description Internal source name, used in URLs. */
            slug?: string;
            enabled?: boolean;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            user_path_template?: string;
        };
        /** @description SCIMSourceUser Serializer */
        PatchedSCIMSourceUserRequest: {
            id?: string;
            user?: number;
            /** Format: uuid */
            source?: string;
            attributes?: unknown;
        };
        /** @description Serializer for sms authenticator devices */
        PatchedSMSDeviceRequest: {
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description SSFProvider Serializer */
        PatchedSSFProviderRequest: {
            name?: string;
            /**
             * Format: uuid
             * @description Key used to sign the SSF Events.
             */
            signing_key?: string;
            oidc_auth_providers?: number[];
            event_retention?: string;
        };
        /** @description ScopeMapping Serializer */
        PatchedScopeMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name?: string;
            expression?: string;
            /** @description Scope name requested by the client */
            scope_name?: string;
            /** @description Description shown to the user when consenting. If left empty, the user won't be informed. */
            description?: string;
        };
        /** @description Settings Serializer */
        PatchedSettingsRequest: {
            /** @description Configure how authentik should show avatars for users. */
            avatars?: string;
            /** @description Enable the ability for users to change their name. */
            default_user_change_name?: boolean;
            /** @description Enable the ability for users to change their email address. */
            default_user_change_email?: boolean;
            /** @description Enable the ability for users to change their username. */
            default_user_change_username?: boolean;
            /** @description Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2). */
            event_retention?: string;
            /** @description Reputation cannot decrease lower than this value. Zero or negative. */
            reputation_lower_limit?: number;
            /** @description Reputation cannot increase higher than this value. Zero or positive. */
            reputation_upper_limit?: number;
            /** @description The option configures the footer links on the flow executor pages. */
            footer_links?: unknown;
            /** @description When enabled, all the events caused by a user will be deleted upon the user's deletion. */
            gdpr_compliance?: boolean;
            /** @description Globally enable/disable impersonation. */
            impersonation?: boolean;
            /** @description Require administrators to provide a reason for impersonating a user. */
            impersonation_require_reason?: boolean;
            /** @description Default token duration */
            default_token_duration?: string;
            /** @description Default token length */
            default_token_length?: number;
        };
        /** @description SourceStage Serializer */
        PatchedSourceStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** Format: uuid */
            source?: string;
            /** @description Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3) */
            resume_timeout?: string;
        };
        /** @description Serializer for static authenticator devices */
        PatchedStaticDeviceRequest: {
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description Serializer for totp authenticator devices */
        PatchedTOTPDeviceRequest: {
            /** @description The human-readable name of this device. */
            name?: string;
        };
        /** @description Token Serializer */
        PatchedTokenRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            identifier?: string;
            intent?: components["schemas"]["IntentEnum"];
            user?: number;
            description?: string;
            /** Format: date-time */
            expires?: string | null;
            expiring?: boolean;
        };
        /** @description Password Uniqueness Policy Serializer */
        PatchedUniquePasswordPolicyRequest: {
            name?: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            /** @description Number of passwords to check against. */
            num_historical_passwords?: number;
        };
        /** @description UserDeleteStage Serializer */
        PatchedUserDeleteStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
        };
        /** @description User source connection */
        PatchedUserKerberosSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description User source connection */
        PatchedUserLDAPSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description UserLoginStage Serializer */
        PatchedUserLoginStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            session_duration?: string;
            /** @description Terminate all other sessions of the user logging in. */
            terminate_other_sessions?: boolean;
            /** @description Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3) */
            remember_me_offset?: string;
            /** @description Bind sessions created by this stage to the configured network */
            network_binding?: components["schemas"]["NetworkBindingEnum"];
            /** @description Bind sessions created by this stage to the configured GeoIP location */
            geoip_binding?: components["schemas"]["GeoipBindingEnum"];
        };
        /** @description UserLogoutStage Serializer */
        PatchedUserLogoutStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
        };
        /** @description User source connection */
        PatchedUserOAuthSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
            access_token?: string | null;
        };
        /** @description User source connection */
        PatchedUserPlexSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
            plex_token?: string;
        };
        /** @description User Serializer */
        PatchedUserRequest: {
            username?: string;
            /** @description User's display name. */
            name?: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            groups?: string[];
            /**
             * Email address
             * Format: email
             */
            email?: string;
            attributes?: {
                [key: string]: unknown;
            };
            path?: string;
            type?: components["schemas"]["UserTypeEnum"];
        };
        /** @description User source connection */
        PatchedUserSAMLSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description User source connection */
        PatchedUserSourceConnectionRequest: {
            user?: number;
            /** Format: uuid */
            source?: string;
            identifier?: string;
        };
        /** @description UserWriteStage Serializer */
        PatchedUserWriteStageRequest: {
            name?: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            user_creation_mode?: components["schemas"]["UserCreationModeEnum"];
            /** @description When set, newly created users are inactive and cannot login. */
            create_users_as_inactive?: boolean;
            /**
             * Format: uuid
             * @description Optionally add newly created users to this group.
             */
            create_users_group?: string | null;
            user_type?: components["schemas"]["UserTypeEnum"];
            user_path_template?: string;
        };
        /** @description Serializer for WebAuthn authenticator devices */
        PatchedWebAuthnDeviceRequest: {
            name?: string;
        };
        /** @description Global permission */
        Permission: {
            readonly id: number;
            name: string;
            codename: string;
            /** Python model class name */
            readonly model: string;
            readonly app_label: string;
            /** @description Human-readable app label */
            readonly app_label_verbose: string;
            /** @description Human-readable model name */
            readonly model_verbose: string;
        };
        /** @description Request to assign a new permission */
        PermissionAssignRequest: {
            permissions: string[];
            model?: components["schemas"]["ModelEnum"];
            object_pk?: string;
        };
        /** @description Result from assigning permissions to a user/role */
        PermissionAssignResult: {
            id: string;
        };
        /** @description Global permission */
        PermissionRequest: {
            name: string;
            codename: string;
        };
        /** @description Challenge shown to the user in identification stage */
        PlexAuthenticationChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-source-plex";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            client_id: string;
            slug: string;
        };
        /** @description Pseudo class for plex response */
        PlexAuthenticationChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-source-plex";
        };
        /** @description Plex Source Serializer */
        PlexSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            readonly icon: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Client identifier used to talk to Plex. */
            client_id?: string;
            /** @description Which servers a user has to be a member of to be granted access. Empty list allows every server. */
            allowed_servers?: string[];
            /** @description Allow friends to authenticate, even if you don't share a server. */
            allow_friends?: boolean;
            /** @description Plex token used to check friends */
            plex_token: string;
        };
        /** @description PlexSourcePropertyMapping Serializer */
        PlexSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description PlexSourcePropertyMapping Serializer */
        PlexSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description Plex Source Serializer */
        PlexSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /** @description Client identifier used to talk to Plex. */
            client_id?: string;
            /** @description Which servers a user has to be a member of to be granted access. Empty list allows every server. */
            allowed_servers?: string[];
            /** @description Allow friends to authenticate, even if you don't share a server. */
            allow_friends?: boolean;
            /** @description Plex token used to check friends */
            plex_token: string;
        };
        /** @description Serializer to redeem a plex token */
        PlexTokenRedeemRequest: {
            plex_token: string;
        };
        /** @description Policy Serializer */
        Policy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
        };
        /** @description PolicyBinding Serializer */
        PolicyBinding: {
            /**
             * Policy binding uuid
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            policy?: string | null;
            /** Format: uuid */
            group?: string | null;
            user?: number | null;
            readonly policy_obj: components["schemas"]["Policy"];
            readonly group_obj: components["schemas"]["Group"];
            readonly user_obj: components["schemas"]["User"];
            /** Format: uuid */
            target: string;
            /** @description Negates the outcome of the policy. Messages are unaffected. */
            negate?: boolean;
            enabled?: boolean;
            order: number;
            /** @description Timeout after which Policy execution is terminated. */
            timeout?: number;
            /** @description Result if the Policy execution fails. */
            failure_result?: boolean;
        };
        /** @description PolicyBinding Serializer */
        PolicyBindingRequest: {
            /** Format: uuid */
            policy?: string | null;
            /** Format: uuid */
            group?: string | null;
            user?: number | null;
            /** Format: uuid */
            target: string;
            /** @description Negates the outcome of the policy. Messages are unaffected. */
            negate?: boolean;
            enabled?: boolean;
            order: number;
            /** @description Timeout after which Policy execution is terminated. */
            timeout?: number;
            /** @description Result if the Policy execution fails. */
            failure_result?: boolean;
        };
        /** @enum {string} */
        PolicyEngineMode: "all" | "any";
        /** @description Policy Serializer */
        PolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
        };
        /** @description Test policy execution for a user with context */
        PolicyTestRequest: {
            user: number;
            context?: {
                [key: string]: unknown;
            };
        };
        /** @description result of a policy test */
        PolicyTestResult: {
            passing: boolean;
            readonly messages: string[];
            readonly log_messages: components["schemas"]["LogEvent"][];
        };
        /** @description Prompt Serializer */
        Prompt: {
            /**
             * Prompt uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Name of the form field, also used to store the value */
            field_key: string;
            label: string;
            type: components["schemas"]["PromptTypeEnum"];
            required?: boolean;
            /** @description Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices. */
            placeholder?: string;
            /** @description Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices. */
            initial_value?: string;
            order?: number;
            promptstage_set?: components["schemas"]["Stage"][];
            sub_text?: string;
            placeholder_expression?: boolean;
            initial_value_expression?: boolean;
        };
        /** @description Initial challenge being sent, define fields */
        PromptChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-prompt";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            fields: components["schemas"]["StagePrompt"][];
        };
        /** @description Validate response, fields are dynamically created based
         *     on the stage */
        PromptChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-prompt";
        } & {
            [key: string]: unknown;
        };
        /** @description Prompt Serializer */
        PromptRequest: {
            name: string;
            /** @description Name of the form field, also used to store the value */
            field_key: string;
            label: string;
            type: components["schemas"]["PromptTypeEnum"];
            required?: boolean;
            /** @description Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices. */
            placeholder?: string;
            /** @description Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices. */
            initial_value?: string;
            order?: number;
            promptstage_set?: components["schemas"]["StageRequest"][];
            sub_text?: string;
            placeholder_expression?: boolean;
            initial_value_expression?: boolean;
        };
        /** @description PromptStage Serializer */
        PromptStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            fields: string[];
            validation_policies?: string[];
        };
        /** @description PromptStage Serializer */
        PromptStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            fields: string[];
            validation_policies?: string[];
        };
        /** @enum {string} */
        PromptTypeEnum: "text" | "text_area" | "text_read_only" | "text_area_read_only" | "username" | "email" | "password" | "number" | "checkbox" | "radio-button-group" | "dropdown" | "date" | "date-time" | "file" | "separator" | "hidden" | "static" | "ak-locale";
        /** @description PropertyMapping Serializer */
        PropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description Preview how the current user is mapped via the property mappings selected in a provider */
        PropertyMappingPreview: {
            readonly preview: {
                [key: string]: unknown;
            };
        };
        /** @description Test property mapping execution for a user/group with context */
        PropertyMappingTestRequest: {
            user?: number | null;
            context?: {
                [key: string]: unknown;
            };
            /** Format: uuid */
            group?: string | null;
        };
        /** @description Result of a Property-mapping test */
        PropertyMappingTestResult: {
            readonly result: string;
            readonly successful: boolean;
        };
        /** @enum {string} */
        ProtocolEnum: "rdp" | "vnc" | "ssh";
        /** @description Provider Serializer */
        Provider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @enum {string} */
        ProviderEnum: "twilio" | "generic";
        /** @enum {string} */
        ProviderModelEnum: "authentik_providers_google_workspace.googleworkspaceprovider" | "authentik_providers_ldap.ldapprovider" | "authentik_providers_microsoft_entra.microsoftentraprovider" | "authentik_providers_oauth2.oauth2provider" | "authentik_providers_proxy.proxyprovider" | "authentik_providers_rac.racprovider" | "authentik_providers_radius.radiusprovider" | "authentik_providers_saml.samlprovider" | "authentik_providers_scim.scimprovider" | "authentik_providers_ssf.ssfprovider";
        /** @description Provider Serializer */
        ProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
        };
        /** @enum {string} */
        ProviderTypeEnum: "apple" | "openidconnect" | "azuread" | "discord" | "facebook" | "github" | "gitlab" | "google" | "mailcow" | "okta" | "patreon" | "reddit" | "twitch" | "twitter";
        /** @enum {string} */
        ProxyMode: "proxy" | "forward_single" | "forward_domain";
        /** @description Proxy provider serializer for outposts */
        ProxyOutpostConfig: {
            /** ID */
            readonly pk: number;
            name: string;
            /** Format: uri */
            internal_host?: string;
            /** Format: uri */
            external_host: string;
            /** @description Validate SSL Certificates of upstream servers */
            internal_host_ssl_validation?: boolean;
            client_id?: string;
            client_secret?: string;
            readonly oidc_configuration: components["schemas"]["OpenIDConnectConfiguration"];
            cookie_secret?: string;
            /** Format: uuid */
            certificate?: string | null;
            /** @description Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
            skip_path_regex?: string;
            /**
             * Set HTTP-Basic Authentication
             * @description Set a custom HTTP-Basic Authentication header based on values from authentik.
             */
            basic_auth_enabled?: boolean;
            /**
             * HTTP-Basic Password Key
             * @description User/Group Attribute used for the password part of the HTTP-Basic Header.
             */
            basic_auth_password_attribute?: string;
            /**
             * HTTP-Basic Username Key
             * @description User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
             */
            basic_auth_user_attribute?: string;
            /** @description Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host. */
            mode?: components["schemas"]["ProxyMode"];
            cookie_domain?: string;
            /**
             * Format: double
             * @description Get token validity as second count
             */
            readonly access_token_validity: number | null;
            /** @description When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
            intercept_header_auth?: boolean;
            /** @description Get all the scope names the outpost should request,
             *     including custom-defined ones */
            readonly scopes_to_request: string[];
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
        };
        /** @description ProxyProvider Serializer */
        ProxyProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            readonly client_id: string;
            /** Format: uri */
            internal_host?: string;
            /** Format: uri */
            external_host: string;
            /** @description Validate SSL Certificates of upstream servers */
            internal_host_ssl_validation?: boolean;
            /** Format: uuid */
            certificate?: string | null;
            /** @description Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
            skip_path_regex?: string;
            /**
             * Set HTTP-Basic Authentication
             * @description Set a custom HTTP-Basic Authentication header based on values from authentik.
             */
            basic_auth_enabled?: boolean;
            /**
             * HTTP-Basic Password Key
             * @description User/Group Attribute used for the password part of the HTTP-Basic Header.
             */
            basic_auth_password_attribute?: string;
            /**
             * HTTP-Basic Username Key
             * @description User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
             */
            basic_auth_user_attribute?: string;
            /** @description Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host. */
            mode?: components["schemas"]["ProxyMode"];
            /** @description When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
            intercept_header_auth?: boolean;
            readonly redirect_uris: components["schemas"]["RedirectURI"][];
            cookie_domain?: string;
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
            readonly outpost_set: string[];
        };
        /** @description ProxyProvider Serializer */
        ProxyProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** Format: uri */
            internal_host?: string;
            /** Format: uri */
            external_host: string;
            /** @description Validate SSL Certificates of upstream servers */
            internal_host_ssl_validation?: boolean;
            /** Format: uuid */
            certificate?: string | null;
            /** @description Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
            skip_path_regex?: string;
            /**
             * Set HTTP-Basic Authentication
             * @description Set a custom HTTP-Basic Authentication header based on values from authentik.
             */
            basic_auth_enabled?: boolean;
            /**
             * HTTP-Basic Password Key
             * @description User/Group Attribute used for the password part of the HTTP-Basic Header.
             */
            basic_auth_password_attribute?: string;
            /**
             * HTTP-Basic Username Key
             * @description User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
             */
            basic_auth_user_attribute?: string;
            /** @description Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host. */
            mode?: components["schemas"]["ProxyMode"];
            /** @description When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
            intercept_header_auth?: boolean;
            cookie_domain?: string;
            /** Any JWT signed by the JWK of the selected source can be used to authenticate. */
            jwt_federation_sources?: string[];
            jwt_federation_providers?: number[];
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            access_token_validity?: string;
            /** @description Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            refresh_token_validity?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_proxy.proxyprovider";
        };
        /** @description RACPropertyMapping Serializer */
        RACPropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression?: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            static_settings: {
                [key: string]: unknown;
            };
        };
        /** @description RACPropertyMapping Serializer */
        RACPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression?: string;
            static_settings: {
                [key: string]: unknown;
            };
        };
        /** @description RACProvider Serializer */
        RACProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            settings?: unknown;
            readonly outpost_set: string[];
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            connection_expiry?: string;
            /** @description When set to true, connection tokens will be deleted upon disconnect. */
            delete_token_on_disconnect?: boolean;
        };
        /** @description RACProvider Serializer */
        RACProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            property_mappings?: string[];
            settings?: unknown;
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            connection_expiry?: string;
            /** @description When set to true, connection tokens will be deleted upon disconnect. */
            delete_token_on_disconnect?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_rac.racprovider";
        };
        /** @description Base serializer class which doesn't implement create/update methods */
        RadiusCheckAccess: {
            attributes?: string;
            access: components["schemas"]["PolicyTestResult"];
        };
        /** @description RadiusProvider Serializer */
        RadiusOutpostConfig: {
            /** ID */
            readonly pk: number;
            name: string;
            application_slug: string;
            auth_flow_slug: string;
            /** @description List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
            client_networks?: string;
            /** @description Shared secret between clients and server to hash packets. */
            shared_secret?: string;
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description RadiusProvider Serializer */
        RadiusProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
            client_networks?: string;
            /** @description Shared secret between clients and server to hash packets. */
            shared_secret?: string;
            readonly outpost_set: string[];
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
        };
        /** @description RadiusProviderPropertyMapping Serializer */
        RadiusProviderPropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description RadiusProviderPropertyMapping Serializer */
        RadiusProviderPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description RadiusProvider Serializer */
        RadiusProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
            client_networks?: string;
            /** @description Shared secret between clients and server to hash packets. */
            shared_secret?: string;
            /** @description When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
            mfa_support?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_radius.radiusprovider";
        };
        /** @description Challenge type to redirect the client */
        RedirectChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "xak-flow-redirect";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            to: string;
        };
        /** @description Redirect challenge response */
        RedirectChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "xak-flow-redirect";
            to: string;
        };
        /** @description RedirectStage Serializer */
        RedirectStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            keep_context?: boolean;
            mode: components["schemas"]["RedirectStageModeEnum"];
            target_static?: string;
            /** Format: uuid */
            target_flow?: string | null;
        };
        /** @enum {string} */
        RedirectStageModeEnum: "static" | "flow";
        /** @description RedirectStage Serializer */
        RedirectStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            keep_context?: boolean;
            mode: components["schemas"]["RedirectStageModeEnum"];
            target_static?: string;
            /** Format: uuid */
            target_flow?: string | null;
        };
        /** @description A single allowed redirect URI entry */
        RedirectURI: {
            matching_mode: components["schemas"]["MatchingModeEnum"];
            url: string;
        };
        /** @description A single allowed redirect URI entry */
        RedirectURIRequest: {
            matching_mode: components["schemas"]["MatchingModeEnum"];
            url: string;
        };
        /** @description Reputation Serializer */
        Reputation: {
            /**
             * Reputation uuid
             * Format: uuid
             */
            pk?: string;
            identifier: string;
            ip: string;
            ip_geo_data?: unknown;
            ip_asn_data?: unknown;
            /** Format: int64 */
            score?: number;
            /** Format: date-time */
            readonly updated: string;
        };
        /** @description Reputation Policy Serializer */
        ReputationPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            check_ip?: boolean;
            check_username?: boolean;
            threshold?: number;
        };
        /** @description Reputation Policy Serializer */
        ReputationPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            check_ip?: boolean;
            check_username?: boolean;
            threshold?: number;
        };
        /** @enum {string} */
        ResidentKeyRequirementEnum: "discouraged" | "preferred" | "required";
        /** @description Role serializer */
        Role: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
        };
        /** @description Roles assigned object permission serializer */
        RoleAssignedObjectPermission: {
            readonly role_pk: string;
            readonly name: string;
            permissions: components["schemas"]["RoleObjectPermission"][];
        };
        /** @description Role-bound object level permission */
        RoleObjectPermission: {
            readonly id: number;
            readonly codename: string;
            /** Python model class name */
            readonly model: string;
            readonly app_label: string;
            object_pk: string;
            readonly name: string;
        };
        /** @description Role serializer */
        RoleRequest: {
            name: string;
        };
        /** @description SAML Provider Metadata serializer */
        SAMLMetadata: {
            readonly metadata: string;
            readonly download_url: string;
        };
        /** @description SAMLPropertyMapping Serializer */
        SAMLPropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            saml_name: string;
            friendly_name?: string | null;
        };
        /** @description SAMLPropertyMapping Serializer */
        SAMLPropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            saml_name: string;
            friendly_name?: string | null;
        };
        /** @description SAMLProvider Serializer */
        SAMLProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_application_name: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** Format: uri */
            acs_url: string;
            /** @description Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added. */
            audience?: string;
            /** @description Also known as EntityID */
            issuer?: string;
            /** @description Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3). */
            assertion_valid_not_before?: string;
            /** @description Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            assertion_valid_not_on_or_after?: string;
            /** @description Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            session_valid_not_on_or_after?: string;
            /**
             * NameID Property Mapping
             * Format: uuid
             * @description Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
             */
            name_id_mapping?: string | null;
            /**
             * AuthnContextClassRef Property Mapping
             * Format: uuid
             * @description Configure how the AuthnContextClassRef value will be created. When left empty, the AuthnContextClassRef will be set based on which authentication methods the user used to authenticate.
             */
            authn_context_class_ref_mapping?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Service Provider.
             */
            signing_kp?: string | null;
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
            sign_assertion?: boolean;
            sign_response?: boolean;
            /**
             * Service Provider Binding
             * @description This determines how authentik sends the response back to the Service Provider.
             */
            sp_binding?: components["schemas"]["SpBindingEnum"];
            /** @description Default relay_state value for IDP-initiated logins */
            default_relay_state?: string;
            /** @description Get metadata download URL */
            readonly url_download_metadata: string;
            /** @description Get SSO Post URL */
            readonly url_sso_post: string;
            /** @description Get SSO Redirect URL */
            readonly url_sso_redirect: string;
            /** @description Get SSO IDP-Initiated URL */
            readonly url_sso_init: string;
            /** @description Get SLO POST URL */
            readonly url_slo_post: string;
            /** @description Get SLO redirect URL */
            readonly url_slo_redirect: string;
        };
        /** @description Import saml provider from XML Metadata */
        SAMLProviderImportRequest: {
            name: string;
            /** Format: uuid */
            authorization_flow: string;
            /** Format: uuid */
            invalidation_flow: string;
            /** Format: binary */
            file: string;
        };
        /** @description SAMLProvider Serializer */
        SAMLProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Flow used for authentication when the associated application is accessed by an un-authenticated user.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow used when authorizing this provider.
             */
            authorization_flow: string;
            /**
             * Format: uuid
             * @description Flow used ending the session from a provider.
             */
            invalidation_flow: string;
            property_mappings?: string[];
            /** Format: uri */
            acs_url: string;
            /** @description Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added. */
            audience?: string;
            /** @description Also known as EntityID */
            issuer?: string;
            /** @description Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3). */
            assertion_valid_not_before?: string;
            /** @description Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            assertion_valid_not_on_or_after?: string;
            /** @description Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
            session_valid_not_on_or_after?: string;
            /**
             * NameID Property Mapping
             * Format: uuid
             * @description Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
             */
            name_id_mapping?: string | null;
            /**
             * AuthnContextClassRef Property Mapping
             * Format: uuid
             * @description Configure how the AuthnContextClassRef value will be created. When left empty, the AuthnContextClassRef will be set based on which authentication methods the user used to authenticate.
             */
            authn_context_class_ref_mapping?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Service Provider.
             */
            signing_kp?: string | null;
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
            sign_assertion?: boolean;
            sign_response?: boolean;
            /**
             * Service Provider Binding
             * @description This determines how authentik sends the response back to the Service Provider.
             */
            sp_binding?: components["schemas"]["SpBindingEnum"];
            /** @description Default relay_state value for IDP-initiated logins */
            default_relay_state?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_saml.samlprovider";
        };
        /** @description SAMLSource Serializer */
        SAMLSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            readonly icon: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /**
             * Format: uuid
             * @description Flow used before authentication.
             */
            pre_authentication_flow: string;
            /** @description Also known as Entity ID. Defaults the Metadata URL. */
            issuer?: string;
            /**
             * Format: uri
             * @description URL that the initial Login request is sent to.
             */
            sso_url: string;
            /**
             * Format: uri
             * @description Optional URL if your IDP supports Single-Logout.
             */
            slo_url?: string | null;
            /** @description Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done. */
            allow_idp_initiated?: boolean;
            /** @description NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent. */
            name_id_policy?: components["schemas"]["NameIdPolicyEnum"];
            binding_type?: components["schemas"]["BindingTypeEnum"];
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Identity Provider.
             */
            signing_kp?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Delete temporary users after
             * @description Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
             */
            temporary_user_delete_after?: string;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
        };
        /** @description SAMLSourcePropertyMapping Serializer */
        SAMLSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description SAMLSourcePropertyMapping Serializer */
        SAMLSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description SAMLSource Serializer */
        SAMLSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
            /** @description How the source determines if an existing group should be used or a new group created. */
            group_matching_mode?: components["schemas"]["GroupMatchingModeEnum"];
            /**
             * Format: uuid
             * @description Flow used before authentication.
             */
            pre_authentication_flow: string;
            /** @description Also known as Entity ID. Defaults the Metadata URL. */
            issuer?: string;
            /**
             * Format: uri
             * @description URL that the initial Login request is sent to.
             */
            sso_url: string;
            /**
             * Format: uri
             * @description Optional URL if your IDP supports Single-Logout.
             */
            slo_url?: string | null;
            /** @description Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done. */
            allow_idp_initiated?: boolean;
            /** @description NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent. */
            name_id_policy?: components["schemas"]["NameIdPolicyEnum"];
            binding_type?: components["schemas"]["BindingTypeEnum"];
            /**
             * Verification Certificate
             * Format: uuid
             * @description When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
             */
            verification_kp?: string | null;
            /**
             * Signing Keypair
             * Format: uuid
             * @description Keypair used to sign outgoing Responses going to the Identity Provider.
             */
            signing_kp?: string | null;
            digest_algorithm?: components["schemas"]["DigestAlgorithmEnum"];
            signature_algorithm?: components["schemas"]["SignatureAlgorithmEnum"];
            /**
             * Delete temporary users after
             * @description Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
             */
            temporary_user_delete_after?: string;
            /**
             * Encryption Keypair
             * Format: uuid
             * @description When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
             */
            encryption_kp?: string | null;
        };
        /** @description SCIMMapping Serializer */
        SCIMMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description SCIMMapping Serializer */
        SCIMMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description SCIMProvider Serializer */
        SCIMProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Internal application name, used in URLs. */
            readonly assigned_backchannel_application_slug: string;
            /** @description Application's display Name. */
            readonly assigned_backchannel_application_name: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Base URL to SCIM requests, usually ends in /v2 */
            url: string;
            verify_certificates?: boolean;
            /** @description Authentication token */
            token: string;
            /**
             * SCIM Compatibility Mode
             * @description Alter authentik behavior for vendor-specific SCIM implementations.
             */
            compatibility_mode?: components["schemas"]["CompatibilityModeEnum"];
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
        };
        /** @description SCIMProviderGroup Serializer */
        SCIMProviderGroup: {
            /** Format: uuid */
            readonly id: string;
            scim_id: string;
            /** Format: uuid */
            group: string;
            readonly group_obj: components["schemas"]["UserGroup"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description SCIMProviderGroup Serializer */
        SCIMProviderGroupRequest: {
            scim_id: string;
            /** Format: uuid */
            group: string;
            provider: number;
        };
        /** @description SCIMProvider Serializer */
        SCIMProviderRequest: {
            name: string;
            property_mappings?: string[];
            /** @description Property mappings used for group creation/updating. */
            property_mappings_group?: string[];
            /** @description Base URL to SCIM requests, usually ends in /v2 */
            url: string;
            verify_certificates?: boolean;
            /** @description Authentication token */
            token: string;
            /**
             * SCIM Compatibility Mode
             * @description Alter authentik behavior for vendor-specific SCIM implementations.
             */
            compatibility_mode?: components["schemas"]["CompatibilityModeEnum"];
            exclude_users_service_account?: boolean;
            /** Format: uuid */
            filter_group?: string | null;
            /** @description When enabled, provider will not modify or create objects in the remote system. */
            dry_run?: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_scim.scimprovider";
        };
        /** @description SCIMProviderUser Serializer */
        SCIMProviderUser: {
            /** Format: uuid */
            readonly id: string;
            scim_id: string;
            user: number;
            readonly user_obj: components["schemas"]["GroupMember"];
            provider: number;
            readonly attributes: unknown;
        };
        /** @description SCIMProviderUser Serializer */
        SCIMProviderUserRequest: {
            scim_id: string;
            user: number;
            provider: number;
        };
        /** @description SCIMSource Serializer */
        SCIMSource: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            /** @description Get Root URL */
            readonly root_url: string;
            readonly token_obj: components["schemas"]["Token"];
        };
        /** @description SCIMSourceGroup Serializer */
        SCIMSourceGroup: {
            id: string;
            /** Format: uuid */
            group: string;
            readonly group_obj: components["schemas"]["UserGroup"];
            /** Format: uuid */
            source: string;
            attributes?: unknown;
        };
        /** @description SCIMSourceGroup Serializer */
        SCIMSourceGroupRequest: {
            id: string;
            /** Format: uuid */
            group: string;
            /** Format: uuid */
            source: string;
            attributes?: unknown;
        };
        /** @description SCIMSourcePropertyMapping Serializer */
        SCIMSourcePropertyMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description SCIMSourcePropertyMapping Serializer */
        SCIMSourcePropertyMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
        };
        /** @description SCIMSource Serializer */
        SCIMSourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            user_path_template?: string;
        };
        /** @description SCIMSourceUser Serializer */
        SCIMSourceUser: {
            id: string;
            user: number;
            readonly user_obj: components["schemas"]["GroupMember"];
            /** Format: uuid */
            source: string;
            attributes?: unknown;
        };
        /** @description SCIMSourceUser Serializer */
        SCIMSourceUserRequest: {
            id: string;
            user: number;
            /** Format: uuid */
            source: string;
            attributes?: unknown;
        };
        /** @description Serializer for sms authenticator devices */
        SMSDevice: {
            /** @description The human-readable name of this device. */
            name: string;
            /** ID */
            readonly pk: number;
            readonly phone_number: string;
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description Serializer for sms authenticator devices */
        SMSDeviceRequest: {
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description SSFProvider Serializer */
        SSFProvider: {
            /** ID */
            readonly pk: number;
            name: string;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /**
             * Format: uuid
             * @description Key used to sign the SSF Events.
             */
            signing_key: string;
            readonly token_obj: components["schemas"]["Token"];
            oidc_auth_providers?: number[];
            readonly ssf_url: string | null;
            event_retention?: string;
        };
        /** @description SSFProvider Serializer */
        SSFProviderRequest: {
            name: string;
            /**
             * Format: uuid
             * @description Key used to sign the SSF Events.
             */
            signing_key: string;
            oidc_auth_providers?: number[];
            event_retention?: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider_model: "authentik_providers_ssf.ssfprovider";
        };
        /** @description SSFStream Serializer */
        SSFStream: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            provider: number;
            readonly provider_obj: components["schemas"]["SSFProvider"];
            delivery_method: components["schemas"]["DeliveryMethodEnum"];
            endpoint_url?: string | null;
            events_requested?: components["schemas"]["EventsRequestedEnum"][];
            format: string;
            aud?: string[];
            iss: string;
        };
        /** @description ScopeMapping Serializer */
        ScopeMapping: {
            /**
             * Pm uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Get object's component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Scope name requested by the client */
            scope_name: string;
            /** @description Description shown to the user when consenting. If left empty, the user won't be informed. */
            description?: string;
        };
        /** @description ScopeMapping Serializer */
        ScopeMappingRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            name: string;
            expression: string;
            /** @description Scope name requested by the client */
            scope_name: string;
            /** @description Description shown to the user when consenting. If left empty, the user won't be informed. */
            description?: string;
        };
        /** @description Serializer for stages which can be selected by users */
        SelectableStage: {
            /** Format: uuid */
            pk: string;
            name: string;
            verbose_name: string;
            meta_model_name: string;
        };
        /** @description ServiceConnection Serializer */
        ServiceConnection: {
            /**
             * Uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
            /** @description Return component used to edit this object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
        };
        /** @description ServiceConnection Serializer */
        ServiceConnectionRequest: {
            name: string;
            /** @description If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
            local?: boolean;
        };
        /** @description Serializer for Service connection state */
        ServiceConnectionState: {
            readonly healthy: boolean;
            readonly version: string;
        };
        /** @description Challenge for ending a session */
        SessionEndChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-session-end";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
            application_name?: string;
            application_launch_url?: string;
            invalidation_flow_url?: string;
            brand_name: string;
        };
        /** @description Response for the /user/me endpoint, returns the currently active user (as `user` property)
         *     and, if this user is being impersonated, the original user in the `original` property. */
        SessionUser: {
            user: components["schemas"]["UserSelf"];
            original?: components["schemas"]["UserSelf"];
        };
        /** @description Settings Serializer */
        Settings: {
            /** @description Configure how authentik should show avatars for users. */
            avatars?: string;
            /** @description Enable the ability for users to change their name. */
            default_user_change_name?: boolean;
            /** @description Enable the ability for users to change their email address. */
            default_user_change_email?: boolean;
            /** @description Enable the ability for users to change their username. */
            default_user_change_username?: boolean;
            /** @description Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2). */
            event_retention?: string;
            /** @description Reputation cannot decrease lower than this value. Zero or negative. */
            reputation_lower_limit?: number;
            /** @description Reputation cannot increase higher than this value. Zero or positive. */
            reputation_upper_limit?: number;
            /** @description The option configures the footer links on the flow executor pages. */
            footer_links?: unknown;
            /** @description When enabled, all the events caused by a user will be deleted upon the user's deletion. */
            gdpr_compliance?: boolean;
            /** @description Globally enable/disable impersonation. */
            impersonation?: boolean;
            /** @description Require administrators to provide a reason for impersonating a user. */
            impersonation_require_reason?: boolean;
            /** @description Default token duration */
            default_token_duration?: string;
            /** @description Default token length */
            default_token_length?: number;
        };
        /** @description Settings Serializer */
        SettingsRequest: {
            /** @description Configure how authentik should show avatars for users. */
            avatars?: string;
            /** @description Enable the ability for users to change their name. */
            default_user_change_name?: boolean;
            /** @description Enable the ability for users to change their email address. */
            default_user_change_email?: boolean;
            /** @description Enable the ability for users to change their username. */
            default_user_change_username?: boolean;
            /** @description Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2). */
            event_retention?: string;
            /** @description Reputation cannot decrease lower than this value. Zero or negative. */
            reputation_lower_limit?: number;
            /** @description Reputation cannot increase higher than this value. Zero or positive. */
            reputation_upper_limit?: number;
            /** @description The option configures the footer links on the flow executor pages. */
            footer_links?: unknown;
            /** @description When enabled, all the events caused by a user will be deleted upon the user's deletion. */
            gdpr_compliance?: boolean;
            /** @description Globally enable/disable impersonation. */
            impersonation?: boolean;
            /** @description Require administrators to provide a reason for impersonating a user. */
            impersonation_require_reason?: boolean;
            /** @description Default token duration */
            default_token_duration?: string;
            /** @description Default token length */
            default_token_length?: number;
        };
        /** @enum {string} */
        SeverityEnum: "notice" | "warning" | "alert";
        /** @description challenge type to render HTML as-is */
        ShellChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "xak-flow-shell";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            body: string;
        };
        /** @enum {string} */
        SignatureAlgorithmEnum: "http://www.w3.org/2000/09/xmldsig#rsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512" | "http://www.w3.org/2000/09/xmldsig#dsa-sha1";
        /** @description Source Serializer */
        Source: {
            /**
             * Pbm uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            readonly managed: string | null;
            user_path_template?: string;
            /** @description Get the URL to the Icon. If the name is /static or
             *     starts with http it is returned as-is */
            readonly icon: string | null;
        };
        /** @description Source Serializer */
        SourceRequest: {
            /** @description Source's display Name. */
            name: string;
            /** @description Internal source name, used in URLs. */
            slug: string;
            enabled?: boolean;
            /**
             * Format: uuid
             * @description Flow to use when authenticating existing users.
             */
            authentication_flow?: string | null;
            /**
             * Format: uuid
             * @description Flow to use when enrolling new users.
             */
            enrollment_flow?: string | null;
            user_property_mappings?: string[];
            group_property_mappings?: string[];
            policy_engine_mode?: components["schemas"]["PolicyEngineMode"];
            /** @description How the source determines if an existing user should be authenticated or a new user enrolled. */
            user_matching_mode?: components["schemas"]["UserMatchingModeEnum"];
            user_path_template?: string;
        };
        /** @description SourceStage Serializer */
        SourceStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** Format: uuid */
            source: string;
            /** @description Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3) */
            resume_timeout?: string;
        };
        /** @description SourceStage Serializer */
        SourceStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** Format: uuid */
            source: string;
            /** @description Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3) */
            resume_timeout?: string;
        };
        /** @description Serializer for SourceType */
        SourceType: {
            name: string;
            verbose_name: string;
            urls_customizable: boolean;
            readonly request_token_url: string | null;
            readonly authorization_url: string | null;
            readonly access_token_url: string | null;
            readonly profile_url: string | null;
            readonly oidc_well_known_url: string | null;
            readonly oidc_jwks_url: string | null;
        };
        /** @enum {string} */
        SpBindingEnum: "redirect" | "post";
        /** @description Stage Serializer */
        Stage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
        };
        /** @description Serializer for a single Prompt field */
        StagePrompt: {
            field_key: string;
            label: string;
            type: components["schemas"]["PromptTypeEnum"];
            required: boolean;
            placeholder: string;
            initial_value: string;
            order: number;
            sub_text: string;
            choices: string[] | null;
        };
        /** @description Stage Serializer */
        StageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
        };
        /** @description Serializer for static authenticator devices */
        StaticDevice: {
            /** @description The human-readable name of this device. */
            name: string;
            readonly token_set: components["schemas"]["StaticDeviceToken"][];
            /** ID */
            readonly pk: number;
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description Serializer for static authenticator devices */
        StaticDeviceRequest: {
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description Serializer for static device's tokens */
        StaticDeviceToken: {
            token: string;
        };
        /** @description Serializer for static device's tokens */
        StaticDeviceTokenRequest: {
            token: string;
        };
        /** @enum {string} */
        SubModeEnum: "hashed_user_id" | "user_id" | "user_uuid" | "user_username" | "user_email" | "user_upn";
        /** @enum {string} */
        SyncObjectModelEnum: "authentik.core.models.User" | "authentik.core.models.Group";
        /** @description Sync object serializer */
        SyncObjectRequest: {
            sync_object_model: components["schemas"]["SyncObjectModelEnum"];
            sync_object_id: string;
            /** @default false */
            override_dry_run: boolean;
        };
        /** @description Result of a single object sync */
        SyncObjectResult: {
            readonly messages: components["schemas"]["LogEvent"][];
        };
        /** @description Provider sync status */
        SyncStatus: {
            readonly is_running: boolean;
            readonly tasks: components["schemas"]["SystemTask"][];
        };
        /** @description Get system information. */
        SystemInfo: {
            /** @description Get HTTP Request headers */
            readonly http_headers: {
                [key: string]: string;
            };
            /** @description Get HTTP host */
            readonly http_host: string;
            /** @description Get HTTP Secure flag */
            readonly http_is_secure: boolean;
            /** @description Get versions */
            readonly runtime: {
                python_version: string;
                environment: string;
                architecture: string;
                platform: string;
                uname: string;
                openssl_version: string;
                openssl_fips_enabled: boolean | null;
                authentik_version: string;
            };
            /** @description Currently active brand */
            readonly brand: string;
            /**
             * Format: date-time
             * @description Current server time
             */
            readonly server_time: string;
            /** @description Whether the embedded outpost is disabled */
            readonly embedded_outpost_disabled: boolean;
            /** @description Get the FQDN configured on the embedded outpost */
            readonly embedded_outpost_host: string;
        };
        /** @description Serialize TaskInfo and TaskResult */
        SystemTask: {
            /** Format: uuid */
            readonly uuid: string;
            name: string;
            /** @description Get full name with UID */
            readonly full_name: string;
            uid?: string;
            description: string;
            /** Format: date-time */
            readonly start_timestamp: string;
            /** Format: date-time */
            readonly finish_timestamp: string;
            /** Format: double */
            readonly duration: number;
            status: components["schemas"]["SystemTaskStatusEnum"];
            messages: components["schemas"]["LogEvent"][];
            /** Format: date-time */
            expires?: string | null;
            expiring?: boolean;
        };
        /** @enum {string} */
        SystemTaskStatusEnum: "unknown" | "successful" | "warning" | "error";
        /** @description Serializer for totp authenticator devices */
        TOTPDevice: {
            /** @description The human-readable name of this device. */
            name: string;
            /** ID */
            readonly pk: number;
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description Serializer for totp authenticator devices */
        TOTPDeviceRequest: {
            /** @description The human-readable name of this device. */
            name: string;
        };
        /** @description Token Serializer */
        Token: {
            /**
             * Token uuid
             * Format: uuid
             */
            readonly pk: string;
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            identifier: string;
            intent?: components["schemas"]["IntentEnum"];
            user?: number;
            readonly user_obj: components["schemas"]["User"];
            description?: string;
            /** Format: date-time */
            expires?: string | null;
            expiring?: boolean;
        };
        /** @description Serializer for BaseGrantModel and RefreshToken */
        TokenModel: {
            /** ID */
            readonly pk: number;
            provider: components["schemas"]["OAuth2Provider"];
            user: components["schemas"]["User"];
            /** @description Check if token is expired yet. */
            readonly is_expired: boolean;
            /** Format: date-time */
            expires?: string | null;
            scope: string[];
            /** @description Get the token's id_token as JSON String */
            readonly id_token: string;
            revoked?: boolean;
        };
        /** @description Token Serializer */
        TokenRequest: {
            /**
             * Managed by authentik
             * @description Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
             */
            managed?: string | null;
            identifier: string;
            intent?: components["schemas"]["IntentEnum"];
            user?: number;
            description?: string;
            /** Format: date-time */
            expires?: string | null;
            expiring?: boolean;
        };
        TokenSetKeyRequest: {
            key: string;
        };
        /** @description Show token's current key */
        TokenView: {
            readonly key: string;
        };
        /** @description Serializer for creating a provider and an application in one transaction */
        TransactionApplicationRequest: {
            app: components["schemas"]["ApplicationRequest"];
            provider_model: components["schemas"]["ProviderModelEnum"];
            provider: components["schemas"]["modelRequest"];
            policy_bindings?: components["schemas"]["TransactionPolicyBindingRequest"][];
        };
        /** @description Transactional creation response */
        TransactionApplicationResponse: {
            applied: boolean;
            logs: string[];
        };
        /** @description PolicyBindingSerializer which does not require target as target is set implicitly */
        TransactionPolicyBindingRequest: {
            /** Format: uuid */
            policy?: string | null;
            /** Format: uuid */
            group?: string | null;
            user?: number | null;
            /** @description Negates the outcome of the policy. Messages are unaffected. */
            negate?: boolean;
            enabled?: boolean;
            order: number;
            /** @description Timeout after which Policy execution is terminated. */
            timeout?: number;
            /** @description Result if the Policy execution fails. */
            failure_result?: boolean;
        };
        /** @description Types of an object that can be created */
        TypeCreate: {
            name: string;
            description: string;
            component: string;
            model_name: string;
            icon_url?: string;
            /** @default false */
            requires_enterprise: boolean;
        };
        /** @enum {string} */
        UiThemeEnum: "automatic" | "light" | "dark";
        /** @description Password Uniqueness Policy Serializer */
        UniquePasswordPolicy: {
            /**
             * Policy uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Get object component so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            /** @description Return objects policy is bound to */
            readonly bound_to: number;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            /** @description Number of passwords to check against. */
            num_historical_passwords?: number;
        };
        /** @description Password Uniqueness Policy Serializer */
        UniquePasswordPolicyRequest: {
            name: string;
            /** @description When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
            execution_logging?: boolean;
            /** @description Field key to check, field keys defined in Prompt stages are available. */
            password_field?: string;
            /** @description Number of passwords to check against. */
            num_historical_passwords?: number;
        };
        /** @description A list of all objects referencing the queried object */
        UsedBy: {
            app: string;
            model_name: string;
            pk: string;
            name: string;
            action: components["schemas"]["UsedByActionEnum"];
        };
        /** @enum {string} */
        UsedByActionEnum: "cascade" | "cascade_many" | "set_null" | "set_default";
        /** @description User Serializer */
        User: {
            /** ID */
            readonly pk: number;
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            /** Format: date-time */
            readonly date_joined: string;
            readonly is_superuser: boolean;
            groups?: string[];
            readonly groups_obj: components["schemas"]["UserGroup"][] | null;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            /** @description User's avatar, either a http/https URL or a data URI */
            readonly avatar: string;
            attributes?: {
                [key: string]: unknown;
            };
            readonly uid: string;
            path?: string;
            type?: components["schemas"]["UserTypeEnum"];
            /** Format: uuid */
            readonly uuid: string;
            /** Format: date-time */
            readonly password_change_date: string;
        };
        /** @description Account adding/removing operations */
        UserAccountRequest: {
            pk: number;
        };
        /** @description Users assigned object permission serializer */
        UserAssignedObjectPermission: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            /**
             * Email address
             * Format: email
             */
            email?: string;
            attributes?: {
                [key: string]: unknown;
            };
            readonly uid: string;
            permissions: components["schemas"]["UserObjectPermission"][];
            is_superuser: boolean;
        };
        /** @enum {string} */
        UserAttributeEnum: "username" | "email";
        /** @description UserConsent Serializer */
        UserConsent: {
            /** ID */
            readonly pk: number;
            /** Format: date-time */
            expires?: string | null;
            expiring?: boolean;
            user: components["schemas"]["User"];
            application: components["schemas"]["Application"];
            /** @default  */
            permissions: string;
        };
        /** @enum {string} */
        UserCreationModeEnum: "never_create" | "create_when_required" | "always_create";
        /** @description UserDeleteStage Serializer */
        UserDeleteStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
        };
        /** @description UserDeleteStage Serializer */
        UserDeleteStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
        };
        /** @enum {string} */
        UserFieldsEnum: "email" | "username" | "upn";
        /** @description Simplified Group Serializer for user's groups */
        UserGroup: {
            /**
             * Group uuid
             * Format: uuid
             */
            readonly pk: string;
            /** @description Get a numerical, int32 ID for the group */
            readonly num_pk: number;
            name: string;
            /** @description Users added to this group will be superusers. */
            is_superuser?: boolean;
            /** Format: uuid */
            parent?: string | null;
            readonly parent_name: string | null;
            attributes?: {
                [key: string]: unknown;
            };
        };
        /** @description Simplified Group Serializer for user's groups */
        UserGroupRequest: {
            name: string;
            /** @description Users added to this group will be superusers. */
            is_superuser?: boolean;
            /** Format: uuid */
            parent?: string | null;
            attributes?: {
                [key: string]: unknown;
            };
        };
        /** @description User source connection */
        UserKerberosSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserKerberosSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description User source connection */
        UserLDAPSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserLDAPSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description Empty challenge */
        UserLoginChallenge: {
            flow_info?: components["schemas"]["ContextualFlowInfo"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-user-login";
            response_errors?: {
                [key: string]: components["schemas"]["ErrorDetail"][];
            };
            pending_user: string;
            pending_user_avatar: string;
        };
        /** @description User login challenge */
        UserLoginChallengeResponseRequest: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            component: "ak-stage-user-login";
            remember_me: boolean;
        };
        /** @description UserLoginStage Serializer */
        UserLoginStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            session_duration?: string;
            /** @description Terminate all other sessions of the user logging in. */
            terminate_other_sessions?: boolean;
            /** @description Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3) */
            remember_me_offset?: string;
            /** @description Bind sessions created by this stage to the configured network */
            network_binding?: components["schemas"]["NetworkBindingEnum"];
            /** @description Bind sessions created by this stage to the configured GeoIP location */
            geoip_binding?: components["schemas"]["GeoipBindingEnum"];
        };
        /** @description UserLoginStage Serializer */
        UserLoginStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            /** @description Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
            session_duration?: string;
            /** @description Terminate all other sessions of the user logging in. */
            terminate_other_sessions?: boolean;
            /** @description Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3) */
            remember_me_offset?: string;
            /** @description Bind sessions created by this stage to the configured network */
            network_binding?: components["schemas"]["NetworkBindingEnum"];
            /** @description Bind sessions created by this stage to the configured GeoIP location */
            geoip_binding?: components["schemas"]["GeoipBindingEnum"];
        };
        /** @description UserLogoutStage Serializer */
        UserLogoutStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
        };
        /** @description UserLogoutStage Serializer */
        UserLogoutStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
        };
        /** @enum {string} */
        UserMatchingModeEnum: "identifier" | "email_link" | "email_deny" | "username_link" | "username_deny";
        /** @description User Metrics */
        UserMetrics: {
            readonly logins: components["schemas"]["Coordinate"][];
            readonly logins_failed: components["schemas"]["Coordinate"][];
            readonly authorizations: components["schemas"]["Coordinate"][];
        };
        /** @description User source connection */
        UserOAuthSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserOAuthSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
            access_token?: string | null;
        };
        /** @description User-bound object level permission */
        UserObjectPermission: {
            readonly id: number;
            readonly codename: string;
            /** Python model class name */
            readonly model: string;
            readonly app_label: string;
            object_pk: string;
            readonly name: string;
        };
        UserPasswordSetRequest: {
            password: string;
        };
        UserPath: {
            readonly paths: string[];
        };
        /** @description User source connection */
        UserPlexSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserPlexSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
            plex_token: string;
        };
        /** @description User Serializer */
        UserRequest: {
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /** Format: date-time */
            last_login?: string | null;
            groups?: string[];
            /**
             * Email address
             * Format: email
             */
            email?: string;
            attributes?: {
                [key: string]: unknown;
            };
            path?: string;
            type?: components["schemas"]["UserTypeEnum"];
        };
        /** @description User source connection */
        UserSAMLSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserSAMLSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @description User Serializer for information a user can retrieve about themselves */
        UserSelf: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** @description User's display name. */
            name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            readonly is_active: boolean;
            readonly is_superuser: boolean;
            readonly groups: components["schemas"]["UserSelfGroups"][];
            /**
             * Email address
             * Format: email
             */
            email?: string;
            /** @description User's avatar, either a http/https URL or a data URI */
            readonly avatar: string;
            readonly uid: string;
            /** @description Get user settings with brand and group settings applied */
            readonly settings: {
                [key: string]: unknown;
            };
            type?: components["schemas"]["UserTypeEnum"];
            /** @description Get all system permissions assigned to the user */
            readonly system_permissions: string[];
        };
        UserSelfGroups: {
            readonly name: string;
            readonly pk: string;
        };
        UserServiceAccountRequest: {
            name: string;
            /** @default false */
            create_group: boolean;
            /** @default true */
            expiring: boolean;
            /**
             * Format: date-time
             * @description If not provided, valid for 360 days
             */
            expires?: string;
        };
        UserServiceAccountResponse: {
            username: string;
            token: string;
            user_uid: string;
            user_pk: number;
            group_pk?: string;
        };
        /** @description Serializer for User settings for stages and sources */
        UserSetting: {
            object_uid: string;
            component: string;
            title: string;
            configure_url?: string;
            icon_url?: string;
        };
        /** @description User source connection */
        UserSourceConnection: {
            /** ID */
            readonly pk: number;
            user: number;
            /** Format: uuid */
            source: string;
            readonly source_obj: components["schemas"]["Source"];
            identifier: string;
            /** Format: date-time */
            readonly created: string;
            /** Format: date-time */
            readonly last_updated: string;
        };
        /** @description User source connection */
        UserSourceConnectionRequest: {
            user: number;
            /** Format: uuid */
            source: string;
            identifier: string;
        };
        /** @enum {string} */
        UserTypeEnum: "internal" | "external" | "service_account" | "internal_service_account";
        /** @enum {string} */
        UserVerificationEnum: "required" | "preferred" | "discouraged";
        /** @description UserWriteStage Serializer */
        UserWriteStage: {
            /**
             * Stage uuid
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            /** @description Get object type so that we know how to edit the object */
            readonly component: string;
            /** @description Return object's verbose_name */
            readonly verbose_name: string;
            /** @description Return object's plural verbose_name */
            readonly verbose_name_plural: string;
            /** @description Return internal model name */
            readonly meta_model_name: string;
            flow_set?: components["schemas"]["FlowSet"][];
            user_creation_mode?: components["schemas"]["UserCreationModeEnum"];
            /** @description When set, newly created users are inactive and cannot login. */
            create_users_as_inactive?: boolean;
            /**
             * Format: uuid
             * @description Optionally add newly created users to this group.
             */
            create_users_group?: string | null;
            user_type?: components["schemas"]["UserTypeEnum"];
            user_path_template?: string;
        };
        /** @description UserWriteStage Serializer */
        UserWriteStageRequest: {
            name: string;
            flow_set?: components["schemas"]["FlowSetRequest"][];
            user_creation_mode?: components["schemas"]["UserCreationModeEnum"];
            /** @description When set, newly created users are inactive and cannot login. */
            create_users_as_inactive?: boolean;
            /**
             * Format: uuid
             * @description Optionally add newly created users to this group.
             */
            create_users_group?: string | null;
            user_type?: components["schemas"]["UserTypeEnum"];
            user_path_template?: string;
        };
        /** @description Validation Error */
        ValidationError: {
            non_field_errors?: string[];
            code?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Get running and latest version. */
        Version: {
            /** @description Get current version */
            readonly version_current: string;
            /** @description Get latest version from cache */
            readonly version_latest: string;
            /** @description Check if latest version is valid */
            readonly version_latest_valid: boolean;
            /** @description Get build hash, if version is not latest or released */
            readonly build_hash: string;
            /** @description Check if we're running the latest version */
            readonly outdated: boolean;
            /** @description Check if any outpost is outdated/has a version mismatch */
            readonly outpost_outdated: boolean;
        };
        /** @description VersionHistory Serializer */
        VersionHistory: {
            readonly id: number;
            /** Format: date-time */
            timestamp: string;
            version: string;
            build: string;
        };
        /** @description Serializer for WebAuthn authenticator devices */
        WebAuthnDevice: {
            /** ID */
            readonly pk: number;
            name: string;
            /** Format: date-time */
            readonly created_on: string;
            readonly device_type: components["schemas"]["WebAuthnDeviceType"] | null;
            readonly aaguid: string;
            readonly user: components["schemas"]["GroupMember"];
        };
        /** @description Serializer for WebAuthn authenticator devices */
        WebAuthnDeviceRequest: {
            name: string;
        };
        /** @description WebAuthnDeviceType Serializer */
        WebAuthnDeviceType: {
            /** Format: uuid */
            aaguid: string;
            description: string;
        };
        /** @description WebAuthnDeviceType Serializer */
        WebAuthnDeviceTypeRequest: {
            /** Format: uuid */
            aaguid: string;
            description: string;
        };
        Worker: {
            worker_id: string;
            version: string;
            version_matching: boolean;
        };
        modelRequest: components["schemas"]["GoogleWorkspaceProviderRequest"] | components["schemas"]["LDAPProviderRequest"] | components["schemas"]["MicrosoftEntraProviderRequest"] | components["schemas"]["OAuth2ProviderRequest"] | components["schemas"]["ProxyProviderRequest"] | components["schemas"]["RACProviderRequest"] | components["schemas"]["RadiusProviderRequest"] | components["schemas"]["SAMLProviderRequest"] | components["schemas"]["SCIMProviderRequest"] | components["schemas"]["SSFProviderRequest"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    admin_apps_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_metrics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginMetrics"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_models_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_settings_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_settings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSettingsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_system_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemInfo"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_system_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemInfo"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_version_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Version"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_version_history_list: {
        parameters: {
            query?: {
                build?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                version?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionHistory"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_version_history_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Version history. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionHistory"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    admin_workers_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Worker"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_all_list: {
        parameters: {
            query?: {
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDuoDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DuoDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DuoDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_duo_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDuoDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEmailDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_email_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEmailDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEndpointDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndpointDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndpointDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndpointDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndpointDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndpointDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_endpoint_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEndpointDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndpointDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSMSDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMSDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMSDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_sms_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSMSDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStaticDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StaticDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StaticDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_static_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStaticDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTOTPDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TOTPDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TOTPDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_totp_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTOTPDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWebAuthnDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebAuthnDeviceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebAuthnDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_admin_webauthn_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWebAuthnDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_all_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDuoDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DuoDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDuoDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_duo_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Duo Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEmailDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEmailDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_email_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Email Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_endpoint_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEndpointDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_endpoint_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndpointDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_endpoint_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Device. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSMSDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMSDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSMSDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMSDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_sms_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SMS Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStaticDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StaticDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStaticDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaticDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_static_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Static Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTOTPDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TOTPDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTOTPDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_totp_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this TOTP Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWebAuthnDeviceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebAuthnDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWebAuthnDeviceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDevice"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    authenticators_webauthn_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this WebAuthn Device. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_list: {
        parameters: {
            query?: {
                app?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedApplicationEntitlementList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationEntitlementRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationEntitlement"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Application Entitlement. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationEntitlement"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Application Entitlement. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationEntitlementRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationEntitlement"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Application Entitlement. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Application Entitlement. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedApplicationEntitlementRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationEntitlement"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_application_entitlements_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Application Entitlement. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_list: {
        parameters: {
            query?: {
                for_user?: number;
                group?: string;
                meta_description?: string;
                meta_launch_url?: string;
                meta_publisher?: string;
                name?: string;
                only_with_launch_url?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                slug?: string;
                superuser_full_list?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedApplicationList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Application"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Application"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Application"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedApplicationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Application"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_check_access_retrieve: {
        parameters: {
            query?: {
                for_user?: number;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTestResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_metrics_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Coordinate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_set_icon_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_set_icon_url_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilePathRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_applications_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_authenticated_sessions_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                session__last_ip?: string;
                session__last_user_agent?: string;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatedSessionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_authenticated_sessions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatedSession"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_authenticated_sessions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_authenticated_sessions_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_list: {
        parameters: {
            query?: {
                brand_uuid?: string;
                branding_default_flow_background?: string;
                branding_favicon?: string;
                branding_logo?: string;
                branding_title?: string;
                client_certificates?: string[];
                default?: boolean;
                domain?: string;
                flow_authentication?: string;
                flow_device_code?: string;
                flow_invalidation?: string;
                flow_recovery?: string;
                flow_unenrollment?: string;
                flow_user_settings?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                web_certificate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBrandList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Brand. */
                brand_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Brand. */
                brand_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BrandRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Brand. */
                brand_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Brand. */
                brand_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBrandRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Brand"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Brand. */
                brand_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_brands_current_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentBrand"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_list: {
        parameters: {
            query?: {
                /** @description Attributes */
                attributes?: string;
                include_users?: boolean;
                is_superuser?: boolean;
                members_by_pk?: number[];
                /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
                members_by_username?: string[];
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_retrieve: {
        parameters: {
            query?: {
                include_users?: boolean;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_groups_add_user_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserAccountRequest"];
            };
        };
        responses: {
            /** @description User added */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    core_groups_remove_user_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserAccountRequest"];
            };
        };
        responses: {
            /** @description User added */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    core_groups_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Group. */
                group_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_list: {
        parameters: {
            query?: {
                description?: string;
                expires?: string;
                expiring?: boolean;
                identifier?: string;
                intent?: "api" | "app_password" | "recovery" | "verification";
                managed?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTokenList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_set_key_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenSetKeyRequest"];
            };
        };
        responses: {
            /** @description Successfully changed key */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing key */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Token not found or expired */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    core_tokens_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_tokens_view_key_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenView"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Token not found or expired */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    core_transactional_applications_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionApplicationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionApplicationResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_user_consent_list: {
        parameters: {
            query?: {
                application?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserConsentList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_user_consent_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Consent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConsent"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_user_consent_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Consent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_user_consent_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Consent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_list: {
        parameters: {
            query?: {
                /** @description Attributes */
                attributes?: string;
                email?: string;
                groups_by_name?: string[];
                groups_by_pk?: string[];
                include_groups?: boolean;
                is_active?: boolean;
                is_superuser?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                path?: string;
                path_startswith?: string;
                /** @description A search term. */
                search?: string;
                type?: ("external" | "internal" | "internal_service_account" | "service_account")[];
                username?: string;
                uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_impersonate_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImpersonationRequest"];
            };
        };
        responses: {
            /** @description Successfully started impersonation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            /** @description Access denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_metrics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMetrics"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_recovery_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Link"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_recovery_email_create: {
        parameters: {
            query: {
                email_stage: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully sent recover email */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_set_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPasswordSetRequest"];
            };
        };
        responses: {
            /** @description Successfully changed password */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_impersonate_end_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully started impersonation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_paths_retrieve: {
        parameters: {
            query?: {
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPath"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    core_users_service_account_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserServiceAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserServiceAccountResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_list: {
        parameters: {
            query?: {
                /** @description Only return certificate-key pairs with keys */
                has_key?: boolean;
                include_details?: boolean;
                managed?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCertificateKeyPairList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificateKeyPairRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateKeyPair"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateKeyPair"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificateKeyPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateKeyPair"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCertificateKeyPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateKeyPair"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_view_certificate_retrieve: {
        parameters: {
            query?: {
                download?: boolean;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateData"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_view_private_key_retrieve: {
        parameters: {
            query?: {
                download?: boolean;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this Certificate-Key Pair. */
                kp_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateData"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    crypto_certificatekeypairs_generate_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificateGenerationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateKeyPair"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLicenseList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["License"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this License. */
                license_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["License"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this License. */
                license_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LicenseRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["License"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this License. */
                license_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this License. */
                license_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLicenseRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["License"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this License. */
                license_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_forecast_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseForecast"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_install_id_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstallID"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    enterprise_license_summary_retrieve: {
        parameters: {
            query?: {
                cached?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseSummary"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_list: {
        parameters: {
            query?: {
                action?: string;
                /** @description Brand name */
                brand_name?: string;
                client_ip?: string;
                /** @description Context Authorized application */
                context_authorized_app?: string;
                /** @description Context Model App */
                context_model_app?: string;
                /** @description Context Model Name */
                context_model_name?: string;
                /** @description Context Model Primary Key */
                context_model_pk?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                /** @description Username */
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEventList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event. */
                event_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event. */
                event_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event. */
                event_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event. */
                event_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_actions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_per_month_list: {
        parameters: {
            query?: {
                action?: string;
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Coordinate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_top_per_user_list: {
        parameters: {
            query?: {
                action?: string;
                top_n?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventTopPerUser"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_events_volume_list: {
        parameters: {
            query?: {
                action?: string;
                /** @description Brand name */
                brand_name?: string;
                client_ip?: string;
                /** @description Context Authorized application */
                context_authorized_app?: string;
                /** @description Context Model App */
                context_model_app?: string;
                /** @description Context Model Name */
                context_model_name?: string;
                /** @description Context Model Primary Key */
                context_model_pk?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                /** @description Username */
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Coordinate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_list: {
        parameters: {
            query?: {
                body?: string;
                created?: string;
                event?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                seen?: boolean;
                severity?: "alert" | "notice" | "warning";
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_notifications_mark_all_seen_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Marked tasks as read successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_list: {
        parameters: {
            query?: {
                group__name?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                /** @description Controls which severity level the created notifications will have.
                 *
                 *      */
                severity?: "alert" | "notice" | "warning";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationRuleList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRuleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRule"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Rule. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRule"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Rule. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRule"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Rule. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Rule. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRule"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_rules_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Rule. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_system_tasks_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                status?: "error" | "successful" | "unknown" | "warning";
                uid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSystemTaskList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_system_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this System Task. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemTask"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_system_tasks_run_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this System Task. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task retried successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retry task */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    events_transports_list: {
        parameters: {
            query?: {
                mode?: "email" | "local" | "webhook" | "webhook_slack";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                send_once?: boolean;
                webhook_url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationTransportList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationTransportRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationTransport"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationTransport"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationTransportRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationTransport"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationTransportRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationTransport"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    events_transports_test_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationTransportTest"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Failed to test transport */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    events_transports_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Notification Transport. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_list: {
        parameters: {
            query?: {
                evaluate_on_plan?: boolean;
                fsb_uuid?: string;
                /** @description Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
                 *
                 *      */
                invalid_response_action?: "restart" | "restart_with_context" | "retry";
                order?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                policies?: string[];
                policy_engine_mode?: "all" | "any";
                re_evaluate_policies?: boolean;
                /** @description A search term. */
                search?: string;
                stage?: string;
                target?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFlowStageBindingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowStageBindingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowStageBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Flow Stage Binding. */
                fsb_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowStageBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Flow Stage Binding. */
                fsb_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowStageBindingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowStageBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Flow Stage Binding. */
                fsb_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Flow Stage Binding. */
                fsb_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFlowStageBindingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowStageBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_bindings_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Flow Stage Binding. */
                fsb_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_executor_get: {
        parameters: {
            query: {
                /** @description Querystring as received */
                query: string;
            };
            header?: never;
            path: {
                flow_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeTypes"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_executor_solve: {
        parameters: {
            query: {
                /** @description Querystring as received */
                query: string;
            };
            header?: never;
            path: {
                flow_slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FlowChallengeResponseRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeTypes"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_inspector_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                flow_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowInspection"];
                };
            };
            /** @description No flow plan in session. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_list: {
        parameters: {
            query?: {
                /** @description Configure what should happen when a flow denies access to a user.
                 *
                 *      */
                denied_action?: "continue" | "message" | "message_continue";
                /** @description Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
                 *
                 *      */
                designation?: "authentication" | "authorization" | "enrollment" | "invalidation" | "recovery" | "stage_configuration" | "unenrollment";
                flow_uuid?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFlowList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFlowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_diagram_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowDiagram"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_execute_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Link"];
                };
            };
            /** @description Flow not applicable */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_export_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_set_background_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_set_background_url_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilePathRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_cache_clear_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully cleared cache */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_cache_info_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cache"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    flows_instances_import_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadRequest"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowImportResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlowImportResult"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                path?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBlueprintInstanceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlueprintInstanceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintInstance"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintInstance"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlueprintInstanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintInstance"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBlueprintInstanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintInstance"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_apply_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintInstance"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blueprint Instance. */
                instance_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    managed_blueprints_available_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintFile"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_access_tokens_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                /** @description A search term. */
                search?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTokenModelList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_access_tokens_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Access Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenModel"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_access_tokens_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Access Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_access_tokens_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Access Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_authorization_codes_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                /** @description A search term. */
                search?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedExpiringBaseGrantModelList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_authorization_codes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Authorization Code. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpiringBaseGrantModel"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_authorization_codes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Authorization Code. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_authorization_codes_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Authorization Code. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_refresh_tokens_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                /** @description A search term. */
                search?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTokenModelList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_refresh_tokens_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Refresh Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenModel"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_refresh_tokens_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Refresh Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    oauth2_refresh_tokens_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2 Refresh Token. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_list: {
        parameters: {
            query?: {
                managed__icontains?: string;
                managed__iexact?: string;
                name__icontains?: string;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                providers__isnull?: boolean;
                providers_by_pk?: number[];
                /** @description A search term. */
                search?: string;
                service_connection__name__icontains?: string;
                service_connection__name__iexact?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOutpostList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OutpostRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outpost"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outpost"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OutpostRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outpost"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOutpostRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outpost"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_health_list: {
        parameters: {
            query?: {
                managed__icontains?: string;
                managed__iexact?: string;
                name__icontains?: string;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                providers__isnull?: boolean;
                providers_by_pk?: number[];
                /** @description A search term. */
                search?: string;
                service_connection__name__icontains?: string;
                service_connection__name__iexact?: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutpostHealth"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_instances_default_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutpostDefaultConfig"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_ldap_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLDAPOutpostConfigList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_ldap_access_check: {
        parameters: {
            query?: {
                app_slug?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPCheckAccess"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_proxy_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProxyOutpostConfigList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_radius_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRadiusOutpostConfigList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_radius_access_check: {
        parameters: {
            query?: {
                app_slug?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusCheckAccess"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedServiceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_state_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceConnectionState"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Outpost Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_list: {
        parameters: {
            query?: {
                local?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                tls_authentication?: string;
                tls_verification?: string;
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDockerServiceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DockerServiceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DockerServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Docker Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DockerServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Docker Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DockerServiceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DockerServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Docker Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Docker Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDockerServiceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DockerServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_docker_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Docker Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_list: {
        parameters: {
            query?: {
                local?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedKubernetesServiceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KubernetesServiceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kubernetes Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kubernetes Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KubernetesServiceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kubernetes Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kubernetes Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedKubernetesServiceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesServiceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    outposts_service_connections_kubernetes_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kubernetes Service-Connection. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_list: {
        parameters: {
            query?: {
                bindings__isnull?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                promptstage__isnull?: boolean;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_test_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyTestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyTestResult"];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_cache_clear_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully cleared cache */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_cache_info_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cache"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_list: {
        parameters: {
            query?: {
                enabled?: boolean;
                order?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy?: string;
                policy__isnull?: boolean;
                /** @description A search term. */
                search?: string;
                target?: string;
                target_in?: string[];
                timeout?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPolicyBindingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyBindingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy Binding. */
                policy_binding_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy Binding. */
                policy_binding_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyBindingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy Binding. */
                policy_binding_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy Binding. */
                policy_binding_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPolicyBindingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyBinding"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_bindings_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Policy Binding. */
                policy_binding_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_list: {
        parameters: {
            query?: {
                created?: string;
                execution_logging?: boolean;
                last_updated?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy_uuid?: string;
                result?: boolean;
                /** @description A search term. */
                search?: string;
                wait_max?: number;
                wait_min?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDummyPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DummyPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DummyPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDummyPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_dummy_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_list: {
        parameters: {
            query?: {
                /** @description Match created events with this action type. When left empty, all action types will be matched.
                 *
                 *      */
                action?: "authorize_application" | "configuration_error" | "custom_" | "email_sent" | "flow_execution" | "impersonation_ended" | "impersonation_started" | "invitation_used" | "login" | "login_failed" | "logout" | "model_created" | "model_deleted" | "model_updated" | "password_set" | "policy_exception" | "policy_execution" | "property_mapping_exception" | "secret_rotate" | "secret_view" | "source_linked" | "suspicious_request" | "system_exception" | "system_task_exception" | "system_task_execution" | "update_available" | "user_write" | null;
                app?: string;
                client_ip?: string;
                created?: string;
                execution_logging?: boolean;
                last_updated?: string;
                model?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEventMatcherPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventMatcherPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventMatcherPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event Matcher Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventMatcherPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event Matcher Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventMatcherPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventMatcherPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event Matcher Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event Matcher Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEventMatcherPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventMatcherPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_event_matcher_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Event Matcher Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_list: {
        parameters: {
            query?: {
                created?: string;
                execution_logging?: boolean;
                expression?: string;
                last_updated?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedExpressionPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpressionPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpressionPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Expression Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpressionPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Expression Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExpressionPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpressionPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Expression Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Expression Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedExpressionPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpressionPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_expression_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Expression Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGeoIPPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeoIPPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoIPPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this GeoIP Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoIPPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this GeoIP Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeoIPPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoIPPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this GeoIP Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this GeoIP Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGeoIPPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoIPPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this GeoIP Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_geoip_iso3166_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedCountry"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_list: {
        parameters: {
            query?: {
                amount_digits?: number;
                amount_lowercase?: number;
                amount_symbols?: number;
                amount_uppercase?: number;
                check_have_i_been_pwned?: boolean;
                check_static_rules?: boolean;
                check_zxcvbn?: boolean;
                created?: string;
                error_message?: string;
                execution_logging?: boolean;
                hibp_allowed_count?: number;
                last_updated?: string;
                length_min?: number;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password_field?: string;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
                symbol_charset?: string;
                zxcvbn_score_threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPasswordPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPasswordPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_list: {
        parameters: {
            query?: {
                created?: string;
                days?: number;
                deny_only?: boolean;
                execution_logging?: boolean;
                last_updated?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPasswordExpiryPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordExpiryPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordExpiryPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Expiry Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordExpiryPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Expiry Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordExpiryPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordExpiryPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Expiry Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Expiry Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPasswordExpiryPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordExpiryPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_password_expiry_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Expiry Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_list: {
        parameters: {
            query?: {
                check_ip?: boolean;
                check_username?: boolean;
                created?: string;
                execution_logging?: boolean;
                last_updated?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
                threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReputationPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReputationPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReputationPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReputationPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReputationPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReputationPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedReputationPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReputationPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_scores_list: {
        parameters: {
            query?: {
                identifier?: string;
                /** @description Multiple values may be separated by commas. */
                identifier_in?: string[];
                ip?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                score?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReputationList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_scores_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Score. */
                reputation_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reputation"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_scores_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Score. */
                reputation_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_reputation_scores_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Reputation Score. */
                reputation_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_list: {
        parameters: {
            query?: {
                created?: string;
                execution_logging?: boolean;
                last_updated?: string;
                name?: string;
                num_historical_passwords?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password_field?: string;
                policy_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUniquePasswordPolicyList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UniquePasswordPolicyRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniquePasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Uniqueness Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniquePasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Uniqueness Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UniquePasswordPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniquePasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Uniqueness Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Uniqueness Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUniquePasswordPolicyRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniquePasswordPolicy"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    policies_unique_password_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Uniqueness Policy. */
                policy_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_test_create: {
        parameters: {
            query?: {
                format_result?: boolean;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PropertyMappingTestRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyMappingTestResult"];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationWebhookMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationWebhookMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationWebhookMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Webhook Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationWebhookMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Webhook Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationWebhookMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationWebhookMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Webhook Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Webhook Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationWebhookMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationWebhookMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_notification_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Webhook Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_list: {
        parameters: {
            query?: {
                expression?: string;
                managed?: string[];
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pm_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGoogleWorkspaceProviderMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGoogleWorkspaceProviderMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_google_workspace_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_list: {
        parameters: {
            query?: {
                expression?: string;
                managed?: string[];
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pm_uuid?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMicrosoftEntraProviderMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMicrosoftEntraProviderMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_microsoft_entra_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_list: {
        parameters: {
            query?: {
                managed?: string[];
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRACPropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RACPropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RACPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRACPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_rac_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRadiusProviderPropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RadiusProviderPropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProviderPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Radius Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProviderPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Radius Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RadiusProviderPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProviderPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Radius Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Radius Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRadiusProviderPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProviderPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_radius_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Radius Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_list: {
        parameters: {
            query?: {
                friendly_name?: string;
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                saml_name?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSAMLPropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLPropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSAMLPropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLPropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Provider Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scim_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Provider Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                scope_name?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedScopeMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScopeMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Scope Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Scope Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScopeMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Scope Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Scope Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedScopeMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScopeMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_provider_scope_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Scope Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedKerberosSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KerberosSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kerberos Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kerberos Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KerberosSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kerberos Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kerberos Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedKerberosSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_kerberos_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Kerberos Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLDAPSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this LDAP Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this LDAP Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this LDAP Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this LDAP Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLDAPSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_ldap_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this LDAP Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOAuthSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this OAuth Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this OAuth Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this OAuth Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this OAuth Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOAuthSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_oauth_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this OAuth Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPlexSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Plex Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Plex Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Plex Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Plex Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPlexSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_plex_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Plex Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSAMLSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSAMLSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SAML Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_list: {
        parameters: {
            query?: {
                managed?: string[];
                managed__isnull?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMSourcePropertyMappingList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourcePropertyMappingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMSourcePropertyMappingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourcePropertyMapping"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    propertymappings_source_scim_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SCIM Source Property Mapping. */
                pm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_all_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                /** @description When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded */
                backchannel?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_list: {
        parameters: {
            query?: {
                delegated_subject?: string;
                exclude_users_service_account?: boolean;
                filter_group?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGoogleWorkspaceProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGoogleWorkspaceProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_sync_object_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncObjectRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncObjectResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_sync_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    providers_google_workspace_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Google Workspace Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_groups_list: {
        parameters: {
            query?: {
                group__group_uuid?: string;
                group__name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGoogleWorkspaceProviderGroupList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_groups_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
                user__id?: number;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGoogleWorkspaceProviderUserList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleWorkspaceProviderUserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleWorkspaceProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_google_workspace_users_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Google Workspace Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                authorization_flow__slug__iexact?: string;
                base_dn__iexact?: string;
                certificate__kp_uuid__iexact?: string;
                certificate__name__iexact?: string;
                gid_start_number__iexact?: number;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                tls_server_name__iexact?: string;
                uid_start_number__iexact?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLDAPProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLDAPProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ldap_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this LDAP Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_list: {
        parameters: {
            query?: {
                exclude_users_service_account?: boolean;
                filter_group?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMicrosoftEntraProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMicrosoftEntraProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_sync_object_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncObjectRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncObjectResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_sync_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    providers_microsoft_entra_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Microsoft Entra Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_groups_list: {
        parameters: {
            query?: {
                group__group_uuid?: string;
                group__name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMicrosoftEntraProviderGroupList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_groups_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider Group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
                user__id?: number;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMicrosoftEntraProviderUserList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MicrosoftEntraProviderUserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MicrosoftEntraProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_microsoft_entra_users_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Microsoft Entra Provider User. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_list: {
        parameters: {
            query?: {
                access_code_validity?: string;
                access_token_validity?: string;
                application?: string;
                authorization_flow?: string;
                client_id?: string;
                /** @description Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable
                 *
                 *      */
                client_type?: "confidential" | "public";
                include_claims_in_id_token?: boolean;
                /** @description Configure how the issuer field of the ID Token should be filled.
                 *
                 *      */
                issuer_mode?: "global" | "per_provider";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                property_mappings?: string[];
                refresh_token_validity?: string;
                /** @description A search term. */
                search?: string;
                signing_key?: string;
                /** @description Configure what data should be used as unique User Identifier. For most cases, the default should be fine.
                 *
                 *      */
                sub_mode?: "hashed_user_id" | "user_email" | "user_id" | "user_upn" | "user_username" | "user_uuid";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOAuth2ProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuth2ProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2Provider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2Provider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuth2ProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2Provider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOAuth2ProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2Provider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_preview_user_retrieve: {
        parameters: {
            query?: {
                for_user?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyMappingPreview"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_oauth2_setup_urls_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2ProviderSetupURLs"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Provider has no application assigned */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    providers_oauth2_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this OAuth2/OpenID Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                authorization_flow__slug__iexact?: string;
                basic_auth_enabled__iexact?: boolean;
                basic_auth_password_attribute__iexact?: string;
                basic_auth_user_attribute__iexact?: string;
                certificate__kp_uuid__iexact?: string;
                certificate__name__iexact?: string;
                cookie_domain__iexact?: string;
                external_host__iexact?: string;
                internal_host__iexact?: string;
                internal_host_ssl_validation__iexact?: boolean;
                mode__iexact?: string;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                property_mappings__iexact?: string[];
                /** @description A search term. */
                search?: string;
                skip_path_regex__iexact?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProxyProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Proxy Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Proxy Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxyProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Proxy Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Proxy Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProxyProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProxyProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_proxy_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Proxy Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRACProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RACProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this RAC Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this RAC Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RACProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this RAC Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this RAC Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRACProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RACProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_rac_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this RAC Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                authorization_flow__slug__iexact?: string;
                client_networks__iexact?: string;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRadiusProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RadiusProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RadiusProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRadiusProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadiusProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_radius_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Radius Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_list: {
        parameters: {
            query?: {
                acs_url?: string;
                assertion_valid_not_before?: string;
                assertion_valid_not_on_or_after?: string;
                audience?: string;
                authentication_flow?: string;
                authn_context_class_ref_mapping?: string;
                authorization_flow?: string;
                backchannel_application?: string;
                default_relay_state?: string;
                digest_algorithm?: "http://www.w3.org/2000/09/xmldsig#sha1" | "http://www.w3.org/2001/04/xmldsig-more#sha384" | "http://www.w3.org/2001/04/xmlenc#sha256" | "http://www.w3.org/2001/04/xmlenc#sha512";
                encryption_kp?: string;
                invalidation_flow?: string;
                is_backchannel?: boolean;
                issuer?: string;
                name?: string;
                name_id_mapping?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                property_mappings?: string[];
                /** @description A search term. */
                search?: string;
                session_valid_not_on_or_after?: string;
                sign_assertion?: boolean;
                sign_response?: boolean;
                signature_algorithm?: "http://www.w3.org/2000/09/xmldsig#dsa-sha1" | "http://www.w3.org/2000/09/xmldsig#rsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512";
                signing_kp?: string;
                /** @description This determines how authentik sends the response back to the Service Provider.
                 *
                 *      */
                sp_binding?: "post" | "redirect";
                verification_kp?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSAMLProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSAMLProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_metadata_retrieve: {
        parameters: {
            query?: {
                download?: boolean;
                /** @description Optionally force the metadata to only include one binding. */
                force_binding?: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" | "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect";
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLMetadata"];
                    "application/xml": components["schemas"]["SAMLMetadata"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Provider has no application assigned */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    providers_saml_preview_user_retrieve: {
        parameters: {
            query?: {
                for_user?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyMappingPreview"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SAML Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_saml_import_metadata_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["SAMLProviderImportRequest"];
            };
        };
        responses: {
            /** @description Successfully imported provider */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_list: {
        parameters: {
            query?: {
                exclude_users_service_account?: boolean;
                filter_group?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_sync_object_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncObjectRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncObjectResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_sync_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    providers_scim_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this SCIM Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_groups_list: {
        parameters: {
            query?: {
                group__group_uuid?: string;
                group__name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMProviderGroupList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMProviderGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProviderGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_groups_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider__id?: number;
                /** @description A search term. */
                search?: string;
                user__id?: number;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMProviderUserList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMProviderUserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMProviderUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_scim_users_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this scim provider user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_list: {
        parameters: {
            query?: {
                application__isnull?: boolean;
                name__iexact?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSSFProviderList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SSFProviderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSFProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Shared Signals Framework Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSFProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Shared Signals Framework Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SSFProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSFProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Shared Signals Framework Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Shared Signals Framework Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSSFProviderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSFProvider"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    providers_ssf_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Shared Signals Framework Provider. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_list: {
        parameters: {
            query?: {
                endpoint?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                /** @description A search term. */
                search?: string;
                session__user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedConnectionTokenList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Connection token. */
                connection_token_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionToken"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Connection token. */
                connection_token_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionToken"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Connection token. */
                connection_token_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Connection token. */
                connection_token_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedConnectionTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionToken"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_connection_tokens_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Connection token. */
                connection_token_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                search?: string;
                superuser_full_list?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEndpointList"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndpointRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Endpoint"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Endpoint. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Endpoint"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Endpoint. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EndpointRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Endpoint"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Endpoint. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Endpoint. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEndpointRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Endpoint"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rac_endpoints_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this RAC Endpoint. */
                pbm_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedInitialPermissionsList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitialPermissionsRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InitialPermissions"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Initial Permissions. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InitialPermissions"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Initial Permissions. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitialPermissionsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InitialPermissions"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Initial Permissions. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Initial Permissions. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInitialPermissionsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InitialPermissions"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_initial_permissions_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Initial Permissions. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_list: {
        parameters: {
            query?: {
                codename?: string;
                content_type__app_label?: string;
                content_type__model?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                role?: string;
                /** @description A search term. */
                search?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPermissionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_roles_list: {
        parameters: {
            query: {
                model: "authentik_blueprints.blueprintinstance" | "authentik_brands.brand" | "authentik_core.application" | "authentik_core.applicationentitlement" | "authentik_core.group" | "authentik_core.token" | "authentik_core.user" | "authentik_crypto.certificatekeypair" | "authentik_enterprise.license" | "authentik_events.event" | "authentik_events.notification" | "authentik_events.notificationrule" | "authentik_events.notificationtransport" | "authentik_events.notificationwebhookmapping" | "authentik_flows.flow" | "authentik_flows.flowstagebinding" | "authentik_outposts.dockerserviceconnection" | "authentik_outposts.kubernetesserviceconnection" | "authentik_outposts.outpost" | "authentik_policies.policybinding" | "authentik_policies_dummy.dummypolicy" | "authentik_policies_event_matcher.eventmatcherpolicy" | "authentik_policies_expiry.passwordexpirypolicy" | "authentik_policies_expression.expressionpolicy" | "authentik_policies_geoip.geoippolicy" | "authentik_policies_password.passwordpolicy" | "authentik_policies_reputation.reputationpolicy" | "authentik_policies_unique_password.uniquepasswordpolicy" | "authentik_providers_google_workspace.googleworkspaceprovider" | "authentik_providers_google_workspace.googleworkspaceprovidermapping" | "authentik_providers_ldap.ldapprovider" | "authentik_providers_microsoft_entra.microsoftentraprovider" | "authentik_providers_microsoft_entra.microsoftentraprovidermapping" | "authentik_providers_oauth2.oauth2provider" | "authentik_providers_oauth2.scopemapping" | "authentik_providers_proxy.proxyprovider" | "authentik_providers_rac.endpoint" | "authentik_providers_rac.racpropertymapping" | "authentik_providers_rac.racprovider" | "authentik_providers_radius.radiusprovider" | "authentik_providers_radius.radiusproviderpropertymapping" | "authentik_providers_saml.samlpropertymapping" | "authentik_providers_saml.samlprovider" | "authentik_providers_scim.scimmapping" | "authentik_providers_scim.scimprovider" | "authentik_providers_ssf.ssfprovider" | "authentik_rbac.initialpermissions" | "authentik_rbac.role" | "authentik_sources_kerberos.groupkerberossourceconnection" | "authentik_sources_kerberos.kerberossource" | "authentik_sources_kerberos.kerberossourcepropertymapping" | "authentik_sources_kerberos.userkerberossourceconnection" | "authentik_sources_ldap.groupldapsourceconnection" | "authentik_sources_ldap.ldapsource" | "authentik_sources_ldap.ldapsourcepropertymapping" | "authentik_sources_ldap.userldapsourceconnection" | "authentik_sources_oauth.groupoauthsourceconnection" | "authentik_sources_oauth.oauthsource" | "authentik_sources_oauth.oauthsourcepropertymapping" | "authentik_sources_oauth.useroauthsourceconnection" | "authentik_sources_plex.groupplexsourceconnection" | "authentik_sources_plex.plexsource" | "authentik_sources_plex.plexsourcepropertymapping" | "authentik_sources_plex.userplexsourceconnection" | "authentik_sources_saml.groupsamlsourceconnection" | "authentik_sources_saml.samlsource" | "authentik_sources_saml.samlsourcepropertymapping" | "authentik_sources_saml.usersamlsourceconnection" | "authentik_sources_scim.scimsource" | "authentik_sources_scim.scimsourcepropertymapping" | "authentik_stages_authenticator_duo.authenticatorduostage" | "authentik_stages_authenticator_duo.duodevice" | "authentik_stages_authenticator_email.authenticatoremailstage" | "authentik_stages_authenticator_email.emaildevice" | "authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage" | "authentik_stages_authenticator_sms.authenticatorsmsstage" | "authentik_stages_authenticator_sms.smsdevice" | "authentik_stages_authenticator_static.authenticatorstaticstage" | "authentik_stages_authenticator_static.staticdevice" | "authentik_stages_authenticator_totp.authenticatortotpstage" | "authentik_stages_authenticator_totp.totpdevice" | "authentik_stages_authenticator_validate.authenticatorvalidatestage" | "authentik_stages_authenticator_webauthn.authenticatorwebauthnstage" | "authentik_stages_authenticator_webauthn.webauthndevice" | "authentik_stages_captcha.captchastage" | "authentik_stages_consent.consentstage" | "authentik_stages_consent.userconsent" | "authentik_stages_deny.denystage" | "authentik_stages_dummy.dummystage" | "authentik_stages_email.emailstage" | "authentik_stages_identification.identificationstage" | "authentik_stages_invitation.invitation" | "authentik_stages_invitation.invitationstage" | "authentik_stages_mtls.mutualtlsstage" | "authentik_stages_password.passwordstage" | "authentik_stages_prompt.prompt" | "authentik_stages_prompt.promptstage" | "authentik_stages_redirect.redirectstage" | "authentik_stages_source.sourcestage" | "authentik_stages_user_delete.userdeletestage" | "authentik_stages_user_login.userloginstage" | "authentik_stages_user_logout.userlogoutstage" | "authentik_stages_user_write.userwritestage" | "authentik_tenants.domain";
                object_pk?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoleAssignedObjectPermissionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_roles_assign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionAssignRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionAssignResult"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_roles_unassign_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPermissionAssignRequest"];
            };
        };
        responses: {
            /** @description Successfully unassigned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_users_list: {
        parameters: {
            query: {
                model: "authentik_blueprints.blueprintinstance" | "authentik_brands.brand" | "authentik_core.application" | "authentik_core.applicationentitlement" | "authentik_core.group" | "authentik_core.token" | "authentik_core.user" | "authentik_crypto.certificatekeypair" | "authentik_enterprise.license" | "authentik_events.event" | "authentik_events.notification" | "authentik_events.notificationrule" | "authentik_events.notificationtransport" | "authentik_events.notificationwebhookmapping" | "authentik_flows.flow" | "authentik_flows.flowstagebinding" | "authentik_outposts.dockerserviceconnection" | "authentik_outposts.kubernetesserviceconnection" | "authentik_outposts.outpost" | "authentik_policies.policybinding" | "authentik_policies_dummy.dummypolicy" | "authentik_policies_event_matcher.eventmatcherpolicy" | "authentik_policies_expiry.passwordexpirypolicy" | "authentik_policies_expression.expressionpolicy" | "authentik_policies_geoip.geoippolicy" | "authentik_policies_password.passwordpolicy" | "authentik_policies_reputation.reputationpolicy" | "authentik_policies_unique_password.uniquepasswordpolicy" | "authentik_providers_google_workspace.googleworkspaceprovider" | "authentik_providers_google_workspace.googleworkspaceprovidermapping" | "authentik_providers_ldap.ldapprovider" | "authentik_providers_microsoft_entra.microsoftentraprovider" | "authentik_providers_microsoft_entra.microsoftentraprovidermapping" | "authentik_providers_oauth2.oauth2provider" | "authentik_providers_oauth2.scopemapping" | "authentik_providers_proxy.proxyprovider" | "authentik_providers_rac.endpoint" | "authentik_providers_rac.racpropertymapping" | "authentik_providers_rac.racprovider" | "authentik_providers_radius.radiusprovider" | "authentik_providers_radius.radiusproviderpropertymapping" | "authentik_providers_saml.samlpropertymapping" | "authentik_providers_saml.samlprovider" | "authentik_providers_scim.scimmapping" | "authentik_providers_scim.scimprovider" | "authentik_providers_ssf.ssfprovider" | "authentik_rbac.initialpermissions" | "authentik_rbac.role" | "authentik_sources_kerberos.groupkerberossourceconnection" | "authentik_sources_kerberos.kerberossource" | "authentik_sources_kerberos.kerberossourcepropertymapping" | "authentik_sources_kerberos.userkerberossourceconnection" | "authentik_sources_ldap.groupldapsourceconnection" | "authentik_sources_ldap.ldapsource" | "authentik_sources_ldap.ldapsourcepropertymapping" | "authentik_sources_ldap.userldapsourceconnection" | "authentik_sources_oauth.groupoauthsourceconnection" | "authentik_sources_oauth.oauthsource" | "authentik_sources_oauth.oauthsourcepropertymapping" | "authentik_sources_oauth.useroauthsourceconnection" | "authentik_sources_plex.groupplexsourceconnection" | "authentik_sources_plex.plexsource" | "authentik_sources_plex.plexsourcepropertymapping" | "authentik_sources_plex.userplexsourceconnection" | "authentik_sources_saml.groupsamlsourceconnection" | "authentik_sources_saml.samlsource" | "authentik_sources_saml.samlsourcepropertymapping" | "authentik_sources_saml.usersamlsourceconnection" | "authentik_sources_scim.scimsource" | "authentik_sources_scim.scimsourcepropertymapping" | "authentik_stages_authenticator_duo.authenticatorduostage" | "authentik_stages_authenticator_duo.duodevice" | "authentik_stages_authenticator_email.authenticatoremailstage" | "authentik_stages_authenticator_email.emaildevice" | "authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage" | "authentik_stages_authenticator_sms.authenticatorsmsstage" | "authentik_stages_authenticator_sms.smsdevice" | "authentik_stages_authenticator_static.authenticatorstaticstage" | "authentik_stages_authenticator_static.staticdevice" | "authentik_stages_authenticator_totp.authenticatortotpstage" | "authentik_stages_authenticator_totp.totpdevice" | "authentik_stages_authenticator_validate.authenticatorvalidatestage" | "authentik_stages_authenticator_webauthn.authenticatorwebauthnstage" | "authentik_stages_authenticator_webauthn.webauthndevice" | "authentik_stages_captcha.captchastage" | "authentik_stages_consent.consentstage" | "authentik_stages_consent.userconsent" | "authentik_stages_deny.denystage" | "authentik_stages_dummy.dummystage" | "authentik_stages_email.emailstage" | "authentik_stages_identification.identificationstage" | "authentik_stages_invitation.invitation" | "authentik_stages_invitation.invitationstage" | "authentik_stages_mtls.mutualtlsstage" | "authentik_stages_password.passwordstage" | "authentik_stages_prompt.prompt" | "authentik_stages_prompt.promptstage" | "authentik_stages_redirect.redirectstage" | "authentik_stages_source.sourcestage" | "authentik_stages_user_delete.userdeletestage" | "authentik_stages_user_login.userloginstage" | "authentik_stages_user_logout.userlogoutstage" | "authentik_stages_user_write.userwritestage" | "authentik_tenants.domain";
                object_pk?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserAssignedObjectPermissionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_users_assign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionAssignRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionAssignResult"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_assigned_by_users_unassign_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPermissionAssignRequest"];
            };
        };
        responses: {
            /** @description Successfully unassigned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_roles_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedExtraRoleObjectPermissionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_roles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraRoleObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_roles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraRoleObjectPermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraRoleObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_roles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_roles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedExtraRoleObjectPermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraRoleObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                user_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedExtraUserObjectPermissionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraUserObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraUserObjectPermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraUserObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_permissions_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user object permission. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedExtraUserObjectPermissionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraUserObjectPermission"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_list: {
        parameters: {
            query?: {
                group__name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoleList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    rbac_roles_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Role. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    root_config_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Config"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_list: {
        parameters: {
            query?: {
                managed?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                /** @description A search term. */
                search?: string;
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Source"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_set_icon_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_set_icon_url_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilePathRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_all_user_settings_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSetting"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this group source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupKerberosSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_kerberos_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupLDAPSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_ldap_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupOAuthSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_oauth_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupPlexSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPlexSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupPlexSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupPlexSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_plex_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_list: {
        parameters: {
            query?: {
                group?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupSAMLSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_group_connections_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Group SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_list: {
        parameters: {
            query?: {
                enabled?: boolean;
                /** @description KAdmin server type
                 *
                 *      */
                kadmin_type?: "Heimdal" | "MIT" | "other";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password_login_update_internal_password?: boolean;
                pbm_uuid?: string;
                realm?: string;
                /** @description A search term. */
                search?: string;
                slug?: string;
                spnego_server_name?: string;
                sync_principal?: string;
                sync_users?: boolean;
                sync_users_password?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedKerberosSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KerberosSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KerberosSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedKerberosSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_sync_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KerberosSyncStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_kerberos_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_list: {
        parameters: {
            query?: {
                additional_group_dn?: string;
                additional_user_dn?: string;
                base_dn?: string;
                bind_cn?: string;
                client_certificate?: string;
                delete_not_found_objects?: boolean;
                enabled?: boolean;
                group_membership_field?: string;
                group_object_filter?: string;
                group_property_mappings?: string[];
                lookup_groups_from_user?: boolean;
                name?: string;
                object_uniqueness_field?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password_login_update_internal_password?: boolean;
                pbm_uuid?: string;
                peer_certificate?: string;
                /** @description A search term. */
                search?: string;
                server_uri?: string;
                slug?: string;
                sni?: boolean;
                start_tls?: boolean;
                sync_groups?: boolean;
                sync_parent_group?: string;
                sync_users?: boolean;
                sync_users_password?: boolean;
                user_membership_attribute?: string;
                user_object_filter?: string;
                user_property_mappings?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLDAPSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LDAPSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLDAPSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_debug_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LDAPDebug"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_sync_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_ldap_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_list: {
        parameters: {
            query?: {
                access_token_url?: string;
                additional_scopes?: string;
                authentication_flow?: string;
                authorization_url?: string;
                consumer_key?: string;
                enabled?: boolean;
                enrollment_flow?: string;
                /** @description How the source determines if an existing group should be used or a new group created.
                 *
                 *      */
                group_matching_mode?: "identifier" | "name_deny" | "name_link";
                /** @description Only return sources with JWKS data */
                has_jwks?: boolean;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                policy_engine_mode?: "all" | "any";
                profile_url?: string;
                provider_type?: string;
                request_token_url?: string;
                /** @description A search term. */
                search?: string;
                slug?: string;
                /** @description How the source determines if an existing user should be authenticated or a new user enrolled.
                 *
                 *      */
                user_matching_mode?: "email_deny" | "email_link" | "identifier" | "username_deny" | "username_link";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOAuthSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOAuthSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_oauth_source_types_list: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceType"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_list: {
        parameters: {
            query?: {
                allow_friends?: boolean;
                authentication_flow?: string;
                client_id?: string;
                enabled?: boolean;
                enrollment_flow?: string;
                /** @description How the source determines if an existing group should be used or a new group created.
                 *
                 *      */
                group_matching_mode?: "identifier" | "name_deny" | "name_link";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                policy_engine_mode?: "all" | "any";
                /** @description A search term. */
                search?: string;
                slug?: string;
                /** @description How the source determines if an existing user should be authenticated or a new user enrolled.
                 *
                 *      */
                user_matching_mode?: "email_deny" | "email_link" | "identifier" | "username_deny" | "username_link";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPlexSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPlexSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlexSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_plex_redeem_token_create: {
        parameters: {
            query?: {
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexTokenRedeemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectChallenge"];
                };
            };
            /** @description Token not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sources_plex_redeem_token_authenticated_create: {
        parameters: {
            query?: {
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlexTokenRedeemRequest"];
            };
        };
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Token not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sources_saml_list: {
        parameters: {
            query?: {
                allow_idp_initiated?: boolean;
                authentication_flow?: string;
                binding_type?: "POST" | "POST_AUTO" | "REDIRECT";
                digest_algorithm?: "http://www.w3.org/2000/09/xmldsig#sha1" | "http://www.w3.org/2001/04/xmldsig-more#sha384" | "http://www.w3.org/2001/04/xmlenc#sha256" | "http://www.w3.org/2001/04/xmlenc#sha512";
                enabled?: boolean;
                enrollment_flow?: string;
                issuer?: string;
                managed?: string;
                name?: string;
                /** @description NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.
                 *
                 *      */
                name_id_policy?: "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName" | "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress" | "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName" | "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent" | "urn:oasis:names:tc:SAML:2.0:nameid-format:transient";
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                policy_engine_mode?: "all" | "any";
                pre_authentication_flow?: string;
                /** @description A search term. */
                search?: string;
                signature_algorithm?: "http://www.w3.org/2000/09/xmldsig#dsa-sha1" | "http://www.w3.org/2000/09/xmldsig#rsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384" | "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512";
                signing_kp?: string;
                slo_url?: string;
                slug?: string;
                sso_url?: string;
                temporary_user_delete_after?: string;
                /** @description How the source determines if an existing user should be authenticated or a new user enrolled.
                 *
                 *      */
                user_matching_mode?: "email_deny" | "email_link" | "identifier" | "username_deny" | "username_link";
                verification_kp?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSAMLSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SAMLSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSAMLSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_metadata_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SAMLMetadata"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                pbm_uuid?: string;
                /** @description A search term. */
                search?: string;
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMSourceList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMSourceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSource"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_list: {
        parameters: {
            query?: {
                group__group_uuid?: string;
                group__name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMSourceGroupList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMSourceGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceGroup"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_groups_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source group. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user__id?: number;
                user__username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSCIMSourceUserList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceUserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SCIMSourceUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSCIMSourceUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SCIMSourceUser"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_scim_users_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this scim source user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user source connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserKerberosSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserKerberosSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserKerberosSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_kerberos_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Kerberos Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserLDAPSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserLDAPSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLDAPSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_ldap_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User LDAP Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserOAuthSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserOAuthSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOAuthSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_oauth_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User OAuth Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserPlexSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPlexSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPlexSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserPlexSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPlexSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_plex_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User Plex Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                source__slug?: string;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserSAMLSourceConnectionList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserSAMLSourceConnectionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSAMLSourceConnection"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    sources_user_connections_saml_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this User SAML Source Connection. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    ssf_streams_list: {
        parameters: {
            query?: {
                delivery_method?: "https://schemas.openid.net/secevent/risc/delivery-method/poll" | "https://schemas.openid.net/secevent/risc/delivery-method/push";
                endpoint_url?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSSFStreamList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    ssf_streams_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SSF Stream. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSFStream"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_all_user_settings_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSetting"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_list: {
        parameters: {
            query?: {
                api_hostname?: string;
                client_id?: string;
                configure_flow?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorDuoStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorDuoStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorDuoStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorDuoStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorDuoStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorDuoStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorDuoStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorDuoStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_enrollment_status_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DuoDeviceEnrollmentStatus"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_import_device_manual_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorDuoStageManualDeviceImportRequest"];
            };
        };
        responses: {
            /** @description Enrollment successful */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_import_devices_automatic_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorDuoStageDeviceImportResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_duo_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Duo Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_list: {
        parameters: {
            query?: {
                configure_flow?: string;
                friendly_name?: string;
                from_address?: string;
                host?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password?: string;
                port?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                subject?: string;
                template?: string;
                timeout?: number;
                token_expiry?: string;
                use_global_settings?: boolean;
                use_ssl?: boolean;
                use_tls?: boolean;
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorEmailStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorEmailStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorEmailStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorEmailStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_email_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_list: {
        parameters: {
            query?: {
                configure_flow?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorEndpointGDTCStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorEndpointGDTCStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEndpointGDTCStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEndpointGDTCStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorEndpointGDTCStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEndpointGDTCStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorEndpointGDTCStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorEndpointGDTCStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_endpoint_gdtc_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_list: {
        parameters: {
            query?: {
                account_sid?: string;
                auth?: string;
                auth_password?: string;
                auth_type?: "basic" | "bearer";
                configure_flow?: string;
                friendly_name?: string;
                from_number?: string;
                mapping?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                provider?: "generic" | "twilio";
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                verify_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorSMSStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorSMSStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorSMSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SMS Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorSMSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SMS Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorSMSStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorSMSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SMS Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SMS Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorSMSStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorSMSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_sms_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this SMS Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_list: {
        parameters: {
            query?: {
                configure_flow?: string;
                friendly_name?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                token_count?: number;
                token_length?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorStaticStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorStaticStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorStaticStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Static Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorStaticStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Static Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorStaticStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorStaticStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Static Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Static Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorStaticStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorStaticStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_static_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Static Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_list: {
        parameters: {
            query?: {
                configure_flow?: string;
                digits?: "6" | "8";
                friendly_name?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorTOTPStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorTOTPStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorTOTPStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this TOTP Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorTOTPStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this TOTP Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorTOTPStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorTOTPStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this TOTP Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this TOTP Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorTOTPStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorTOTPStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_totp_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this TOTP Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_list: {
        parameters: {
            query?: {
                configuration_stages?: string[];
                name?: string;
                not_configured_action?: "configure" | "deny" | "skip";
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorValidateStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorValidateStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorValidateStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Authenticator Validation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorValidateStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Authenticator Validation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorValidateStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorValidateStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Authenticator Validation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Authenticator Validation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorValidateStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorValidateStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_validate_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Authenticator Validation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_list: {
        parameters: {
            query?: {
                authenticator_attachment?: "cross-platform" | "platform" | null;
                configure_flow?: string;
                device_type_restrictions?: string[];
                friendly_name?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                resident_key_requirement?: "discouraged" | "preferred" | "required";
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                user_verification?: "discouraged" | "preferred" | "required";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAuthenticatorWebAuthnStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorWebAuthnStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorWebAuthnStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorWebAuthnStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticatorWebAuthnStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorWebAuthnStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAuthenticatorWebAuthnStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatorWebAuthnStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Authenticator Setup Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_device_types_list: {
        parameters: {
            query?: {
                aaguid?: string;
                description?: string;
                icon?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWebAuthnDeviceTypeList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_authenticator_webauthn_device_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this WebAuthn Device type. */
                aaguid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnDeviceType"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                public_key?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCaptchaStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CaptchaStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Captcha Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Captcha Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CaptchaStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Captcha Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Captcha Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCaptchaStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptchaStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_captcha_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Captcha Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_list: {
        parameters: {
            query?: {
                consent_expire_in?: string;
                mode?: "always_require" | "expiring" | "permanent";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedConsentStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConsentStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsentStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Consent Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsentStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Consent Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConsentStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsentStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Consent Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Consent Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedConsentStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsentStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_consent_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Consent Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_list: {
        parameters: {
            query?: {
                deny_message?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDenyStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DenyStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DenyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Deny Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DenyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Deny Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DenyStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DenyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Deny Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Deny Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDenyStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DenyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_deny_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Deny Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                throw_error?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDummyStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DummyStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DummyStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDummyStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DummyStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_dummy_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Dummy Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_list: {
        parameters: {
            query?: {
                activate_user_on_success?: boolean;
                from_address?: string;
                host?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                port?: number;
                /** @description A search term. */
                search?: string;
                subject?: string;
                template?: string;
                timeout?: number;
                token_expiry?: string;
                use_global_settings?: boolean;
                use_ssl?: boolean;
                use_tls?: boolean;
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEmailStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEmailStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Email Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_email_templates_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeCreate"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_list: {
        parameters: {
            query?: {
                captcha_stage?: string;
                case_insensitive_matching?: boolean;
                enrollment_flow?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                password_stage?: string;
                passwordless_flow?: string;
                recovery_flow?: string;
                /** @description A search term. */
                search?: string;
                show_matched_user?: boolean;
                show_source_labels?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedIdentificationStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentificationStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentificationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Identification Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentificationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Identification Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentificationStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentificationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Identification Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Identification Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdentificationStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdentificationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_identification_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Identification Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_list: {
        parameters: {
            query?: {
                created_by__username?: string;
                expires?: string;
                flow__slug?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedInvitationList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvitationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invitation"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation. */
                invite_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invitation"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation. */
                invite_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvitationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invitation"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation. */
                invite_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation. */
                invite_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInvitationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invitation"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_invitations_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation. */
                invite_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_list: {
        parameters: {
            query?: {
                continue_flow_without_invitation?: boolean;
                name?: string;
                no_flows?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedInvitationStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvitationStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvitationStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedInvitationStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_invitation_stages_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Invitation Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_list: {
        parameters: {
            query?: {
                cert_attribute?: "common_name" | "email" | "subject";
                certificate_authorities?: string[];
                mode?: "optional" | "required";
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                user_attribute?: "email" | "username";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMutualTLSStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutualTLSStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutualTLSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Mutual TLS Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutualTLSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Mutual TLS Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutualTLSStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutualTLSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Mutual TLS Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Mutual TLS Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMutualTLSStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutualTLSStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_mtls_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Mutual TLS Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_list: {
        parameters: {
            query?: {
                allow_show_password?: boolean;
                configure_flow?: string;
                failed_attempts_before_cancel?: number;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPasswordStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPasswordStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_password_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Password Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_list: {
        parameters: {
            query?: {
                field_key?: string;
                label?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                placeholder?: string;
                /** @description A search term. */
                search?: string;
                type?: "ak-locale" | "checkbox" | "date" | "date-time" | "dropdown" | "email" | "file" | "hidden" | "number" | "password" | "radio-button-group" | "separator" | "static" | "text" | "text_area" | "text_area_read_only" | "text_read_only" | "username";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPromptList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt. */
                prompt_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt. */
                prompt_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt. */
                prompt_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt. */
                prompt_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPromptRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt. */
                prompt_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_prompts_preview_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptChallenge"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_list: {
        parameters: {
            query?: {
                fields?: string[];
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                validation_policies?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPromptStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPromptStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_prompt_stages_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Prompt Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRedirectStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RedirectStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Redirect Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Redirect Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RedirectStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Redirect Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Redirect Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRedirectStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_redirect_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Redirect Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                resume_timeout?: string;
                /** @description A search term. */
                search?: string;
                source?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSourceStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SourceStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Source Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Source Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SourceStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Source Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Source Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSourceStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_source_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Source Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserDeleteStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDeleteStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Delete Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Delete Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDeleteStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Delete Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Delete Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserDeleteStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_delete_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Delete Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_list: {
        parameters: {
            query?: {
                /** @description Bind sessions created by this stage to the configured GeoIP location
                 *
                 *      */
                geoip_binding?: "bind_continent" | "bind_continent_country" | "bind_continent_country_city" | "no_binding";
                name?: string;
                /** @description Bind sessions created by this stage to the configured network
                 *
                 *      */
                network_binding?: "bind_asn" | "bind_asn_network" | "bind_asn_network_ip" | "no_binding";
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                remember_me_offset?: string;
                /** @description A search term. */
                search?: string;
                session_duration?: string;
                stage_uuid?: string;
                terminate_other_sessions?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserLoginStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLoginStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Login Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Login Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLoginStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Login Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Login Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserLoginStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_login_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Login Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_list: {
        parameters: {
            query?: {
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserLogoutStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogoutStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLogoutStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Logout Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLogoutStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Logout Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogoutStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLogoutStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Logout Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Logout Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserLogoutStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLogoutStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_logout_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Logout Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_list: {
        parameters: {
            query?: {
                create_users_as_inactive?: boolean;
                create_users_group?: string;
                name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                stage_uuid?: string;
                user_creation_mode?: "always_create" | "create_when_required" | "never_create";
                user_path_template?: string;
                user_type?: "external" | "internal" | "internal_service_account" | "service_account";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserWriteStageList"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserWriteStageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWriteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Write Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWriteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Write Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserWriteStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWriteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Write Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Write Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserWriteStageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWriteStage"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
    stages_user_write_used_by_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User Write Stage. */
                stage_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsedBy"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericError"];
                };
            };
        };
    };
}
